BEGIN FUNCTION TRANSFORMATION CompExp
BEGIN LOOP
BEGIN scalar
{"begin":"%17 = phi i32 [ 1, %11 ], [ %42, %40 ]",
 "body":{"begin":"%22 = sitofp i32 %17 to double",
         "end":"br label %16",
         "precursor":"br i1 %20, label %44, label %21",
         "successor":"%17 = phi i32 [ 1, %11 ], [ %42, %40 ]"},
 "comparison":"%20 = icmp sgt i32 %18, %12",
 "end":"br i1 %20, label %44, label %21",
 "increment":"%43 = add nuw nsw i32 %18, 1",
 "iter_begin":"i32 1",
 "iter_end":"%12 = phi i32 [ 0, %2 ], [ %6, %4 ]",
 "iter_step":"i32 1",
 "iterator":"%18 = phi i32 [ 1, %11 ], [ %43, %40 ]",
 "kernel":{"constants":
           [{"use":"%37 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %1, i64 %34, i32 0",
             "value":"%struct.dcomplex* %1"},
            {"use":"%38 = getelementptr inbounds %struct.dcomplex, %struct.dcomplex* %1, i64 %34, i32 1",
             "value":"%struct.dcomplex* %1"}],
           "input":
           ["%17 = phi i32 [ 1, %11 ], [ %42, %40 ]"],
           "origin":
           ["br i1 %20, label %44, label %21"],
           "output":"%42 = shl nsw i32 %17, 1",
           "restrictions":
           [{"use":"%22 = sitofp i32 %17 to double",
             "value":"%17 = phi i32 [ 1, %11 ], [ %42, %40 ]"},
            {"use":"%25 = sext i32 %17 to i64",
             "value":"%17 = phi i32 [ 1, %11 ], [ %42, %40 ]"},
            {"use":"%41 = add nsw i32 %19, %17",
             "value":"%17 = phi i32 [ 1, %11 ], [ %42, %40 ]"},
            {"use":"%42 = shl nsw i32 %17, 1",
             "value":"%17 = phi i32 [ 1, %11 ], [ %42, %40 ]"},
            {"use":"%43 = add nuw nsw i32 %18, 1",
             "value":"%18 = phi i32 [ 1, %11 ], [ %43, %40 ]"},
            {"use":"%24 = add i32 %19, -1",
             "value":"%19 = phi i32 [ 2, %11 ], [ %41, %40 ]"},
            {"use":"%41 = add nsw i32 %19, %17",
             "value":"%19 = phi i32 [ 2, %11 ], [ %41, %40 ]"}]},
 "old_value":"%17 = phi i32 [ 1, %11 ], [ %42, %40 ]",
 "precursor":"br label %16",
 "successor":"ret void"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  int t1 = in0->_0;
  long t0 = 0;
label1:
  if(t0<(long)t1){
  t0 += 1;
  goto label1;
  }
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION evolve
BEGIN LOOP
BEGIN stencil
{"begin":"%17 = mul i64 %14, %7",
 "body":{"begin":"%28 = add i64 %25, %23",
         "end":"br label %24",
         "precursor":"br i1 %26, label %27, label %42",
         "successor":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"},
 "end":"br label %13",
 "iterator":
 ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
  "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
  "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28",
             "value":"%struct.dcomplex* %4"},
            {"use":"%30 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 0",
             "value":"%struct.dcomplex* %4"},
            {"use":"%35 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 1",
             "value":"%struct.dcomplex* %4"},
            {"use":"%32 = getelementptr double, double* %5, i64 %28",
             "value":"double* %5"},
            {"use":"%38 = getelementptr %struct.dcomplex, %struct.dcomplex* %3, i64 %28",
             "value":"%struct.dcomplex* %3"}],
           "input":
           ["%31 = load double, double* %30, align 8, !tbaa !2",
            "%33 = load double, double* %32, align 8, !tbaa !8",
            "%36 = load double, double* %35, align 8, !tbaa !7"],
           "origin":
           ["br i1 %26, label %27, label %42"],
           "output":"%34 = fmul double %31, %33",
           "restrictions":
           [{"use":"%28 = add i64 %25, %23",
             "value":"%23 = mul i64 %22, %9"},
            {"use":"%28 = add i64 %25, %23",
             "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"},
            {"use":"%41 = add nuw nsw i64 %25, 1",
             "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"}]},
 "loop":
 [{"begin":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
   "body":{"begin":"%17 = mul i64 %14, %7",
           "end":"br label %13",
           "precursor":"br i1 %15, label %16, label %46",
           "successor":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
   "comparison":"%15 = icmp slt i64 %14, %12",
   "end":"br i1 %15, label %16, label %46",
   "increment":"%45 = add nuw nsw i64 %14, 1",
   "iter_begin":"i64 0",
   "iter_end":"%12 = sext i32 %2 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %13",
   "successor":"ret void"},
  {"begin":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
   "body":{"begin":"%22 = add i64 %17, %19",
           "end":"br label %18",
           "precursor":"br i1 %20, label %21, label %44",
           "successor":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
   "comparison":"%20 = icmp slt i64 %19, %11",
   "end":"br i1 %20, label %21, label %44",
   "increment":"%43 = add nuw nsw i64 %19, 1",
   "iter_begin":"i64 0",
   "iter_end":"%11 = sext i32 %1 to i64",
   "iter_step":"i64 1",
   "iterator":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
   "post_sese":{"begin":"%45 = add nuw nsw i64 %14, 1",
                "end":"br label %13",
                "precursor":"br i1 %20, label %21, label %44",
                "successor":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
   "pre_sese":{"begin":"%17 = mul i64 %14, %7",
               "end":"br label %18",
               "precursor":"br i1 %15, label %16, label %46",
               "successor":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
   "precursor":"br label %18",
   "successor":"%45 = add nuw nsw i64 %14, 1"},
  {"begin":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
   "body":{"begin":"%28 = add i64 %25, %23",
           "end":"br label %24",
           "precursor":"br i1 %26, label %27, label %42",
           "successor":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"},
   "comparison":"%26 = icmp slt i64 %25, %10",
   "end":"br i1 %26, label %27, label %42",
   "increment":"%41 = add nuw nsw i64 %25, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %0 to i64",
   "iter_step":"i64 1",
   "iterator":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
   "post_sese":{"begin":"%43 = add nuw nsw i64 %19, 1",
                "end":"br label %18",
                "precursor":"br i1 %26, label %27, label %42",
                "successor":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
   "pre_sese":{"begin":"%22 = add i64 %17, %19",
               "end":"br label %24",
               "precursor":"br i1 %20, label %21, label %44",
               "successor":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"},
   "precursor":"br label %24",
   "successor":"%43 = add nuw nsw i64 %19, 1"}],
 "precursor":"br i1 %15, label %16, label %46",
 "reads":
 [{"address":"%30 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 0",
   "base_pointer":"%struct.dcomplex* %4",
   "index":
   [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
     "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
    {"input":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
     "value":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
    {"input":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
     "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
    "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
    "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
   "read":{"address":"%30 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 0",
           "base_pointer":"%struct.dcomplex* %4",
           "index_add":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
            {"addend":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
             "input":"%17 = mul i64 %14, %7",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
             "input":"%23 = mul i64 %22, %9",
             "value":"%28 = add i64 %25, %23"}],
           "input_index":
           ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
            "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %25, %23",
                         "value":"%28 = add i64 %25, %23"},
           "output_index":"%28 = add i64 %25, %23",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "multiplier":"%7 = zext i32 %1 to i64",
             "value":"%17 = mul i64 %14, %7"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"%9 = zext i32 %8 to i64",
             "value":"%23 = mul i64 %22, %9"},
            {"input":"%28 = add i64 %25, %23",
             "value":"%28 = add i64 %25, %23"}]}},
  {"address":"%32 = getelementptr double, double* %5, i64 %28",
   "base_pointer":"double* %5",
   "index":
   [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
     "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
    {"input":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
     "value":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
    {"input":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
     "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
    "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
    "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
   "read":{"address":"%32 = getelementptr double, double* %5, i64 %28",
           "base_pointer":"double* %5",
           "index_add":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
            {"addend":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
             "input":"%17 = mul i64 %14, %7",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
             "input":"%23 = mul i64 %22, %9",
             "value":"%28 = add i64 %25, %23"}],
           "input_index":
           ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
            "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %25, %23",
                         "value":"%28 = add i64 %25, %23"},
           "output_index":"%28 = add i64 %25, %23",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "multiplier":"%7 = zext i32 %1 to i64",
             "value":"%17 = mul i64 %14, %7"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"%9 = zext i32 %8 to i64",
             "value":"%23 = mul i64 %22, %9"},
            {"input":"%28 = add i64 %25, %23",
             "value":"%28 = add i64 %25, %23"}]}},
  {"address":"%35 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 1",
   "base_pointer":"%struct.dcomplex* %4",
   "index":
   [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
     "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
    {"input":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
     "value":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
    {"input":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
     "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
    "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
    "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
   "read":{"address":"%35 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 1",
           "base_pointer":"%struct.dcomplex* %4",
           "index_add":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
            {"addend":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
             "input":"%17 = mul i64 %14, %7",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
             "input":"%23 = mul i64 %22, %9",
             "value":"%28 = add i64 %25, %23"}],
           "input_index":
           ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
            "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %25, %23",
                         "value":"%28 = add i64 %25, %23"},
           "output_index":"%28 = add i64 %25, %23",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "multiplier":"%7 = zext i32 %1 to i64",
             "value":"%17 = mul i64 %14, %7"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"%9 = zext i32 %8 to i64",
             "value":"%23 = mul i64 %22, %9"},
            {"input":"%28 = add i64 %25, %23",
             "value":"%28 = add i64 %25, %23"}]}}],
 "successor":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
 "write":{"address":"%30 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 0",
          "base_pointer":"%struct.dcomplex* %4",
          "index_add":
          [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
           {"addend":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
            "input":"%17 = mul i64 %14, %7",
            "value":"%22 = add i64 %17, %19"},
           {"addend":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
            "input":"%23 = mul i64 %22, %9",
            "value":"%28 = add i64 %25, %23"}],
          "input_index":
          ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
           "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
           "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
          "offset_add":{"input":"%28 = add i64 %25, %23",
                        "value":"%28 = add i64 %25, %23"},
          "output_index":"%28 = add i64 %25, %23",
          "store":"store double %34, double* %30, align 8",
          "stride_mul":
          [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "multiplier":"%7 = zext i32 %1 to i64",
            "value":"%17 = mul i64 %14, %7"},
           {"input":"%22 = add i64 %17, %19",
            "multiplier":"%9 = zext i32 %8 to i64",
            "value":"%23 = mul i64 %22, %9"},
           {"input":"%28 = add i64 %25, %23",
            "value":"%28 = add i64 %25, %23"}]}}
END stencil
BEGIN stencil
{"begin":"%17 = mul i64 %14, %7",
 "body":{"begin":"%28 = add i64 %25, %23",
         "end":"br label %24",
         "precursor":"br i1 %26, label %27, label %42",
         "successor":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"},
 "end":"br label %13",
 "iterator":
 ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
  "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
  "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28",
             "value":"%struct.dcomplex* %4"},
            {"use":"%30 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 0",
             "value":"%struct.dcomplex* %4"},
            {"use":"%35 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 1",
             "value":"%struct.dcomplex* %4"},
            {"use":"%32 = getelementptr double, double* %5, i64 %28",
             "value":"double* %5"},
            {"use":"%38 = getelementptr %struct.dcomplex, %struct.dcomplex* %3, i64 %28",
             "value":"%struct.dcomplex* %3"}],
           "input":
           ["%31 = load double, double* %30, align 8, !tbaa !2",
            "%33 = load double, double* %32, align 8, !tbaa !8",
            "%36 = load double, double* %35, align 8, !tbaa !7"],
           "origin":
           ["br i1 %26, label %27, label %42"],
           "output":"%37 = fmul double %33, %36",
           "restrictions":
           [{"use":"%28 = add i64 %25, %23",
             "value":"%23 = mul i64 %22, %9"},
            {"use":"%28 = add i64 %25, %23",
             "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"},
            {"use":"%41 = add nuw nsw i64 %25, 1",
             "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"}]},
 "loop":
 [{"begin":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
   "body":{"begin":"%17 = mul i64 %14, %7",
           "end":"br label %13",
           "precursor":"br i1 %15, label %16, label %46",
           "successor":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
   "comparison":"%15 = icmp slt i64 %14, %12",
   "end":"br i1 %15, label %16, label %46",
   "increment":"%45 = add nuw nsw i64 %14, 1",
   "iter_begin":"i64 0",
   "iter_end":"%12 = sext i32 %2 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %13",
   "successor":"ret void"},
  {"begin":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
   "body":{"begin":"%22 = add i64 %17, %19",
           "end":"br label %18",
           "precursor":"br i1 %20, label %21, label %44",
           "successor":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
   "comparison":"%20 = icmp slt i64 %19, %11",
   "end":"br i1 %20, label %21, label %44",
   "increment":"%43 = add nuw nsw i64 %19, 1",
   "iter_begin":"i64 0",
   "iter_end":"%11 = sext i32 %1 to i64",
   "iter_step":"i64 1",
   "iterator":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
   "post_sese":{"begin":"%45 = add nuw nsw i64 %14, 1",
                "end":"br label %13",
                "precursor":"br i1 %20, label %21, label %44",
                "successor":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
   "pre_sese":{"begin":"%17 = mul i64 %14, %7",
               "end":"br label %18",
               "precursor":"br i1 %15, label %16, label %46",
               "successor":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
   "precursor":"br label %18",
   "successor":"%45 = add nuw nsw i64 %14, 1"},
  {"begin":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
   "body":{"begin":"%28 = add i64 %25, %23",
           "end":"br label %24",
           "precursor":"br i1 %26, label %27, label %42",
           "successor":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"},
   "comparison":"%26 = icmp slt i64 %25, %10",
   "end":"br i1 %26, label %27, label %42",
   "increment":"%41 = add nuw nsw i64 %25, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %0 to i64",
   "iter_step":"i64 1",
   "iterator":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
   "post_sese":{"begin":"%43 = add nuw nsw i64 %19, 1",
                "end":"br label %18",
                "precursor":"br i1 %26, label %27, label %42",
                "successor":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
   "pre_sese":{"begin":"%22 = add i64 %17, %19",
               "end":"br label %24",
               "precursor":"br i1 %20, label %21, label %44",
               "successor":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"},
   "precursor":"br label %24",
   "successor":"%43 = add nuw nsw i64 %19, 1"}],
 "precursor":"br i1 %15, label %16, label %46",
 "reads":
 [{"address":"%30 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 0",
   "base_pointer":"%struct.dcomplex* %4",
   "index":
   [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
     "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
    {"input":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
     "value":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
    {"input":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
     "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
    "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
    "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
   "read":{"address":"%30 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 0",
           "base_pointer":"%struct.dcomplex* %4",
           "index_add":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
            {"addend":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
             "input":"%17 = mul i64 %14, %7",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
             "input":"%23 = mul i64 %22, %9",
             "value":"%28 = add i64 %25, %23"}],
           "input_index":
           ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
            "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %25, %23",
                         "value":"%28 = add i64 %25, %23"},
           "output_index":"%28 = add i64 %25, %23",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "multiplier":"%7 = zext i32 %1 to i64",
             "value":"%17 = mul i64 %14, %7"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"%9 = zext i32 %8 to i64",
             "value":"%23 = mul i64 %22, %9"},
            {"input":"%28 = add i64 %25, %23",
             "value":"%28 = add i64 %25, %23"}]}},
  {"address":"%32 = getelementptr double, double* %5, i64 %28",
   "base_pointer":"double* %5",
   "index":
   [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
     "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
    {"input":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
     "value":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
    {"input":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
     "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
    "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
    "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
   "read":{"address":"%32 = getelementptr double, double* %5, i64 %28",
           "base_pointer":"double* %5",
           "index_add":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
            {"addend":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
             "input":"%17 = mul i64 %14, %7",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
             "input":"%23 = mul i64 %22, %9",
             "value":"%28 = add i64 %25, %23"}],
           "input_index":
           ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
            "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %25, %23",
                         "value":"%28 = add i64 %25, %23"},
           "output_index":"%28 = add i64 %25, %23",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "multiplier":"%7 = zext i32 %1 to i64",
             "value":"%17 = mul i64 %14, %7"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"%9 = zext i32 %8 to i64",
             "value":"%23 = mul i64 %22, %9"},
            {"input":"%28 = add i64 %25, %23",
             "value":"%28 = add i64 %25, %23"}]}},
  {"address":"%35 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 1",
   "base_pointer":"%struct.dcomplex* %4",
   "index":
   [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
     "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
    {"input":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
     "value":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]"},
    {"input":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
     "value":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
    "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
    "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
   "read":{"address":"%35 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 1",
           "base_pointer":"%struct.dcomplex* %4",
           "index_add":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
            {"addend":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
             "input":"%17 = mul i64 %14, %7",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
             "input":"%23 = mul i64 %22, %9",
             "value":"%28 = add i64 %25, %23"}],
           "input_index":
           ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
            "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %25, %23",
                         "value":"%28 = add i64 %25, %23"},
           "output_index":"%28 = add i64 %25, %23",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
             "multiplier":"%7 = zext i32 %1 to i64",
             "value":"%17 = mul i64 %14, %7"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"%9 = zext i32 %8 to i64",
             "value":"%23 = mul i64 %22, %9"},
            {"input":"%28 = add i64 %25, %23",
             "value":"%28 = add i64 %25, %23"}]}}],
 "successor":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
 "write":{"address":"%35 = getelementptr %struct.dcomplex, %struct.dcomplex* %4, i64 %28, i32 1",
          "base_pointer":"%struct.dcomplex* %4",
          "index_add":
          [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "value":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]"},
           {"addend":"%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
            "input":"%17 = mul i64 %14, %7",
            "value":"%22 = add i64 %17, %19"},
           {"addend":"%25 = phi i64 [ %41, %27 ], [ 0, %21 ]",
            "input":"%23 = mul i64 %22, %9",
            "value":"%28 = add i64 %25, %23"}],
          "input_index":
          ["%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
           "%19 = phi i64 [ %43, %42 ], [ 0, %16 ]",
           "%25 = phi i64 [ %41, %27 ], [ 0, %21 ]"],
          "offset_add":{"input":"%28 = add i64 %25, %23",
                        "value":"%28 = add i64 %25, %23"},
          "output_index":"%28 = add i64 %25, %23",
          "store":"store double %37, double* %35, align 8",
          "stride_mul":
          [{"input":"%14 = phi i64 [ %45, %44 ], [ 0, %6 ]",
            "multiplier":"%7 = zext i32 %1 to i64",
            "value":"%17 = mul i64 %14, %7"},
           {"input":"%22 = add i64 %17, %19",
            "multiplier":"%9 = zext i32 %8 to i64",
            "value":"%23 = mul i64 %22, %9"},
           {"input":"%28 = add i64 %25, %23",
            "value":"%28 = add i64 %25, %23"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

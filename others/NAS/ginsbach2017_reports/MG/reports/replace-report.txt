BEGIN FUNCTION TRANSFORMATION main
BEGIN LOOP
BEGIN scalar
{"begin":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]",
 "body":{"begin":"%203 = add i64 %199, %197",
         "end":"br label %198",
         "precursor":"br i1 %201, label %202, label %209",
         "successor":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]"},
 "comparison":"%201 = icmp slt i64 %199, %182",
 "end":"br i1 %201, label %202, label %209",
 "increment":"%208 = add nuw nsw i64 %199, 1",
 "iter_begin":"i64 1",
 "iter_end":"%182 = sext i32 %181 to i64",
 "iter_step":"i64 1",
 "iterator":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]",
 "kernel":{"constants":
           [{"use":"%204 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %203",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)"},
            {"use":"%203 = add i64 %199, %197",
             "value":"%197 = mul i64 %196, %134"}],
           "input":
           ["%205 = load double, double* %204, align 8, !tbaa !9",
            "%205 = load double, double* %204, align 8, !tbaa !9",
            "%200 = phi double [ %207, %202 ], [ %193, %195 ]"],
           "origin":
           ["br i1 %201, label %202, label %209"],
           "output":"%207 = fadd double %200, %206",
           "restrictions":
           [{"use":"%203 = add i64 %199, %197",
             "value":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]"},
            {"use":"%208 = add nuw nsw i64 %199, 1",
             "value":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]"},
            {"use":"%207 = fadd double %200, %206",
             "value":"%200 = phi double [ %207, %202 ], [ %193, %195 ]"}]},
 "old_value":"%200 = phi double [ %207, %202 ], [ %193, %195 ]",
 "precursor":"br label %198",
 "read":
 [{"address":"%204 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %203",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)",
   "index_add":
   [{"input":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]",
     "value":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]"}],
   "input_index":
   ["%199 = phi i64 [ %208, %202 ], [ 1, %195 ]"],
   "offset_add":{"addend":"%197 = mul i64 %196, %134",
                 "input":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]",
                 "value":"%203 = add i64 %199, %197"},
   "output_index":"%203 = add i64 %199, %197",
   "stride_mul":
   [{"input":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]",
     "value":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]"}]},
  {"address":"%204 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %203",
   "base_index":"%197 = mul i64 %196, %134",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)",
   "index_add":
   [{"addend":"%197 = mul i64 %196, %134",
     "input":"%199 = phi i64 [ %208, %202 ], [ 1, %195 ]",
     "value":"%203 = add i64 %199, %197"}],
   "input_index":
   ["%199 = phi i64 [ %208, %202 ], [ 1, %195 ]"],
   "offset_add":{"input":"%203 = add i64 %199, %197",
                 "value":"%203 = add i64 %199, %197"},
   "output_index":"%203 = add i64 %199, %197",
   "stride_mul":
   [{"input":"%203 = add i64 %199, %197",
     "value":"%203 = add i64 %199, %197"}]}],
 "read_value":
 ["%205 = load double, double* %204, align 8, !tbaa !9",
  "%205 = load double, double* %204, align 8, !tbaa !9"],
 "successor":"%210 = add nuw nsw i64 %192, 1"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1)
{
  in0->_0 += in1*in1;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]",
 "body":{"begin":"%270 = add i64 %266, %264",
         "end":"br label %265",
         "precursor":"br i1 %268, label %269, label %276",
         "successor":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]"},
 "comparison":"%268 = icmp slt i64 %266, %182",
 "end":"br i1 %268, label %269, label %276",
 "increment":"%275 = add nuw nsw i64 %266, 1",
 "iter_begin":"i64 1",
 "iter_end":"%182 = sext i32 %181 to i64",
 "iter_step":"i64 1",
 "iterator":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]",
 "kernel":{"constants":
           [{"use":"%271 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0), i64 %270",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0)"},
            {"use":"%270 = add i64 %266, %264",
             "value":"%264 = mul i64 %263, %134"}],
           "input":
           ["%272 = load double, double* %271, align 8, !tbaa !9",
            "%272 = load double, double* %271, align 8, !tbaa !9",
            "%267 = phi double [ %274, %269 ], [ %260, %262 ]"],
           "origin":
           ["br i1 %268, label %269, label %276"],
           "output":"%274 = fadd double %267, %273",
           "restrictions":
           [{"use":"%270 = add i64 %266, %264",
             "value":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]"},
            {"use":"%275 = add nuw nsw i64 %266, 1",
             "value":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]"},
            {"use":"%274 = fadd double %267, %273",
             "value":"%267 = phi double [ %274, %269 ], [ %260, %262 ]"}]},
 "old_value":"%267 = phi double [ %274, %269 ], [ %260, %262 ]",
 "precursor":"br label %265",
 "read":
 [{"address":"%271 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0), i64 %270",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0)",
   "index_add":
   [{"input":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]",
     "value":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]"}],
   "input_index":
   ["%266 = phi i64 [ %275, %269 ], [ 1, %262 ]"],
   "offset_add":{"addend":"%264 = mul i64 %263, %134",
                 "input":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]",
                 "value":"%270 = add i64 %266, %264"},
   "output_index":"%270 = add i64 %266, %264",
   "stride_mul":
   [{"input":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]",
     "value":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]"}]},
  {"address":"%271 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0), i64 %270",
   "base_index":"%264 = mul i64 %263, %134",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0)",
   "index_add":
   [{"addend":"%264 = mul i64 %263, %134",
     "input":"%266 = phi i64 [ %275, %269 ], [ 1, %262 ]",
     "value":"%270 = add i64 %266, %264"}],
   "input_index":
   ["%266 = phi i64 [ %275, %269 ], [ 1, %262 ]"],
   "offset_add":{"input":"%270 = add i64 %266, %264",
                 "value":"%270 = add i64 %266, %264"},
   "output_index":"%270 = add i64 %266, %264",
   "stride_mul":
   [{"input":"%270 = add i64 %266, %264",
     "value":"%270 = add i64 %266, %264"}]}],
 "read_value":
 ["%272 = load double, double* %271, align 8, !tbaa !9",
  "%272 = load double, double* %271, align 8, !tbaa !9"],
 "successor":"%277 = add nuw nsw i64 %259, 1"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1)
{
  in0->_0 += in1*in1;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]",
 "body":{"begin":"%381 = add i64 %377, %375",
         "end":"br label %376",
         "precursor":"br i1 %379, label %380, label %387",
         "successor":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]"},
 "comparison":"%379 = icmp slt i64 %377, %360",
 "end":"br i1 %379, label %380, label %387",
 "increment":"%386 = add nuw nsw i64 %377, 1",
 "iter_begin":"i64 1",
 "iter_end":"%360 = sext i32 %359 to i64",
 "iter_step":"i64 1",
 "iterator":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]",
 "kernel":{"constants":
           [{"use":"%382 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0), i64 %381",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0)"},
            {"use":"%381 = add i64 %377, %375",
             "value":"%375 = mul i64 %374, %297"}],
           "input":
           ["%383 = load double, double* %382, align 8, !tbaa !9",
            "%383 = load double, double* %382, align 8, !tbaa !9",
            "%378 = phi double [ %385, %380 ], [ %371, %373 ]"],
           "origin":
           ["br i1 %379, label %380, label %387"],
           "output":"%385 = fadd double %378, %384",
           "restrictions":
           [{"use":"%381 = add i64 %377, %375",
             "value":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]"},
            {"use":"%386 = add nuw nsw i64 %377, 1",
             "value":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]"},
            {"use":"%385 = fadd double %378, %384",
             "value":"%378 = phi double [ %385, %380 ], [ %371, %373 ]"}]},
 "old_value":"%378 = phi double [ %385, %380 ], [ %371, %373 ]",
 "precursor":"br label %376",
 "read":
 [{"address":"%382 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0), i64 %381",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0)",
   "index_add":
   [{"input":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]",
     "value":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]"}],
   "input_index":
   ["%377 = phi i64 [ %386, %380 ], [ 1, %373 ]"],
   "offset_add":{"addend":"%375 = mul i64 %374, %297",
                 "input":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]",
                 "value":"%381 = add i64 %377, %375"},
   "output_index":"%381 = add i64 %377, %375",
   "stride_mul":
   [{"input":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]",
     "value":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]"}]},
  {"address":"%382 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0), i64 %381",
   "base_index":"%375 = mul i64 %374, %297",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0)",
   "index_add":
   [{"addend":"%375 = mul i64 %374, %297",
     "input":"%377 = phi i64 [ %386, %380 ], [ 1, %373 ]",
     "value":"%381 = add i64 %377, %375"}],
   "input_index":
   ["%377 = phi i64 [ %386, %380 ], [ 1, %373 ]"],
   "offset_add":{"input":"%381 = add i64 %377, %375",
                 "value":"%381 = add i64 %377, %375"},
   "output_index":"%381 = add i64 %377, %375",
   "stride_mul":
   [{"input":"%381 = add i64 %377, %375",
     "value":"%381 = add i64 %377, %375"}]}],
 "read_value":
 ["%383 = load double, double* %382, align 8, !tbaa !9",
  "%383 = load double, double* %382, align 8, !tbaa !9"],
 "successor":"%388 = add nuw nsw i64 %370, 1"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1)
{
  in0->_0 += in1*in1;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]",
 "body":{"begin":"%460 = add i64 %456, %454",
         "end":"br label %455",
         "precursor":"br i1 %458, label %459, label %466",
         "successor":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]"},
 "comparison":"%458 = icmp slt i64 %456, %360",
 "end":"br i1 %458, label %459, label %466",
 "increment":"%465 = add nuw nsw i64 %456, 1",
 "iter_begin":"i64 1",
 "iter_end":"%360 = sext i32 %359 to i64",
 "iter_step":"i64 1",
 "iterator":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]",
 "kernel":{"constants":
           [{"use":"%461 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0), i64 %460",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0)"},
            {"use":"%460 = add i64 %456, %454",
             "value":"%454 = mul i64 %453, %297"}],
           "input":
           ["%462 = load double, double* %461, align 8, !tbaa !9",
            "%462 = load double, double* %461, align 8, !tbaa !9",
            "%457 = phi double [ %464, %459 ], [ %450, %452 ]"],
           "origin":
           ["br i1 %458, label %459, label %466"],
           "output":"%464 = fadd double %457, %463",
           "restrictions":
           [{"use":"%460 = add i64 %456, %454",
             "value":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]"},
            {"use":"%465 = add nuw nsw i64 %456, 1",
             "value":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]"},
            {"use":"%464 = fadd double %457, %463",
             "value":"%457 = phi double [ %464, %459 ], [ %450, %452 ]"}]},
 "old_value":"%457 = phi double [ %464, %459 ], [ %450, %452 ]",
 "precursor":"br label %455",
 "read":
 [{"address":"%461 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0), i64 %460",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0)",
   "index_add":
   [{"input":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]",
     "value":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]"}],
   "input_index":
   ["%456 = phi i64 [ %465, %459 ], [ 1, %452 ]"],
   "offset_add":{"addend":"%454 = mul i64 %453, %297",
                 "input":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]",
                 "value":"%460 = add i64 %456, %454"},
   "output_index":"%460 = add i64 %456, %454",
   "stride_mul":
   [{"input":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]",
     "value":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]"}]},
  {"address":"%461 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0), i64 %460",
   "base_index":"%454 = mul i64 %453, %297",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @r, i64 0, i64 0)",
   "index_add":
   [{"addend":"%454 = mul i64 %453, %297",
     "input":"%456 = phi i64 [ %465, %459 ], [ 1, %452 ]",
     "value":"%460 = add i64 %456, %454"}],
   "input_index":
   ["%456 = phi i64 [ %465, %459 ], [ 1, %452 ]"],
   "offset_add":{"input":"%460 = add i64 %456, %454",
                 "value":"%460 = add i64 %456, %454"},
   "output_index":"%460 = add i64 %456, %454",
   "stride_mul":
   [{"input":"%460 = add i64 %456, %454",
     "value":"%460 = add i64 %456, %454"}]}],
 "read_value":
 ["%462 = load double, double* %461, align 8, !tbaa !9",
  "%462 = load double, double* %461, align 8, !tbaa !9"],
 "successor":"%467 = add nuw nsw i64 %449, 1"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1)
{
  in0->_0 += in1*in1;
}
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%142 = mul i64 %139, %133",
 "body":{"begin":"%153 = add i64 %150, %148",
         "end":"br label %149",
         "precursor":"br i1 %151, label %152, label %156",
         "successor":"%150 = phi i64 [ %155, %152 ], [ 0, %146 ]"},
 "end":"br label %138",
 "iterator":
 ["%139 = phi i64 [ %159, %158 ], [ 0, %116 ]",
  "%144 = phi i64 [ %157, %156 ], [ 0, %141 ]",
  "%150 = phi i64 [ %155, %152 ], [ 0, %146 ]"],
 "kernel":{"constants":
           [{"use":"%154 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0), i64 %153",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0)"}],
           "origin":
           ["br i1 %151, label %152, label %156"],
           "output":"double 0.000000e+00",
           "restrictions":
           [{"use":"%153 = add i64 %150, %148",
             "value":"%148 = mul i64 %147, %134"},
            {"use":"%153 = add i64 %150, %148",
             "value":"%150 = phi i64 [ %155, %152 ], [ 0, %146 ]"},
            {"use":"%155 = add nuw nsw i64 %150, 1",
             "value":"%150 = phi i64 [ %155, %152 ], [ 0, %146 ]"}]},
 "loop":
 [{"begin":"%139 = phi i64 [ %159, %158 ], [ 0, %116 ]",
   "body":{"begin":"%142 = mul i64 %139, %133",
           "end":"br label %138",
           "precursor":"br i1 %140, label %141, label %160",
           "successor":"%139 = phi i64 [ %159, %158 ], [ 0, %116 ]"},
   "comparison":"%140 = icmp slt i64 %139, %137",
   "end":"br i1 %140, label %141, label %160",
   "increment":"%159 = add nuw nsw i64 %139, 1",
   "iter_begin":"i64 0",
   "iter_end":"%137 = sext i32 %132 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %138",
   "successor":"%161 = load i32, i32* @lt, align 4, !tbaa !6"},
  {"begin":"%144 = phi i64 [ %157, %156 ], [ 0, %141 ]",
   "body":{"begin":"%147 = add i64 %142, %144",
           "end":"br label %143",
           "precursor":"br i1 %145, label %146, label %158",
           "successor":"%144 = phi i64 [ %157, %156 ], [ 0, %141 ]"},
   "comparison":"%145 = icmp slt i64 %144, %136",
   "end":"br i1 %145, label %146, label %158",
   "increment":"%157 = add nuw nsw i64 %144, 1",
   "iter_begin":"i64 0",
   "iter_end":"%136 = sext i32 %131 to i64",
   "iter_step":"i64 1",
   "iterator":"%144 = phi i64 [ %157, %156 ], [ 0, %141 ]",
   "post_sese":{"begin":"%159 = add nuw nsw i64 %139, 1",
                "end":"br label %138",
                "precursor":"br i1 %145, label %146, label %158",
                "successor":"%139 = phi i64 [ %159, %158 ], [ 0, %116 ]"},
   "pre_sese":{"begin":"%142 = mul i64 %139, %133",
               "end":"br label %143",
               "precursor":"br i1 %140, label %141, label %160",
               "successor":"%144 = phi i64 [ %157, %156 ], [ 0, %141 ]"},
   "precursor":"br label %143",
   "successor":"%159 = add nuw nsw i64 %139, 1"},
  {"begin":"%150 = phi i64 [ %155, %152 ], [ 0, %146 ]",
   "body":{"begin":"%153 = add i64 %150, %148",
           "end":"br label %149",
           "precursor":"br i1 %151, label %152, label %156",
           "successor":"%150 = phi i64 [ %155, %152 ], [ 0, %146 ]"},
   "comparison":"%151 = icmp slt i64 %150, %135",
   "end":"br i1 %151, label %152, label %156",
   "increment":"%155 = add nuw nsw i64 %150, 1",
   "iter_begin":"i64 0",
   "iter_end":"%135 = sext i32 %130 to i64",
   "iter_step":"i64 1",
   "iterator":"%150 = phi i64 [ %155, %152 ], [ 0, %146 ]",
   "post_sese":{"begin":"%157 = add nuw nsw i64 %144, 1",
                "end":"br label %143",
                "precursor":"br i1 %151, label %152, label %156",
                "successor":"%144 = phi i64 [ %157, %156 ], [ 0, %141 ]"},
   "pre_sese":{"begin":"%147 = add i64 %142, %144",
               "end":"br label %149",
               "precursor":"br i1 %145, label %146, label %158",
               "successor":"%150 = phi i64 [ %155, %152 ], [ 0, %146 ]"},
   "precursor":"br label %149",
   "successor":"%157 = add nuw nsw i64 %144, 1"}],
 "precursor":"br i1 %140, label %141, label %160",
 "successor":"%139 = phi i64 [ %159, %158 ], [ 0, %116 ]",
 "write":{"address":"%154 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0), i64 %153",
          "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0)",
          "index_add":
          [{"input":"%139 = phi i64 [ %159, %158 ], [ 0, %116 ]",
            "value":"%139 = phi i64 [ %159, %158 ], [ 0, %116 ]"},
           {"addend":"%144 = phi i64 [ %157, %156 ], [ 0, %141 ]",
            "input":"%142 = mul i64 %139, %133",
            "value":"%147 = add i64 %142, %144"},
           {"addend":"%150 = phi i64 [ %155, %152 ], [ 0, %146 ]",
            "input":"%148 = mul i64 %147, %134",
            "value":"%153 = add i64 %150, %148"}],
          "input_index":
          ["%139 = phi i64 [ %159, %158 ], [ 0, %116 ]",
           "%144 = phi i64 [ %157, %156 ], [ 0, %141 ]",
           "%150 = phi i64 [ %155, %152 ], [ 0, %146 ]"],
          "offset_add":{"input":"%153 = add i64 %150, %148",
                        "value":"%153 = add i64 %150, %148"},
          "output_index":"%153 = add i64 %150, %148",
          "store":"store double 0.000000e+00, double* %154, align 8, !tbaa !9",
          "stride_mul":
          [{"input":"%139 = phi i64 [ %159, %158 ], [ 0, %116 ]",
            "multiplier":"%133 = zext i32 %131 to i64",
            "value":"%142 = mul i64 %139, %133"},
           {"input":"%147 = add i64 %142, %144",
            "multiplier":"%134 = zext i32 %130 to i64",
            "value":"%148 = mul i64 %147, %134"},
           {"input":"%153 = add i64 %150, %148",
            "value":"%153 = add i64 %150, %148"}]}}
END stencil
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%305 = mul i64 %302, %296",
 "body":{"begin":"%316 = add i64 %313, %311",
         "end":"br label %312",
         "precursor":"br i1 %314, label %315, label %319",
         "successor":"%313 = phi i64 [ %318, %315 ], [ 0, %309 ]"},
 "end":"br label %301",
 "iterator":
 ["%302 = phi i64 [ %322, %321 ], [ 0, %292 ]",
  "%307 = phi i64 [ %320, %319 ], [ 0, %304 ]",
  "%313 = phi i64 [ %318, %315 ], [ 0, %309 ]"],
 "kernel":{"constants":
           [{"use":"%317 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0), i64 %316",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0)"}],
           "origin":
           ["br i1 %314, label %315, label %319"],
           "output":"double 0.000000e+00",
           "restrictions":
           [{"use":"%316 = add i64 %313, %311",
             "value":"%311 = mul i64 %310, %297"},
            {"use":"%316 = add i64 %313, %311",
             "value":"%313 = phi i64 [ %318, %315 ], [ 0, %309 ]"},
            {"use":"%318 = add nuw nsw i64 %313, 1",
             "value":"%313 = phi i64 [ %318, %315 ], [ 0, %309 ]"}]},
 "loop":
 [{"begin":"%302 = phi i64 [ %322, %321 ], [ 0, %292 ]",
   "body":{"begin":"%305 = mul i64 %302, %296",
           "end":"br label %301",
           "precursor":"br i1 %303, label %304, label %323",
           "successor":"%302 = phi i64 [ %322, %321 ], [ 0, %292 ]"},
   "comparison":"%303 = icmp slt i64 %302, %300",
   "end":"br i1 %303, label %304, label %323",
   "increment":"%322 = add nuw nsw i64 %302, 1",
   "iter_begin":"i64 0",
   "iter_end":"%300 = sext i32 %295 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %301",
   "successor":"%324 = load i32, i32* @lt, align 4, !tbaa !6"},
  {"begin":"%307 = phi i64 [ %320, %319 ], [ 0, %304 ]",
   "body":{"begin":"%310 = add i64 %305, %307",
           "end":"br label %306",
           "precursor":"br i1 %308, label %309, label %321",
           "successor":"%307 = phi i64 [ %320, %319 ], [ 0, %304 ]"},
   "comparison":"%308 = icmp slt i64 %307, %299",
   "end":"br i1 %308, label %309, label %321",
   "increment":"%320 = add nuw nsw i64 %307, 1",
   "iter_begin":"i64 0",
   "iter_end":"%299 = sext i32 %294 to i64",
   "iter_step":"i64 1",
   "iterator":"%307 = phi i64 [ %320, %319 ], [ 0, %304 ]",
   "post_sese":{"begin":"%322 = add nuw nsw i64 %302, 1",
                "end":"br label %301",
                "precursor":"br i1 %308, label %309, label %321",
                "successor":"%302 = phi i64 [ %322, %321 ], [ 0, %292 ]"},
   "pre_sese":{"begin":"%305 = mul i64 %302, %296",
               "end":"br label %306",
               "precursor":"br i1 %303, label %304, label %323",
               "successor":"%307 = phi i64 [ %320, %319 ], [ 0, %304 ]"},
   "precursor":"br label %306",
   "successor":"%322 = add nuw nsw i64 %302, 1"},
  {"begin":"%313 = phi i64 [ %318, %315 ], [ 0, %309 ]",
   "body":{"begin":"%316 = add i64 %313, %311",
           "end":"br label %312",
           "precursor":"br i1 %314, label %315, label %319",
           "successor":"%313 = phi i64 [ %318, %315 ], [ 0, %309 ]"},
   "comparison":"%314 = icmp slt i64 %313, %298",
   "end":"br i1 %314, label %315, label %319",
   "increment":"%318 = add nuw nsw i64 %313, 1",
   "iter_begin":"i64 0",
   "iter_end":"%298 = sext i32 %293 to i64",
   "iter_step":"i64 1",
   "iterator":"%313 = phi i64 [ %318, %315 ], [ 0, %309 ]",
   "post_sese":{"begin":"%320 = add nuw nsw i64 %307, 1",
                "end":"br label %306",
                "precursor":"br i1 %314, label %315, label %319",
                "successor":"%307 = phi i64 [ %320, %319 ], [ 0, %304 ]"},
   "pre_sese":{"begin":"%310 = add i64 %305, %307",
               "end":"br label %312",
               "precursor":"br i1 %308, label %309, label %321",
               "successor":"%313 = phi i64 [ %318, %315 ], [ 0, %309 ]"},
   "precursor":"br label %312",
   "successor":"%320 = add nuw nsw i64 %307, 1"}],
 "precursor":"br i1 %303, label %304, label %323",
 "successor":"%302 = phi i64 [ %322, %321 ], [ 0, %292 ]",
 "write":{"address":"%317 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0), i64 %316",
          "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0)",
          "index_add":
          [{"input":"%302 = phi i64 [ %322, %321 ], [ 0, %292 ]",
            "value":"%302 = phi i64 [ %322, %321 ], [ 0, %292 ]"},
           {"addend":"%307 = phi i64 [ %320, %319 ], [ 0, %304 ]",
            "input":"%305 = mul i64 %302, %296",
            "value":"%310 = add i64 %305, %307"},
           {"addend":"%313 = phi i64 [ %318, %315 ], [ 0, %309 ]",
            "input":"%311 = mul i64 %310, %297",
            "value":"%316 = add i64 %313, %311"}],
          "input_index":
          ["%302 = phi i64 [ %322, %321 ], [ 0, %292 ]",
           "%307 = phi i64 [ %320, %319 ], [ 0, %304 ]",
           "%313 = phi i64 [ %318, %315 ], [ 0, %309 ]"],
          "offset_add":{"input":"%316 = add i64 %313, %311",
                        "value":"%316 = add i64 %313, %311"},
          "output_index":"%316 = add i64 %313, %311",
          "store":"store double 0.000000e+00, double* %317, align 8, !tbaa !9",
          "stride_mul":
          [{"input":"%302 = phi i64 [ %322, %321 ], [ 0, %292 ]",
            "multiplier":"%296 = zext i32 %294 to i64",
            "value":"%305 = mul i64 %302, %296"},
           {"input":"%310 = add i64 %305, %307",
            "multiplier":"%297 = zext i32 %293 to i64",
            "value":"%311 = mul i64 %310, %297"},
           {"input":"%316 = add i64 %313, %311",
            "value":"%316 = add i64 %313, %311"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION setup
BEGIN LOOP
BEGIN scalar
{"begin":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
 "body":{"begin":"%125 = add nsw i64 %120, -1",
         "end":"br label %119",
         "precursor":"br i1 %123, label %124, label %135",
         "successor":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"},
 "comparison":"%123 = icmp sgt i64 %120, 1",
 "end":"br i1 %123, label %124, label %135",
 "increment":"%125 = add nsw i64 %120, -1",
 "iter_begin":"%118 = sext i32 %117 to i64",
 "iter_end":"i64 1",
 "iter_step":"i64 -1",
 "iterator":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
 "kernel":{"constants":
           [{"use":"%126 = getelementptr i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m1, i64 0, i64 0), i64 %120",
             "value":"i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m1, i64 0, i64 0)"},
            {"use":"%128 = getelementptr i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m2, i64 0, i64 0), i64 %120",
             "value":"i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m2, i64 0, i64 0)"},
            {"use":"%131 = getelementptr i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m3, i64 0, i64 0), i64 %120",
             "value":"i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m3, i64 0, i64 0)"}],
           "input":
           ["%127 = load i32, i32* %126, align 4, !tbaa !6",
            "%129 = load i32, i32* %128, align 4, !tbaa !6",
            "%132 = load i32, i32* %131, align 4, !tbaa !6",
            "%121 = phi i32 [ %134, %124 ], [ 0, %89 ]"],
           "origin":
           ["br i1 %123, label %124, label %135"],
           "output":"%134 = add nsw i32 %133, %121",
           "restrictions":
           [{"use":"%125 = add nsw i64 %120, -1",
             "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"},
            {"use":"%126 = getelementptr i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m1, i64 0, i64 0), i64 %120",
             "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"},
            {"use":"%128 = getelementptr i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m2, i64 0, i64 0), i64 %120",
             "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"},
            {"use":"%131 = getelementptr i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m3, i64 0, i64 0), i64 %120",
             "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"},
            {"use":"%134 = add nsw i32 %133, %121",
             "value":"%121 = phi i32 [ %134, %124 ], [ 0, %89 ]"}]},
 "old_value":"%121 = phi i32 [ %134, %124 ], [ 0, %89 ]",
 "precursor":"br label %119",
 "read":
 [{"address":"%126 = getelementptr i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m1, i64 0, i64 0), i64 %120",
   "base_pointer":"i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m1, i64 0, i64 0)",
   "index_add":
   [{"input":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
     "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"}],
   "input_index":
   ["%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"],
   "offset_add":{"input":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
                 "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"},
   "output_index":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
   "stride_mul":
   [{"input":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
     "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"}]},
  {"address":"%128 = getelementptr i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m2, i64 0, i64 0), i64 %120",
   "base_pointer":"i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m2, i64 0, i64 0)",
   "index_add":
   [{"input":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
     "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"}],
   "input_index":
   ["%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"],
   "offset_add":{"input":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
                 "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"},
   "output_index":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
   "stride_mul":
   [{"input":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
     "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"}]},
  {"address":"%131 = getelementptr i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m3, i64 0, i64 0), i64 %120",
   "base_pointer":"i32* getelementptr inbounds ([10 x i32], [10 x i32]* @m3, i64 0, i64 0)",
   "index_add":
   [{"input":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
     "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"}],
   "input_index":
   ["%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"],
   "offset_add":{"input":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
                 "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"},
   "output_index":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
   "stride_mul":
   [{"input":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]",
     "value":"%120 = phi i64 [ %125, %124 ], [ %118, %89 ]"}]}],
 "read_value":
 ["%127 = load i32, i32* %126, align 4, !tbaa !6",
  "%129 = load i32, i32* %128, align 4, !tbaa !6",
  "%132 = load i32, i32* %131, align 4, !tbaa !6"],
 "successor":"%136 = load i32, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @debug_vec, i64 0, i64 1), align 4, !tbaa !6"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0, int in1, int in2, int in3)
{
  in0->_0 += in2*in1*in3;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION zran3
BEGIN LOOP
BEGIN histo
{"begin":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
 "body":{"begin":"%205 = add i64 %202, %200",
         "end":"br label %201",
         "precursor":"br i1 %203, label %204, label %263",
         "successor":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
 "comparison":"%203 = icmp slt i64 %202, %185",
 "end":"br i1 %203, label %204, label %263",
 "increment":"%262 = add nuw nsw i64 %202, 1",
 "indexkernel":{"constants":
                [{"use":"%206 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %205",
                  "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)"},
                 {"use":"%219 = getelementptr double, double* %158, i64 %218",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%225 = getelementptr double, double* %158, i64 %224",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%236 = load double, double* %158, align 16, !tbaa !9",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"store double %207, double* %158, align 16, !tbaa !9",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%246 = getelementptr double, double* %158, i64 %245",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%251 = getelementptr double, double* %158, i64 %250",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%226 = getelementptr i32, i32* %159, i64 %218",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"%228 = getelementptr i32, i32* %159, i64 %224",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"store i32 %239, i32* %159, align 16, !tbaa !6",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"%252 = getelementptr i32, i32* %159, i64 %245",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"%254 = getelementptr i32, i32* %159, i64 %250",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"%229 = getelementptr i32, i32* %160, i64 %218",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"%231 = getelementptr i32, i32* %160, i64 %224",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"store i32 %198, i32* %160, align 16, !tbaa !6",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"%255 = getelementptr i32, i32* %160, i64 %245",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"%257 = getelementptr i32, i32* %160, i64 %250",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"%232 = getelementptr i32, i32* %161, i64 %218",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"%234 = getelementptr i32, i32* %161, i64 %224",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"store i32 %192, i32* %161, align 16, !tbaa !6",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"%258 = getelementptr i32, i32* %161, i64 %245",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"%260 = getelementptr i32, i32* %161, i64 %250",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"%208 = load double, double* %181, align 8, !tbaa !9",
                  "value":"%181 = getelementptr double, double* %158, i64 1"},
                 {"use":"store double %207, double* %181, align 8, !tbaa !9",
                  "value":"%181 = getelementptr double, double* %158, i64 1"}],
                "origin":
                ["br i1 %203, label %204, label %263"],
                "output":"%181 = getelementptr double, double* %158, i64 1",
                "restrictions":
                [{"use":"%205 = add i64 %202, %200",
                  "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
                 {"use":"%211 = trunc i64 %202 to i32",
                  "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
                 {"use":"%239 = trunc i64 %202 to i32",
                  "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
                 {"use":"%262 = add nuw nsw i64 %202, 1",
                  "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"}]},
 "iter_begin":"i64 1",
 "iter_end":"%185 = sext i32 %180 to i64",
 "iter_step":"i64 1",
 "iterator":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
 "kernel":{"constants":
           [{"use":"%206 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %205",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)"},
            {"use":"%219 = getelementptr double, double* %158, i64 %218",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%225 = getelementptr double, double* %158, i64 %224",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%236 = load double, double* %158, align 16, !tbaa !9",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"store double %207, double* %158, align 16, !tbaa !9",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%246 = getelementptr double, double* %158, i64 %245",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%251 = getelementptr double, double* %158, i64 %250",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%226 = getelementptr i32, i32* %159, i64 %218",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"%228 = getelementptr i32, i32* %159, i64 %224",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"store i32 %239, i32* %159, align 16, !tbaa !6",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"%252 = getelementptr i32, i32* %159, i64 %245",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"%254 = getelementptr i32, i32* %159, i64 %250",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"%229 = getelementptr i32, i32* %160, i64 %218",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"%231 = getelementptr i32, i32* %160, i64 %224",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"store i32 %198, i32* %160, align 16, !tbaa !6",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"%255 = getelementptr i32, i32* %160, i64 %245",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"%257 = getelementptr i32, i32* %160, i64 %250",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"%232 = getelementptr i32, i32* %161, i64 %218",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"%234 = getelementptr i32, i32* %161, i64 %224",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"store i32 %192, i32* %161, align 16, !tbaa !6",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"%258 = getelementptr i32, i32* %161, i64 %245",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"%260 = getelementptr i32, i32* %161, i64 %250",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"%208 = load double, double* %181, align 8, !tbaa !9",
             "value":"%181 = getelementptr double, double* %158, i64 1"},
            {"use":"store double %207, double* %181, align 8, !tbaa !9",
             "value":"%181 = getelementptr double, double* %158, i64 1"}],
           "input":
           ["%207 = load double, double* %206, align 8, !tbaa !9",
            "%207 = load double, double* %206, align 8, !tbaa !9",
            "%208 = load double, double* %181, align 8, !tbaa !9"],
           "origin":
           ["br i1 %203, label %204, label %263"],
           "output":"%207 = load double, double* %206, align 8, !tbaa !9",
           "restrictions":
           [{"use":"%205 = add i64 %202, %200",
             "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
            {"use":"%211 = trunc i64 %202 to i32",
             "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
            {"use":"%239 = trunc i64 %202 to i32",
             "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
            {"use":"%262 = add nuw nsw i64 %202, 1",
             "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"}]},
 "old_value":"%208 = load double, double* %181, align 8, !tbaa !9",
 "precursor":"br label %201",
 "read":
 [{"address":"%206 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %205",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)",
   "index_add":
   [{"input":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
     "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"}],
   "input_index":
   ["%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"],
   "offset_add":{"addend":"%200 = mul i64 %199, %45",
                 "input":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
                 "value":"%205 = add i64 %202, %200"},
   "output_index":"%205 = add i64 %202, %200",
   "stride_mul":
   [{"input":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
     "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"}]},
  {"address":"%206 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %205",
   "base_index":"%200 = mul i64 %199, %45",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)",
   "index_add":
   [{"addend":"%200 = mul i64 %199, %45",
     "input":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
     "value":"%205 = add i64 %202, %200"}],
   "input_index":
   ["%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"],
   "offset_add":{"input":"%205 = add i64 %202, %200",
                 "value":"%205 = add i64 %202, %200"},
   "output_index":"%205 = add i64 %202, %200",
   "stride_mul":
   [{"input":"%205 = add i64 %202, %200",
     "value":"%205 = add i64 %202, %200"}]}],
 "read_value":
 ["%207 = load double, double* %206, align 8, !tbaa !9",
  "%207 = load double, double* %206, align 8, !tbaa !9"],
 "store_instr":"store double %207, double* %181, align 8, !tbaa !9",
 "store_instr_after":"%211 = trunc i64 %202 to i32",
 "successor":"%264 = add nuw nsw i64 %195, 1"}
END histo
BEGIN histo
{"begin":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
 "body":{"begin":"%205 = add i64 %202, %200",
         "end":"br label %201",
         "precursor":"br i1 %203, label %204, label %263",
         "successor":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
 "comparison":"%203 = icmp slt i64 %202, %185",
 "end":"br i1 %203, label %204, label %263",
 "increment":"%262 = add nuw nsw i64 %202, 1",
 "indexkernel":{"constants":
                [{"use":"%206 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %205",
                  "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)"},
                 {"use":"%219 = getelementptr double, double* %158, i64 %218",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%225 = getelementptr double, double* %158, i64 %224",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%236 = load double, double* %158, align 16, !tbaa !9",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"store double %207, double* %158, align 16, !tbaa !9",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%246 = getelementptr double, double* %158, i64 %245",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%251 = getelementptr double, double* %158, i64 %250",
                  "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
                 {"use":"%226 = getelementptr i32, i32* %159, i64 %218",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"%228 = getelementptr i32, i32* %159, i64 %224",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"store i32 %239, i32* %159, align 16, !tbaa !6",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"%252 = getelementptr i32, i32* %159, i64 %245",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"%254 = getelementptr i32, i32* %159, i64 %250",
                  "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
                 {"use":"%229 = getelementptr i32, i32* %160, i64 %218",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"%231 = getelementptr i32, i32* %160, i64 %224",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"store i32 %198, i32* %160, align 16, !tbaa !6",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"%255 = getelementptr i32, i32* %160, i64 %245",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"%257 = getelementptr i32, i32* %160, i64 %250",
                  "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
                 {"use":"%232 = getelementptr i32, i32* %161, i64 %218",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"%234 = getelementptr i32, i32* %161, i64 %224",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"store i32 %192, i32* %161, align 16, !tbaa !6",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"%258 = getelementptr i32, i32* %161, i64 %245",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"%260 = getelementptr i32, i32* %161, i64 %250",
                  "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
                 {"use":"%208 = load double, double* %181, align 8, !tbaa !9",
                  "value":"%181 = getelementptr double, double* %158, i64 1"},
                 {"use":"store double %207, double* %181, align 8, !tbaa !9",
                  "value":"%181 = getelementptr double, double* %158, i64 1"}],
                "origin":
                ["br i1 %203, label %204, label %263"],
                "output":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0",
                "restrictions":
                [{"use":"%205 = add i64 %202, %200",
                  "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
                 {"use":"%211 = trunc i64 %202 to i32",
                  "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
                 {"use":"%239 = trunc i64 %202 to i32",
                  "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
                 {"use":"%262 = add nuw nsw i64 %202, 1",
                  "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"}]},
 "iter_begin":"i64 1",
 "iter_end":"%185 = sext i32 %180 to i64",
 "iter_step":"i64 1",
 "iterator":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
 "kernel":{"constants":
           [{"use":"%206 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %205",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)"},
            {"use":"%219 = getelementptr double, double* %158, i64 %218",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%225 = getelementptr double, double* %158, i64 %224",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%236 = load double, double* %158, align 16, !tbaa !9",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"store double %207, double* %158, align 16, !tbaa !9",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%246 = getelementptr double, double* %158, i64 %245",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%251 = getelementptr double, double* %158, i64 %250",
             "value":"%158 = getelementptr [10 x [2 x double]], [10 x [2 x double]]* %15, i64 0, i64 0, i64 0"},
            {"use":"%226 = getelementptr i32, i32* %159, i64 %218",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"%228 = getelementptr i32, i32* %159, i64 %224",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"store i32 %239, i32* %159, align 16, !tbaa !6",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"%252 = getelementptr i32, i32* %159, i64 %245",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"%254 = getelementptr i32, i32* %159, i64 %250",
             "value":"%159 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %16, i64 0, i64 0, i64 0"},
            {"use":"%229 = getelementptr i32, i32* %160, i64 %218",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"%231 = getelementptr i32, i32* %160, i64 %224",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"store i32 %198, i32* %160, align 16, !tbaa !6",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"%255 = getelementptr i32, i32* %160, i64 %245",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"%257 = getelementptr i32, i32* %160, i64 %250",
             "value":"%160 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %17, i64 0, i64 0, i64 0"},
            {"use":"%232 = getelementptr i32, i32* %161, i64 %218",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"%234 = getelementptr i32, i32* %161, i64 %224",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"store i32 %192, i32* %161, align 16, !tbaa !6",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"%258 = getelementptr i32, i32* %161, i64 %245",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"%260 = getelementptr i32, i32* %161, i64 %250",
             "value":"%161 = getelementptr [10 x [2 x i32]], [10 x [2 x i32]]* %18, i64 0, i64 0, i64 0"},
            {"use":"%208 = load double, double* %181, align 8, !tbaa !9",
             "value":"%181 = getelementptr double, double* %158, i64 1"},
            {"use":"store double %207, double* %181, align 8, !tbaa !9",
             "value":"%181 = getelementptr double, double* %158, i64 1"}],
           "input":
           ["%207 = load double, double* %206, align 8, !tbaa !9",
            "%207 = load double, double* %206, align 8, !tbaa !9",
            "%236 = load double, double* %158, align 16, !tbaa !9"],
           "origin":
           ["br i1 %203, label %204, label %263"],
           "output":"%207 = load double, double* %206, align 8, !tbaa !9",
           "restrictions":
           [{"use":"%205 = add i64 %202, %200",
             "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
            {"use":"%211 = trunc i64 %202 to i32",
             "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
            {"use":"%239 = trunc i64 %202 to i32",
             "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"},
            {"use":"%262 = add nuw nsw i64 %202, 1",
             "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"}]},
 "old_value":"%236 = load double, double* %158, align 16, !tbaa !9",
 "precursor":"br label %201",
 "read":
 [{"address":"%206 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %205",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)",
   "index_add":
   [{"input":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
     "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"}],
   "input_index":
   ["%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"],
   "offset_add":{"addend":"%200 = mul i64 %199, %45",
                 "input":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
                 "value":"%205 = add i64 %202, %200"},
   "output_index":"%205 = add i64 %202, %200",
   "stride_mul":
   [{"input":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
     "value":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"}]},
  {"address":"%206 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %205",
   "base_index":"%200 = mul i64 %199, %45",
   "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)",
   "index_add":
   [{"addend":"%200 = mul i64 %199, %45",
     "input":"%202 = phi i64 [ %262, %261 ], [ 1, %197 ]",
     "value":"%205 = add i64 %202, %200"}],
   "input_index":
   ["%202 = phi i64 [ %262, %261 ], [ 1, %197 ]"],
   "offset_add":{"input":"%205 = add i64 %202, %200",
                 "value":"%205 = add i64 %202, %200"},
   "output_index":"%205 = add i64 %202, %200",
   "stride_mul":
   [{"input":"%205 = add i64 %202, %200",
     "value":"%205 = add i64 %202, %200"}]}],
 "read_value":
 ["%207 = load double, double* %206, align 8, !tbaa !9",
  "%207 = load double, double* %206, align 8, !tbaa !9"],
 "store_instr":"store double %207, double* %158, align 16, !tbaa !9",
 "store_instr_after":"%239 = trunc i64 %202 to i32",
 "successor":"%264 = add nuw nsw i64 %195, 1"}
END histo
BEGIN OPERATOR
void op(struct { double* _0; double* _1; }* in0, double in1)
{
  long t0;
  long t1;
  if(!(in1>*/* missing closure */)) goto label5;
  */* missing closure */ = in1;
  t0 = 0;
label2:
  if(/* missing closure */){
  long t2 = t0+1;
  if(!(in1>/* missing closure */[t2*2+1])) goto label5;
  t0 = t2;
  goto label2;
  }
label5:
  if(!(in1<*/* missing closure */)) goto label10;
  */* missing closure */ = in1;
  t1 = 0;
label7:
  if(/* missing closure */){
  long t3 = t1+1;
  if(!(in1</* missing closure */[t3*2])) goto label10;
  t1 = t3;
  goto label7;
  }
label10:
}
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%72 = mul i64 %69, %20",
 "body":{"begin":"%83 = add i64 %80, %78",
         "end":"br label %79",
         "precursor":"br i1 %81, label %82, label %86",
         "successor":"%80 = phi i64 [ %85, %82 ], [ 0, %76 ]"},
 "end":"br label %68",
 "iterator":
 ["%69 = phi i64 [ %89, %88 ], [ 0, %63 ]",
  "%74 = phi i64 [ %87, %86 ], [ 0, %71 ]",
  "%80 = phi i64 [ %85, %82 ], [ 0, %76 ]"],
 "kernel":{"constants":
           [{"use":"%84 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %83",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)"}],
           "origin":
           ["br i1 %81, label %82, label %86"],
           "output":"double 0.000000e+00",
           "restrictions":
           [{"use":"%83 = add i64 %80, %78",
             "value":"%78 = mul i64 %77, %45"},
            {"use":"%83 = add i64 %80, %78",
             "value":"%80 = phi i64 [ %85, %82 ], [ 0, %76 ]"},
            {"use":"%85 = add nuw nsw i64 %80, 1",
             "value":"%80 = phi i64 [ %85, %82 ], [ 0, %76 ]"}]},
 "loop":
 [{"begin":"%69 = phi i64 [ %89, %88 ], [ 0, %63 ]",
   "body":{"begin":"%72 = mul i64 %69, %20",
           "end":"br label %68",
           "precursor":"br i1 %70, label %71, label %90",
           "successor":"%69 = phi i64 [ %89, %88 ], [ 0, %63 ]"},
   "comparison":"%70 = icmp slt i64 %69, %67",
   "end":"br i1 %70, label %71, label %90",
   "increment":"%89 = add nuw nsw i64 %69, 1",
   "iter_begin":"i64 0",
   "iter_end":"%67 = sext i32 %2 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %68",
   "successor":"%91 = load i1, i1* @is1, align 4"},
  {"begin":"%74 = phi i64 [ %87, %86 ], [ 0, %71 ]",
   "body":{"begin":"%77 = add i64 %72, %74",
           "end":"br label %73",
           "precursor":"br i1 %75, label %76, label %88",
           "successor":"%74 = phi i64 [ %87, %86 ], [ 0, %71 ]"},
   "comparison":"%75 = icmp slt i64 %74, %66",
   "end":"br i1 %75, label %76, label %88",
   "increment":"%87 = add nuw nsw i64 %74, 1",
   "iter_begin":"i64 0",
   "iter_end":"%66 = sext i32 %1 to i64",
   "iter_step":"i64 1",
   "iterator":"%74 = phi i64 [ %87, %86 ], [ 0, %71 ]",
   "post_sese":{"begin":"%89 = add nuw nsw i64 %69, 1",
                "end":"br label %68",
                "precursor":"br i1 %75, label %76, label %88",
                "successor":"%69 = phi i64 [ %89, %88 ], [ 0, %63 ]"},
   "pre_sese":{"begin":"%72 = mul i64 %69, %20",
               "end":"br label %73",
               "precursor":"br i1 %70, label %71, label %90",
               "successor":"%74 = phi i64 [ %87, %86 ], [ 0, %71 ]"},
   "precursor":"br label %73",
   "successor":"%89 = add nuw nsw i64 %69, 1"},
  {"begin":"%80 = phi i64 [ %85, %82 ], [ 0, %76 ]",
   "body":{"begin":"%83 = add i64 %80, %78",
           "end":"br label %79",
           "precursor":"br i1 %81, label %82, label %86",
           "successor":"%80 = phi i64 [ %85, %82 ], [ 0, %76 ]"},
   "comparison":"%81 = icmp slt i64 %80, %65",
   "end":"br i1 %81, label %82, label %86",
   "increment":"%85 = add nuw nsw i64 %80, 1",
   "iter_begin":"i64 0",
   "iter_end":"%65 = sext i32 %0 to i64",
   "iter_step":"i64 1",
   "iterator":"%80 = phi i64 [ %85, %82 ], [ 0, %76 ]",
   "post_sese":{"begin":"%87 = add nuw nsw i64 %74, 1",
                "end":"br label %73",
                "precursor":"br i1 %81, label %82, label %86",
                "successor":"%74 = phi i64 [ %87, %86 ], [ 0, %71 ]"},
   "pre_sese":{"begin":"%77 = add i64 %72, %74",
               "end":"br label %79",
               "precursor":"br i1 %75, label %76, label %88",
               "successor":"%80 = phi i64 [ %85, %82 ], [ 0, %76 ]"},
   "precursor":"br label %79",
   "successor":"%87 = add nuw nsw i64 %74, 1"}],
 "precursor":"br i1 %70, label %71, label %90",
 "successor":"%69 = phi i64 [ %89, %88 ], [ 0, %63 ]",
 "write":{"address":"%84 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %83",
          "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)",
          "index_add":
          [{"input":"%69 = phi i64 [ %89, %88 ], [ 0, %63 ]",
            "value":"%69 = phi i64 [ %89, %88 ], [ 0, %63 ]"},
           {"addend":"%74 = phi i64 [ %87, %86 ], [ 0, %71 ]",
            "input":"%72 = mul i64 %69, %20",
            "value":"%77 = add i64 %72, %74"},
           {"addend":"%80 = phi i64 [ %85, %82 ], [ 0, %76 ]",
            "input":"%78 = mul i64 %77, %45",
            "value":"%83 = add i64 %80, %78"}],
          "input_index":
          ["%69 = phi i64 [ %89, %88 ], [ 0, %63 ]",
           "%74 = phi i64 [ %87, %86 ], [ 0, %71 ]",
           "%80 = phi i64 [ %85, %82 ], [ 0, %76 ]"],
          "offset_add":{"input":"%83 = add i64 %80, %78",
                        "value":"%83 = add i64 %80, %78"},
          "output_index":"%83 = add i64 %80, %78",
          "store":"store double 0.000000e+00, double* %84, align 8, !tbaa !9",
          "stride_mul":
          [{"input":"%69 = phi i64 [ %89, %88 ], [ 0, %63 ]",
            "multiplier":"%20 = zext i32 %1 to i64",
            "value":"%72 = mul i64 %69, %20"},
           {"input":"%77 = add i64 %72, %74",
            "multiplier":"%45 = zext i32 %0 to i64",
            "value":"%78 = mul i64 %77, %45"},
           {"input":"%83 = add i64 %80, %78",
            "value":"%83 = add i64 %80, %78"}]}}
END stencil
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%348 = mul i64 %345, %20",
 "body":{"begin":"%359 = add i64 %356, %354",
         "end":"br label %355",
         "precursor":"br i1 %357, label %358, label %362",
         "successor":"%356 = phi i64 [ %361, %358 ], [ 0, %352 ]"},
 "end":"br label %344",
 "iterator":
 ["%345 = phi i64 [ %365, %364 ], [ 0, %275 ]",
  "%350 = phi i64 [ %363, %362 ], [ 0, %347 ]",
  "%356 = phi i64 [ %361, %358 ], [ 0, %352 ]"],
 "kernel":{"constants":
           [{"use":"%360 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %359",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)"}],
           "origin":
           ["br i1 %357, label %358, label %362"],
           "output":"double 0.000000e+00",
           "restrictions":
           [{"use":"%359 = add i64 %356, %354",
             "value":"%354 = mul i64 %353, %45"},
            {"use":"%359 = add i64 %356, %354",
             "value":"%356 = phi i64 [ %361, %358 ], [ 0, %352 ]"},
            {"use":"%361 = add nuw nsw i64 %356, 1",
             "value":"%356 = phi i64 [ %361, %358 ], [ 0, %352 ]"}]},
 "loop":
 [{"begin":"%345 = phi i64 [ %365, %364 ], [ 0, %275 ]",
   "body":{"begin":"%348 = mul i64 %345, %20",
           "end":"br label %344",
           "precursor":"br i1 %346, label %347, label %366",
           "successor":"%345 = phi i64 [ %365, %364 ], [ 0, %275 ]"},
   "comparison":"%346 = icmp slt i64 %345, %67",
   "end":"br i1 %346, label %347, label %366",
   "increment":"%365 = add nuw nsw i64 %345, 1",
   "iter_begin":"i64 0",
   "iter_end":"%67 = sext i32 %2 to i64",
   "iter_step":"i64 1",
   "precursor":"br i1 %279, label %280, label %344",
   "successor":"%367 = phi i64 [ %390, %369 ], [ 9, %344 ]"},
  {"begin":"%350 = phi i64 [ %363, %362 ], [ 0, %347 ]",
   "body":{"begin":"%353 = add i64 %348, %350",
           "end":"br label %349",
           "precursor":"br i1 %351, label %352, label %364",
           "successor":"%350 = phi i64 [ %363, %362 ], [ 0, %347 ]"},
   "comparison":"%351 = icmp slt i64 %350, %66",
   "end":"br i1 %351, label %352, label %364",
   "increment":"%363 = add nuw nsw i64 %350, 1",
   "iter_begin":"i64 0",
   "iter_end":"%66 = sext i32 %1 to i64",
   "iter_step":"i64 1",
   "iterator":"%350 = phi i64 [ %363, %362 ], [ 0, %347 ]",
   "post_sese":{"begin":"%365 = add nuw nsw i64 %345, 1",
                "end":"br label %344",
                "precursor":"br i1 %351, label %352, label %364",
                "successor":"%345 = phi i64 [ %365, %364 ], [ 0, %275 ]"},
   "pre_sese":{"begin":"%348 = mul i64 %345, %20",
               "end":"br label %349",
               "precursor":"br i1 %346, label %347, label %366",
               "successor":"%350 = phi i64 [ %363, %362 ], [ 0, %347 ]"},
   "precursor":"br label %349",
   "successor":"%365 = add nuw nsw i64 %345, 1"},
  {"begin":"%356 = phi i64 [ %361, %358 ], [ 0, %352 ]",
   "body":{"begin":"%359 = add i64 %356, %354",
           "end":"br label %355",
           "precursor":"br i1 %357, label %358, label %362",
           "successor":"%356 = phi i64 [ %361, %358 ], [ 0, %352 ]"},
   "comparison":"%357 = icmp slt i64 %356, %65",
   "end":"br i1 %357, label %358, label %362",
   "increment":"%361 = add nuw nsw i64 %356, 1",
   "iter_begin":"i64 0",
   "iter_end":"%65 = sext i32 %0 to i64",
   "iter_step":"i64 1",
   "iterator":"%356 = phi i64 [ %361, %358 ], [ 0, %352 ]",
   "post_sese":{"begin":"%363 = add nuw nsw i64 %350, 1",
                "end":"br label %349",
                "precursor":"br i1 %357, label %358, label %362",
                "successor":"%350 = phi i64 [ %363, %362 ], [ 0, %347 ]"},
   "pre_sese":{"begin":"%353 = add i64 %348, %350",
               "end":"br label %355",
               "precursor":"br i1 %351, label %352, label %364",
               "successor":"%356 = phi i64 [ %361, %358 ], [ 0, %352 ]"},
   "precursor":"br label %355",
   "successor":"%363 = add nuw nsw i64 %350, 1"}],
 "precursor":"br i1 %346, label %347, label %366",
 "successor":"%345 = phi i64 [ %365, %364 ], [ 0, %275 ]",
 "write":{"address":"%360 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0), i64 %359",
          "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @v, i64 0, i64 0)",
          "index_add":
          [{"input":"%345 = phi i64 [ %365, %364 ], [ 0, %275 ]",
            "value":"%345 = phi i64 [ %365, %364 ], [ 0, %275 ]"},
           {"addend":"%350 = phi i64 [ %363, %362 ], [ 0, %347 ]",
            "input":"%348 = mul i64 %345, %20",
            "value":"%353 = add i64 %348, %350"},
           {"addend":"%356 = phi i64 [ %361, %358 ], [ 0, %352 ]",
            "input":"%354 = mul i64 %353, %45",
            "value":"%359 = add i64 %356, %354"}],
          "input_index":
          ["%345 = phi i64 [ %365, %364 ], [ 0, %275 ]",
           "%350 = phi i64 [ %363, %362 ], [ 0, %347 ]",
           "%356 = phi i64 [ %361, %358 ], [ 0, %352 ]"],
          "offset_add":{"input":"%359 = add i64 %356, %354",
                        "value":"%359 = add i64 %356, %354"},
          "output_index":"%359 = add i64 %356, %354",
          "store":"store double 0.000000e+00, double* %360, align 8, !tbaa !9",
          "stride_mul":
          [{"input":"%345 = phi i64 [ %365, %364 ], [ 0, %275 ]",
            "multiplier":"%20 = zext i32 %1 to i64",
            "value":"%348 = mul i64 %345, %20"},
           {"input":"%353 = add i64 %348, %350",
            "multiplier":"%45 = zext i32 %0 to i64",
            "value":"%354 = mul i64 %353, %45"},
           {"input":"%359 = add i64 %356, %354",
            "value":"%359 = add i64 %356, %354"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION resid
BEGIN LOOP
BEGIN stenpls
{"begin":"%36 = add nsw i64 %33, -1",
 "body":{"begin":"%67 = add i64 %64, %48",
         "end":"br label %63",
         "precursor":"br i1 %65, label %66, label %100",
         "successor":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"},
 "compute_expr":{"constants":
                 [{"use":"%68 = getelementptr double, double* %13, i64 %67",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%71 = getelementptr double, double* %13, i64 %70",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%75 = getelementptr double, double* %13, i64 %74",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%79 = getelementptr double, double* %13, i64 %78",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%84 = getelementptr double, double* %13, i64 %83",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%87 = getelementptr double, double* %13, i64 %86",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%91 = getelementptr double, double* %13, i64 %90",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%95 = getelementptr double, double* %13, i64 %94",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%82 = getelementptr double, double* %30, i64 %64",
                   "value":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0"},
                  {"use":"%98 = getelementptr double, double* %31, i64 %64",
                   "value":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0"}],
                 "input":
                 ["%69 = load double, double* %68, align 8, !tbaa !9",
                  "%72 = load double, double* %71, align 8, !tbaa !9",
                  "%76 = load double, double* %75, align 8, !tbaa !9",
                  "%76 = load double, double* %75, align 8, !tbaa !9",
                  "%80 = load double, double* %79, align 8, !tbaa !9",
                  "%80 = load double, double* %79, align 8, !tbaa !9",
                  "%85 = load double, double* %84, align 8, !tbaa !9",
                  "%85 = load double, double* %84, align 8, !tbaa !9",
                  "%88 = load double, double* %87, align 8, !tbaa !9",
                  "%88 = load double, double* %87, align 8, !tbaa !9",
                  "%92 = load double, double* %91, align 8, !tbaa !9",
                  "%92 = load double, double* %91, align 8, !tbaa !9",
                  "%96 = load double, double* %95, align 8, !tbaa !9",
                  "%96 = load double, double* %95, align 8, !tbaa !9"],
                 "origin":
                 ["br i1 %65, label %66, label %100"],
                 "output":"%81 = fadd double %77, %80",
                 "restrictions":
                 [{"use":"%67 = add i64 %64, %48",
                   "value":"%48 = mul i64 %47, %12"},
                  {"use":"%70 = add i64 %64, %50",
                   "value":"%50 = mul i64 %49, %12"},
                  {"use":"%74 = add i64 %64, %52",
                   "value":"%52 = mul i64 %51, %12"},
                  {"use":"%78 = add i64 %64, %54",
                   "value":"%54 = mul i64 %53, %12"},
                  {"use":"%83 = add i64 %64, %56",
                   "value":"%56 = mul i64 %55, %12"},
                  {"use":"%86 = add i64 %64, %58",
                   "value":"%58 = mul i64 %57, %12"},
                  {"use":"%90 = add i64 %64, %60",
                   "value":"%60 = mul i64 %59, %12"},
                  {"use":"%94 = add i64 %64, %62",
                   "value":"%62 = mul i64 %61, %12"}]},
 "end":"br i1 %43, label %44, label %32",
 "iterator":
 ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
  "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
  "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
 "loop":
 [{"begin":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
   "body":{"begin":"%36 = add nsw i64 %33, -1",
           "end":"br i1 %43, label %44, label %32",
           "precursor":"br i1 %34, label %35, label %137",
           "successor":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
   "comparison":"%34 = icmp slt i64 %33, %29",
   "end":"br i1 %34, label %35, label %137",
   "increment":"%37 = add nuw nsw i64 %33, 1",
   "iter_begin":"i64 1",
   "iter_end":"%29 = sext i32 %21 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %32",
   "successor":"%138 = load i1, i1* @timeron, align 4"},
  {"begin":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
   "body":{"begin":"%45 = add nsw i64 %42, -1",
           "end":"br i1 %105, label %106, label %41",
           "precursor":"br i1 %43, label %44, label %32",
           "successor":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
   "comparison":"%43 = icmp slt i64 %42, %28",
   "end":"br i1 %43, label %44, label %32",
   "increment":"%46 = add nuw nsw i64 %42, 1",
   "iter_begin":"i64 1",
   "iter_end":"%28 = sext i32 %22 to i64",
   "iter_step":"i64 1",
   "iterator":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
   "post_sese":{"begin":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
                "end":"br i1 %43, label %44, label %32",
                "precursor":"br i1 %43, label %44, label %32",
                "successor":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
   "pre_sese":{"begin":"%36 = add nsw i64 %33, -1",
               "end":"br label %41",
               "precursor":"br i1 %34, label %35, label %137",
               "successor":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
   "precursor":"br label %41",
   "successor":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
  {"begin":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
   "body":{"begin":"%67 = add i64 %64, %48",
           "end":"br label %63",
           "precursor":"br i1 %65, label %66, label %100",
           "successor":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"},
   "comparison":"%65 = icmp slt i64 %64, %26",
   "end":"br i1 %65, label %66, label %100",
   "increment":"%99 = add nuw nsw i64 %64, 1",
   "iter_begin":"i64 0",
   "iter_end":"%26 = sext i32 %3 to i64",
   "iter_step":"i64 1",
   "iterator":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
   "post_sese":{"begin":"%101 = add i64 %38, %42",
                "end":"br i1 %105, label %106, label %41",
                "precursor":"br i1 %65, label %66, label %100",
                "successor":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
   "pre_sese":{"begin":"%45 = add nsw i64 %42, -1",
               "end":"br label %63",
               "precursor":"br i1 %43, label %44, label %32",
               "successor":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"},
   "precursor":"br label %63",
   "successor":"%101 = add i64 %38, %42"}],
 "precursor":"br i1 %34, label %35, label %137",
 "reads":
 [{"address":"%68 = getelementptr double, double* %13, i64 %67",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%68 = getelementptr double, double* %13, i64 %67",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%38 = mul i64 %33, %11",
             "value":"%47 = add i64 %38, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%48 = mul i64 %47, %12",
             "value":"%67 = add i64 %64, %48"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%67 = add i64 %64, %48",
                         "value":"%67 = add i64 %64, %48"},
           "output_index":"%67 = add i64 %64, %48",
           "stride_mul":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%38 = mul i64 %33, %11"},
            {"input":"%47 = add i64 %38, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%48 = mul i64 %47, %12"},
            {"input":"%67 = add i64 %64, %48",
             "value":"%67 = add i64 %64, %48"}]},
   "value":"%69 = load double, double* %68, align 8, !tbaa !9"},
  {"address":"%71 = getelementptr double, double* %13, i64 %70",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%71 = getelementptr double, double* %13, i64 %70",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%38 = mul i64 %33, %11",
             "value":"%49 = add i64 %38, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%50 = mul i64 %49, %12",
             "value":"%70 = add i64 %64, %50"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%70 = add i64 %64, %50",
                         "value":"%70 = add i64 %64, %50"},
           "output_index":"%70 = add i64 %64, %50",
           "stride_mul":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%38 = mul i64 %33, %11"},
            {"input":"%49 = add i64 %38, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%50 = mul i64 %49, %12"},
            {"input":"%70 = add i64 %64, %50",
             "value":"%70 = add i64 %64, %50"}]},
   "value":"%72 = load double, double* %71, align 8, !tbaa !9"},
  {"address":"%75 = getelementptr double, double* %13, i64 %74",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%75 = getelementptr double, double* %13, i64 %74",
           "base_index":"i64 -1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%39 = mul i64 %36, %11",
             "value":"%51 = add i64 %39, %42"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%52 = mul i64 %51, %12",
             "value":"%74 = add i64 %64, %52"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%74 = add i64 %64, %52",
                         "value":"%74 = add i64 %64, %52"},
           "output_index":"%74 = add i64 %64, %52",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%51 = add i64 %39, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%52 = mul i64 %51, %12"},
            {"input":"%74 = add i64 %64, %52",
             "value":"%74 = add i64 %64, %52"}]},
   "value":"%76 = load double, double* %75, align 8, !tbaa !9"},
  {"address":"%75 = getelementptr double, double* %13, i64 %74",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%36 = add nsw i64 %33, -1"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%75 = getelementptr double, double* %13, i64 %74",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%36 = add nsw i64 %33, -1",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%39 = mul i64 %36, %11",
             "value":"%51 = add i64 %39, %42"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%52 = mul i64 %51, %12",
             "value":"%74 = add i64 %64, %52"}],
           "input_index":
           ["%36 = add nsw i64 %33, -1",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%74 = add i64 %64, %52",
                         "value":"%74 = add i64 %64, %52"},
           "output_index":"%74 = add i64 %64, %52",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%51 = add i64 %39, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%52 = mul i64 %51, %12"},
            {"input":"%74 = add i64 %64, %52",
             "value":"%74 = add i64 %64, %52"}]},
   "value":"%76 = load double, double* %75, align 8, !tbaa !9"},
  {"address":"%79 = getelementptr double, double* %13, i64 %78",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%79 = getelementptr double, double* %13, i64 %78",
           "base_index":"i64 1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%40 = mul i64 %37, %11",
             "value":"%53 = add i64 %40, %42"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%54 = mul i64 %53, %12",
             "value":"%78 = add i64 %64, %54"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%78 = add i64 %64, %54",
                         "value":"%78 = add i64 %64, %54"},
           "output_index":"%78 = add i64 %64, %54",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%53 = add i64 %40, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%54 = mul i64 %53, %12"},
            {"input":"%78 = add i64 %64, %54",
             "value":"%78 = add i64 %64, %54"}]},
   "value":"%80 = load double, double* %79, align 8, !tbaa !9"},
  {"address":"%79 = getelementptr double, double* %13, i64 %78",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%37 = add nuw nsw i64 %33, 1"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%79 = getelementptr double, double* %13, i64 %78",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%40 = mul i64 %37, %11",
             "value":"%53 = add i64 %40, %42"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%54 = mul i64 %53, %12",
             "value":"%78 = add i64 %64, %54"}],
           "input_index":
           ["%37 = add nuw nsw i64 %33, 1",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%78 = add i64 %64, %54",
                         "value":"%78 = add i64 %64, %54"},
           "output_index":"%78 = add i64 %64, %54",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%53 = add i64 %40, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%54 = mul i64 %53, %12"},
            {"input":"%78 = add i64 %64, %54",
             "value":"%78 = add i64 %64, %54"}]},
   "value":"%80 = load double, double* %79, align 8, !tbaa !9"},
  {"address":"%84 = getelementptr double, double* %13, i64 %83",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%84 = getelementptr double, double* %13, i64 %83",
           "base_index":"i64 -1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%39 = mul i64 %36, %11",
             "value":"%55 = add i64 %39, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%56 = mul i64 %55, %12",
             "value":"%83 = add i64 %64, %56"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%83 = add i64 %64, %56",
                         "value":"%83 = add i64 %64, %56"},
           "output_index":"%83 = add i64 %64, %56",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%55 = add i64 %39, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%56 = mul i64 %55, %12"},
            {"input":"%83 = add i64 %64, %56",
             "value":"%83 = add i64 %64, %56"}]},
   "value":"%85 = load double, double* %84, align 8, !tbaa !9"},
  {"address":"%84 = getelementptr double, double* %13, i64 %83",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%36 = add nsw i64 %33, -1"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%84 = getelementptr double, double* %13, i64 %83",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%36 = add nsw i64 %33, -1",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%39 = mul i64 %36, %11",
             "value":"%55 = add i64 %39, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%56 = mul i64 %55, %12",
             "value":"%83 = add i64 %64, %56"}],
           "input_index":
           ["%36 = add nsw i64 %33, -1",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%83 = add i64 %64, %56",
                         "value":"%83 = add i64 %64, %56"},
           "output_index":"%83 = add i64 %64, %56",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%55 = add i64 %39, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%56 = mul i64 %55, %12"},
            {"input":"%83 = add i64 %64, %56",
             "value":"%83 = add i64 %64, %56"}]},
   "value":"%85 = load double, double* %84, align 8, !tbaa !9"},
  {"address":"%87 = getelementptr double, double* %13, i64 %86",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%87 = getelementptr double, double* %13, i64 %86",
           "base_index":"i64 -1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%39 = mul i64 %36, %11",
             "value":"%57 = add i64 %39, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%58 = mul i64 %57, %12",
             "value":"%86 = add i64 %64, %58"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%86 = add i64 %64, %58",
                         "value":"%86 = add i64 %64, %58"},
           "output_index":"%86 = add i64 %64, %58",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%57 = add i64 %39, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%58 = mul i64 %57, %12"},
            {"input":"%86 = add i64 %64, %58",
             "value":"%86 = add i64 %64, %58"}]},
   "value":"%88 = load double, double* %87, align 8, !tbaa !9"},
  {"address":"%87 = getelementptr double, double* %13, i64 %86",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%36 = add nsw i64 %33, -1"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%87 = getelementptr double, double* %13, i64 %86",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%36 = add nsw i64 %33, -1",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%39 = mul i64 %36, %11",
             "value":"%57 = add i64 %39, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%58 = mul i64 %57, %12",
             "value":"%86 = add i64 %64, %58"}],
           "input_index":
           ["%36 = add nsw i64 %33, -1",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%86 = add i64 %64, %58",
                         "value":"%86 = add i64 %64, %58"},
           "output_index":"%86 = add i64 %64, %58",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%57 = add i64 %39, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%58 = mul i64 %57, %12"},
            {"input":"%86 = add i64 %64, %58",
             "value":"%86 = add i64 %64, %58"}]},
   "value":"%88 = load double, double* %87, align 8, !tbaa !9"},
  {"address":"%91 = getelementptr double, double* %13, i64 %90",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%91 = getelementptr double, double* %13, i64 %90",
           "base_index":"i64 1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%40 = mul i64 %37, %11",
             "value":"%59 = add i64 %40, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%60 = mul i64 %59, %12",
             "value":"%90 = add i64 %64, %60"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%90 = add i64 %64, %60",
                         "value":"%90 = add i64 %64, %60"},
           "output_index":"%90 = add i64 %64, %60",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%59 = add i64 %40, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%60 = mul i64 %59, %12"},
            {"input":"%90 = add i64 %64, %60",
             "value":"%90 = add i64 %64, %60"}]},
   "value":"%92 = load double, double* %91, align 8, !tbaa !9"},
  {"address":"%91 = getelementptr double, double* %13, i64 %90",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%37 = add nuw nsw i64 %33, 1"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%91 = getelementptr double, double* %13, i64 %90",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%40 = mul i64 %37, %11",
             "value":"%59 = add i64 %40, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%60 = mul i64 %59, %12",
             "value":"%90 = add i64 %64, %60"}],
           "input_index":
           ["%37 = add nuw nsw i64 %33, 1",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%90 = add i64 %64, %60",
                         "value":"%90 = add i64 %64, %60"},
           "output_index":"%90 = add i64 %64, %60",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%59 = add i64 %40, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%60 = mul i64 %59, %12"},
            {"input":"%90 = add i64 %64, %60",
             "value":"%90 = add i64 %64, %60"}]},
   "value":"%92 = load double, double* %91, align 8, !tbaa !9"},
  {"address":"%95 = getelementptr double, double* %13, i64 %94",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%95 = getelementptr double, double* %13, i64 %94",
           "base_index":"i64 1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%40 = mul i64 %37, %11",
             "value":"%61 = add i64 %40, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%62 = mul i64 %61, %12",
             "value":"%94 = add i64 %64, %62"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%94 = add i64 %64, %62",
                         "value":"%94 = add i64 %64, %62"},
           "output_index":"%94 = add i64 %64, %62",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%61 = add i64 %40, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%62 = mul i64 %61, %12"},
            {"input":"%94 = add i64 %64, %62",
             "value":"%94 = add i64 %64, %62"}]},
   "value":"%96 = load double, double* %95, align 8, !tbaa !9"},
  {"address":"%95 = getelementptr double, double* %13, i64 %94",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%37 = add nuw nsw i64 %33, 1"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%95 = getelementptr double, double* %13, i64 %94",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%40 = mul i64 %37, %11",
             "value":"%61 = add i64 %40, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%62 = mul i64 %61, %12",
             "value":"%94 = add i64 %64, %62"}],
           "input_index":
           ["%37 = add nuw nsw i64 %33, 1",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%94 = add i64 %64, %62",
                         "value":"%94 = add i64 %64, %62"},
           "output_index":"%94 = add i64 %64, %62",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%61 = add i64 %40, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%62 = mul i64 %61, %12"},
            {"input":"%94 = add i64 %64, %62",
             "value":"%94 = add i64 %64, %62"}]},
   "value":"%96 = load double, double* %95, align 8, !tbaa !9"}],
 "stencil_expr":{"input":
                 ["%109 = load double, double* %108, align 8, !tbaa !9",
                  "%112 = load double, double* %111, align 8, !tbaa !9",
                  "%120 = load double, double* %119, align 8, !tbaa !9",
                  "%120 = load double, double* %119, align 8, !tbaa !9",
                  "%120 = load double, double* %119, align 8, !tbaa !9",
                  "%124 = load double, double* %123, align 8, !tbaa !9",
                  "%124 = load double, double* %123, align 8, !tbaa !9",
                  "%124 = load double, double* %123, align 8, !tbaa !9"],
                 "output":"%135 = fsub double %127, %134"},
 "stencil_loop":{"begin":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                 "body":{"begin":"%107 = add i64 %104, %102",
                         "end":"br label %103",
                         "precursor":"br i1 %105, label %106, label %41",
                         "successor":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"},
                 "comparison":"%105 = icmp slt i64 %104, %27",
                 "end":"br i1 %105, label %106, label %41",
                 "increment":"%122 = add nuw nsw i64 %104, 1",
                 "iter_begin":"i64 1",
                 "iter_end":"%27 = sext i32 %23 to i64",
                 "iter_step":"i64 1",
                 "iterator":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                 "precursor":"br label %103",
                 "successor":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
 "stencil_reads":
 [{"address":"%108 = getelementptr double, double* %14, i64 %107",
   "base_pointer":"%14 = bitcast i8* %1 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%108 = getelementptr double, double* %14, i64 %107",
           "base_pointer":"%14 = bitcast i8* %1 to double*",
           "index_add":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%38 = mul i64 %33, %11",
             "value":"%101 = add i64 %38, %42"},
            {"addend":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "input":"%102 = mul i64 %101, %12",
             "value":"%107 = add i64 %104, %102"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"input":"%107 = add i64 %104, %102",
                         "value":"%107 = add i64 %104, %102"},
           "output_index":"%107 = add i64 %104, %102",
           "stride_mul":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%38 = mul i64 %33, %11"},
            {"input":"%101 = add i64 %38, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%102 = mul i64 %101, %12"},
            {"input":"%107 = add i64 %104, %102",
             "value":"%107 = add i64 %104, %102"}]},
   "value":"%109 = load double, double* %108, align 8, !tbaa !9"},
  {"address":"%111 = getelementptr double, double* %13, i64 %107",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%111 = getelementptr double, double* %13, i64 %107",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%38 = mul i64 %33, %11",
             "value":"%101 = add i64 %38, %42"},
            {"addend":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "input":"%102 = mul i64 %101, %12",
             "value":"%107 = add i64 %104, %102"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"input":"%107 = add i64 %104, %102",
                         "value":"%107 = add i64 %104, %102"},
           "output_index":"%107 = add i64 %104, %102",
           "stride_mul":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%38 = mul i64 %33, %11"},
            {"input":"%101 = add i64 %38, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%102 = mul i64 %101, %12"},
            {"input":"%107 = add i64 %104, %102",
             "value":"%107 = add i64 %104, %102"}]},
   "value":"%112 = load double, double* %111, align 8, !tbaa !9"}],
 "stencil_write":{"address":"%136 = getelementptr double, double* %15, i64 %107",
                  "base_pointer":"%15 = bitcast i8* %2 to double*",
                  "index_add":
                  [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
                    "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
                   {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
                    "input":"%38 = mul i64 %33, %11",
                    "value":"%101 = add i64 %38, %42"},
                   {"addend":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                    "input":"%102 = mul i64 %101, %12",
                    "value":"%107 = add i64 %104, %102"}],
                  "input_index":
                  ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
                   "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
                   "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
                  "offset_add":{"input":"%107 = add i64 %104, %102",
                                "value":"%107 = add i64 %104, %102"},
                  "output_index":"%107 = add i64 %104, %102",
                  "store":"store double %135, double* %136, align 8, !tbaa !9",
                  "stride_mul":
                  [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
                    "multiplier":"%11 = zext i32 %4 to i64",
                    "value":"%38 = mul i64 %33, %11"},
                   {"input":"%101 = add i64 %38, %42",
                    "multiplier":"%12 = zext i32 %3 to i64",
                    "value":"%102 = mul i64 %101, %12"},
                   {"input":"%107 = add i64 %104, %102",
                    "value":"%107 = add i64 %104, %102"}]},
 "successor":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
 "temp_reads":
 [{"address":"%119 = getelementptr double, double* %30, i64 %118",
   "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
   "index":
   [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%119 = getelementptr double, double* %30, i64 %118",
           "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
           "index_add":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
           "input_index":
           ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"addend":"i64 -1",
                         "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                         "value":"%118 = add nsw i64 %104, -1"},
           "output_index":"%118 = add nsw i64 %104, -1",
           "stride_mul":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}]},
   "value":"%120 = load double, double* %119, align 8, !tbaa !9"},
  {"address":"%119 = getelementptr double, double* %30, i64 %118",
   "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
   "index":
   [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%119 = getelementptr double, double* %30, i64 %118",
           "base_index":"i64 -1",
           "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%118 = add nsw i64 %104, -1"}],
           "input_index":
           ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"input":"%118 = add nsw i64 %104, -1",
                         "value":"%118 = add nsw i64 %104, -1"},
           "output_index":"%118 = add nsw i64 %104, -1",
           "stride_mul":
           [{"input":"%118 = add nsw i64 %104, -1",
             "value":"%118 = add nsw i64 %104, -1"}]},
   "value":"%120 = load double, double* %119, align 8, !tbaa !9"},
  {"address":"%119 = getelementptr double, double* %30, i64 %118",
   "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
   "index":
   [{"addend":"i64 -1",
     "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%118 = add nsw i64 %104, -1"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%119 = getelementptr double, double* %30, i64 %118",
           "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
           "index_add":
           [{"input":"%118 = add nsw i64 %104, -1",
             "value":"%118 = add nsw i64 %104, -1"}],
           "input_index":
           ["%118 = add nsw i64 %104, -1"],
           "offset_add":{"input":"%118 = add nsw i64 %104, -1",
                         "value":"%118 = add nsw i64 %104, -1"},
           "output_index":"%118 = add nsw i64 %104, -1",
           "stride_mul":
           [{"input":"%118 = add nsw i64 %104, -1",
             "value":"%118 = add nsw i64 %104, -1"}]},
   "value":"%120 = load double, double* %119, align 8, !tbaa !9"},
  {"address":"%123 = getelementptr double, double* %30, i64 %122",
   "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
   "index":
   [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%123 = getelementptr double, double* %30, i64 %122",
           "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
           "index_add":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
           "input_index":
           ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                         "value":"%122 = add nuw nsw i64 %104, 1"},
           "output_index":"%122 = add nuw nsw i64 %104, 1",
           "stride_mul":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}]},
   "value":"%124 = load double, double* %123, align 8, !tbaa !9"},
  {"address":"%123 = getelementptr double, double* %30, i64 %122",
   "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
   "index":
   [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%123 = getelementptr double, double* %30, i64 %122",
           "base_index":"i64 1",
           "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
           "index_add":
           [{"addend":"i64 1",
             "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%122 = add nuw nsw i64 %104, 1"}],
           "input_index":
           ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"input":"%122 = add nuw nsw i64 %104, 1",
                         "value":"%122 = add nuw nsw i64 %104, 1"},
           "output_index":"%122 = add nuw nsw i64 %104, 1",
           "stride_mul":
           [{"input":"%122 = add nuw nsw i64 %104, 1",
             "value":"%122 = add nuw nsw i64 %104, 1"}]},
   "value":"%124 = load double, double* %123, align 8, !tbaa !9"},
  {"address":"%123 = getelementptr double, double* %30, i64 %122",
   "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
   "index":
   [{"addend":"i64 1",
     "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%122 = add nuw nsw i64 %104, 1"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%123 = getelementptr double, double* %30, i64 %122",
           "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
           "index_add":
           [{"input":"%122 = add nuw nsw i64 %104, 1",
             "value":"%122 = add nuw nsw i64 %104, 1"}],
           "input_index":
           ["%122 = add nuw nsw i64 %104, 1"],
           "offset_add":{"input":"%122 = add nuw nsw i64 %104, 1",
                         "value":"%122 = add nuw nsw i64 %104, 1"},
           "output_index":"%122 = add nuw nsw i64 %104, 1",
           "stride_mul":
           [{"input":"%122 = add nuw nsw i64 %104, 1",
             "value":"%122 = add nuw nsw i64 %104, 1"}]},
   "value":"%124 = load double, double* %123, align 8, !tbaa !9"}],
 "temp_write":{"address":"%82 = getelementptr double, double* %30, i64 %64",
               "base_pointer":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
               "index_add":
               [{"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
                 "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
               "input_index":
               ["%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
               "offset_add":{"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
                             "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"},
               "output_index":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
               "store":"store double %81, double* %82, align 8, !tbaa !9",
               "stride_mul":
               [{"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
                 "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}]}}
END stenpls
BEGIN stenpls
{"begin":"%36 = add nsw i64 %33, -1",
 "body":{"begin":"%67 = add i64 %64, %48",
         "end":"br label %63",
         "precursor":"br i1 %65, label %66, label %100",
         "successor":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"},
 "compute_expr":{"constants":
                 [{"use":"%68 = getelementptr double, double* %13, i64 %67",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%71 = getelementptr double, double* %13, i64 %70",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%75 = getelementptr double, double* %13, i64 %74",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%79 = getelementptr double, double* %13, i64 %78",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%84 = getelementptr double, double* %13, i64 %83",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%87 = getelementptr double, double* %13, i64 %86",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%91 = getelementptr double, double* %13, i64 %90",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%95 = getelementptr double, double* %13, i64 %94",
                   "value":"%13 = bitcast i8* %0 to double*"},
                  {"use":"%82 = getelementptr double, double* %30, i64 %64",
                   "value":"%30 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0"},
                  {"use":"%98 = getelementptr double, double* %31, i64 %64",
                   "value":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0"}],
                 "input":
                 ["%69 = load double, double* %68, align 8, !tbaa !9",
                  "%72 = load double, double* %71, align 8, !tbaa !9",
                  "%76 = load double, double* %75, align 8, !tbaa !9",
                  "%76 = load double, double* %75, align 8, !tbaa !9",
                  "%80 = load double, double* %79, align 8, !tbaa !9",
                  "%80 = load double, double* %79, align 8, !tbaa !9",
                  "%85 = load double, double* %84, align 8, !tbaa !9",
                  "%85 = load double, double* %84, align 8, !tbaa !9",
                  "%88 = load double, double* %87, align 8, !tbaa !9",
                  "%88 = load double, double* %87, align 8, !tbaa !9",
                  "%92 = load double, double* %91, align 8, !tbaa !9",
                  "%92 = load double, double* %91, align 8, !tbaa !9",
                  "%96 = load double, double* %95, align 8, !tbaa !9",
                  "%96 = load double, double* %95, align 8, !tbaa !9"],
                 "origin":
                 ["br i1 %65, label %66, label %100"],
                 "output":"%97 = fadd double %93, %96",
                 "restrictions":
                 [{"use":"%67 = add i64 %64, %48",
                   "value":"%48 = mul i64 %47, %12"},
                  {"use":"%70 = add i64 %64, %50",
                   "value":"%50 = mul i64 %49, %12"},
                  {"use":"%74 = add i64 %64, %52",
                   "value":"%52 = mul i64 %51, %12"},
                  {"use":"%78 = add i64 %64, %54",
                   "value":"%54 = mul i64 %53, %12"},
                  {"use":"%83 = add i64 %64, %56",
                   "value":"%56 = mul i64 %55, %12"},
                  {"use":"%86 = add i64 %64, %58",
                   "value":"%58 = mul i64 %57, %12"},
                  {"use":"%90 = add i64 %64, %60",
                   "value":"%60 = mul i64 %59, %12"},
                  {"use":"%94 = add i64 %64, %62",
                   "value":"%62 = mul i64 %61, %12"}]},
 "end":"br i1 %43, label %44, label %32",
 "iterator":
 ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
  "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
  "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
 "loop":
 [{"begin":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
   "body":{"begin":"%36 = add nsw i64 %33, -1",
           "end":"br i1 %43, label %44, label %32",
           "precursor":"br i1 %34, label %35, label %137",
           "successor":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
   "comparison":"%34 = icmp slt i64 %33, %29",
   "end":"br i1 %34, label %35, label %137",
   "increment":"%37 = add nuw nsw i64 %33, 1",
   "iter_begin":"i64 1",
   "iter_end":"%29 = sext i32 %21 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %32",
   "successor":"%138 = load i1, i1* @timeron, align 4"},
  {"begin":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
   "body":{"begin":"%45 = add nsw i64 %42, -1",
           "end":"br i1 %105, label %106, label %41",
           "precursor":"br i1 %43, label %44, label %32",
           "successor":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
   "comparison":"%43 = icmp slt i64 %42, %28",
   "end":"br i1 %43, label %44, label %32",
   "increment":"%46 = add nuw nsw i64 %42, 1",
   "iter_begin":"i64 1",
   "iter_end":"%28 = sext i32 %22 to i64",
   "iter_step":"i64 1",
   "iterator":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
   "post_sese":{"begin":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
                "end":"br i1 %43, label %44, label %32",
                "precursor":"br i1 %43, label %44, label %32",
                "successor":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
   "pre_sese":{"begin":"%36 = add nsw i64 %33, -1",
               "end":"br label %41",
               "precursor":"br i1 %34, label %35, label %137",
               "successor":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
   "precursor":"br label %41",
   "successor":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
  {"begin":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
   "body":{"begin":"%67 = add i64 %64, %48",
           "end":"br label %63",
           "precursor":"br i1 %65, label %66, label %100",
           "successor":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"},
   "comparison":"%65 = icmp slt i64 %64, %26",
   "end":"br i1 %65, label %66, label %100",
   "increment":"%99 = add nuw nsw i64 %64, 1",
   "iter_begin":"i64 0",
   "iter_end":"%26 = sext i32 %3 to i64",
   "iter_step":"i64 1",
   "iterator":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
   "post_sese":{"begin":"%101 = add i64 %38, %42",
                "end":"br i1 %105, label %106, label %41",
                "precursor":"br i1 %65, label %66, label %100",
                "successor":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
   "pre_sese":{"begin":"%45 = add nsw i64 %42, -1",
               "end":"br label %63",
               "precursor":"br i1 %43, label %44, label %32",
               "successor":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"},
   "precursor":"br label %63",
   "successor":"%101 = add i64 %38, %42"}],
 "precursor":"br i1 %34, label %35, label %137",
 "reads":
 [{"address":"%68 = getelementptr double, double* %13, i64 %67",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%68 = getelementptr double, double* %13, i64 %67",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%38 = mul i64 %33, %11",
             "value":"%47 = add i64 %38, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%48 = mul i64 %47, %12",
             "value":"%67 = add i64 %64, %48"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%67 = add i64 %64, %48",
                         "value":"%67 = add i64 %64, %48"},
           "output_index":"%67 = add i64 %64, %48",
           "stride_mul":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%38 = mul i64 %33, %11"},
            {"input":"%47 = add i64 %38, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%48 = mul i64 %47, %12"},
            {"input":"%67 = add i64 %64, %48",
             "value":"%67 = add i64 %64, %48"}]},
   "value":"%69 = load double, double* %68, align 8, !tbaa !9"},
  {"address":"%71 = getelementptr double, double* %13, i64 %70",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%71 = getelementptr double, double* %13, i64 %70",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%38 = mul i64 %33, %11",
             "value":"%49 = add i64 %38, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%50 = mul i64 %49, %12",
             "value":"%70 = add i64 %64, %50"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%70 = add i64 %64, %50",
                         "value":"%70 = add i64 %64, %50"},
           "output_index":"%70 = add i64 %64, %50",
           "stride_mul":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%38 = mul i64 %33, %11"},
            {"input":"%49 = add i64 %38, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%50 = mul i64 %49, %12"},
            {"input":"%70 = add i64 %64, %50",
             "value":"%70 = add i64 %64, %50"}]},
   "value":"%72 = load double, double* %71, align 8, !tbaa !9"},
  {"address":"%75 = getelementptr double, double* %13, i64 %74",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%75 = getelementptr double, double* %13, i64 %74",
           "base_index":"i64 -1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%39 = mul i64 %36, %11",
             "value":"%51 = add i64 %39, %42"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%52 = mul i64 %51, %12",
             "value":"%74 = add i64 %64, %52"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%74 = add i64 %64, %52",
                         "value":"%74 = add i64 %64, %52"},
           "output_index":"%74 = add i64 %64, %52",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%51 = add i64 %39, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%52 = mul i64 %51, %12"},
            {"input":"%74 = add i64 %64, %52",
             "value":"%74 = add i64 %64, %52"}]},
   "value":"%76 = load double, double* %75, align 8, !tbaa !9"},
  {"address":"%75 = getelementptr double, double* %13, i64 %74",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%36 = add nsw i64 %33, -1"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%75 = getelementptr double, double* %13, i64 %74",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%36 = add nsw i64 %33, -1",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%39 = mul i64 %36, %11",
             "value":"%51 = add i64 %39, %42"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%52 = mul i64 %51, %12",
             "value":"%74 = add i64 %64, %52"}],
           "input_index":
           ["%36 = add nsw i64 %33, -1",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%74 = add i64 %64, %52",
                         "value":"%74 = add i64 %64, %52"},
           "output_index":"%74 = add i64 %64, %52",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%51 = add i64 %39, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%52 = mul i64 %51, %12"},
            {"input":"%74 = add i64 %64, %52",
             "value":"%74 = add i64 %64, %52"}]},
   "value":"%76 = load double, double* %75, align 8, !tbaa !9"},
  {"address":"%79 = getelementptr double, double* %13, i64 %78",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%79 = getelementptr double, double* %13, i64 %78",
           "base_index":"i64 1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%40 = mul i64 %37, %11",
             "value":"%53 = add i64 %40, %42"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%54 = mul i64 %53, %12",
             "value":"%78 = add i64 %64, %54"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%78 = add i64 %64, %54",
                         "value":"%78 = add i64 %64, %54"},
           "output_index":"%78 = add i64 %64, %54",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%53 = add i64 %40, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%54 = mul i64 %53, %12"},
            {"input":"%78 = add i64 %64, %54",
             "value":"%78 = add i64 %64, %54"}]},
   "value":"%80 = load double, double* %79, align 8, !tbaa !9"},
  {"address":"%79 = getelementptr double, double* %13, i64 %78",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%37 = add nuw nsw i64 %33, 1"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%79 = getelementptr double, double* %13, i64 %78",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%40 = mul i64 %37, %11",
             "value":"%53 = add i64 %40, %42"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%54 = mul i64 %53, %12",
             "value":"%78 = add i64 %64, %54"}],
           "input_index":
           ["%37 = add nuw nsw i64 %33, 1",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%78 = add i64 %64, %54",
                         "value":"%78 = add i64 %64, %54"},
           "output_index":"%78 = add i64 %64, %54",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%53 = add i64 %40, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%54 = mul i64 %53, %12"},
            {"input":"%78 = add i64 %64, %54",
             "value":"%78 = add i64 %64, %54"}]},
   "value":"%80 = load double, double* %79, align 8, !tbaa !9"},
  {"address":"%84 = getelementptr double, double* %13, i64 %83",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%84 = getelementptr double, double* %13, i64 %83",
           "base_index":"i64 -1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%39 = mul i64 %36, %11",
             "value":"%55 = add i64 %39, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%56 = mul i64 %55, %12",
             "value":"%83 = add i64 %64, %56"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%83 = add i64 %64, %56",
                         "value":"%83 = add i64 %64, %56"},
           "output_index":"%83 = add i64 %64, %56",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%55 = add i64 %39, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%56 = mul i64 %55, %12"},
            {"input":"%83 = add i64 %64, %56",
             "value":"%83 = add i64 %64, %56"}]},
   "value":"%85 = load double, double* %84, align 8, !tbaa !9"},
  {"address":"%84 = getelementptr double, double* %13, i64 %83",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%36 = add nsw i64 %33, -1"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%84 = getelementptr double, double* %13, i64 %83",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%36 = add nsw i64 %33, -1",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%39 = mul i64 %36, %11",
             "value":"%55 = add i64 %39, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%56 = mul i64 %55, %12",
             "value":"%83 = add i64 %64, %56"}],
           "input_index":
           ["%36 = add nsw i64 %33, -1",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%83 = add i64 %64, %56",
                         "value":"%83 = add i64 %64, %56"},
           "output_index":"%83 = add i64 %64, %56",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%55 = add i64 %39, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%56 = mul i64 %55, %12"},
            {"input":"%83 = add i64 %64, %56",
             "value":"%83 = add i64 %64, %56"}]},
   "value":"%85 = load double, double* %84, align 8, !tbaa !9"},
  {"address":"%87 = getelementptr double, double* %13, i64 %86",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%87 = getelementptr double, double* %13, i64 %86",
           "base_index":"i64 -1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%39 = mul i64 %36, %11",
             "value":"%57 = add i64 %39, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%58 = mul i64 %57, %12",
             "value":"%86 = add i64 %64, %58"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%86 = add i64 %64, %58",
                         "value":"%86 = add i64 %64, %58"},
           "output_index":"%86 = add i64 %64, %58",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%57 = add i64 %39, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%58 = mul i64 %57, %12"},
            {"input":"%86 = add i64 %64, %58",
             "value":"%86 = add i64 %64, %58"}]},
   "value":"%88 = load double, double* %87, align 8, !tbaa !9"},
  {"address":"%87 = getelementptr double, double* %13, i64 %86",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%36 = add nsw i64 %33, -1"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%87 = getelementptr double, double* %13, i64 %86",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%36 = add nsw i64 %33, -1",
             "value":"%36 = add nsw i64 %33, -1"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%39 = mul i64 %36, %11",
             "value":"%57 = add i64 %39, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%58 = mul i64 %57, %12",
             "value":"%86 = add i64 %64, %58"}],
           "input_index":
           ["%36 = add nsw i64 %33, -1",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%86 = add i64 %64, %58",
                         "value":"%86 = add i64 %64, %58"},
           "output_index":"%86 = add i64 %64, %58",
           "stride_mul":
           [{"input":"%36 = add nsw i64 %33, -1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%39 = mul i64 %36, %11"},
            {"input":"%57 = add i64 %39, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%58 = mul i64 %57, %12"},
            {"input":"%86 = add i64 %64, %58",
             "value":"%86 = add i64 %64, %58"}]},
   "value":"%88 = load double, double* %87, align 8, !tbaa !9"},
  {"address":"%91 = getelementptr double, double* %13, i64 %90",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%91 = getelementptr double, double* %13, i64 %90",
           "base_index":"i64 1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%40 = mul i64 %37, %11",
             "value":"%59 = add i64 %40, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%60 = mul i64 %59, %12",
             "value":"%90 = add i64 %64, %60"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%90 = add i64 %64, %60",
                         "value":"%90 = add i64 %64, %60"},
           "output_index":"%90 = add i64 %64, %60",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%59 = add i64 %40, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%60 = mul i64 %59, %12"},
            {"input":"%90 = add i64 %64, %60",
             "value":"%90 = add i64 %64, %60"}]},
   "value":"%92 = load double, double* %91, align 8, !tbaa !9"},
  {"address":"%91 = getelementptr double, double* %13, i64 %90",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%37 = add nuw nsw i64 %33, 1"},
    {"addend":"i64 -1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%45 = add nsw i64 %42, -1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%91 = getelementptr double, double* %13, i64 %90",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%45 = add nsw i64 %42, -1",
             "input":"%40 = mul i64 %37, %11",
             "value":"%59 = add i64 %40, %45"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%60 = mul i64 %59, %12",
             "value":"%90 = add i64 %64, %60"}],
           "input_index":
           ["%37 = add nuw nsw i64 %33, 1",
            "%45 = add nsw i64 %42, -1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%90 = add i64 %64, %60",
                         "value":"%90 = add i64 %64, %60"},
           "output_index":"%90 = add i64 %64, %60",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%59 = add i64 %40, %45",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%60 = mul i64 %59, %12"},
            {"input":"%90 = add i64 %64, %60",
             "value":"%90 = add i64 %64, %60"}]},
   "value":"%92 = load double, double* %91, align 8, !tbaa !9"},
  {"address":"%95 = getelementptr double, double* %13, i64 %94",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%95 = getelementptr double, double* %13, i64 %94",
           "base_index":"i64 1",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%40 = mul i64 %37, %11",
             "value":"%61 = add i64 %40, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%62 = mul i64 %61, %12",
             "value":"%94 = add i64 %64, %62"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%94 = add i64 %64, %62",
                         "value":"%94 = add i64 %64, %62"},
           "output_index":"%94 = add i64 %64, %62",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%61 = add i64 %40, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%62 = mul i64 %61, %12"},
            {"input":"%94 = add i64 %64, %62",
             "value":"%94 = add i64 %64, %62"}]},
   "value":"%96 = load double, double* %95, align 8, !tbaa !9"},
  {"address":"%95 = getelementptr double, double* %13, i64 %94",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%37 = add nuw nsw i64 %33, 1"},
    {"addend":"i64 1",
     "input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%46 = add nuw nsw i64 %42, 1"},
    {"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
     "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
   "read":{"address":"%95 = getelementptr double, double* %13, i64 %94",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "value":"%37 = add nuw nsw i64 %33, 1"},
            {"addend":"%46 = add nuw nsw i64 %42, 1",
             "input":"%40 = mul i64 %37, %11",
             "value":"%61 = add i64 %40, %46"},
            {"addend":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
             "input":"%62 = mul i64 %61, %12",
             "value":"%94 = add i64 %64, %62"}],
           "input_index":
           ["%37 = add nuw nsw i64 %33, 1",
            "%46 = add nuw nsw i64 %42, 1",
            "%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
           "offset_add":{"input":"%94 = add i64 %64, %62",
                         "value":"%94 = add i64 %64, %62"},
           "output_index":"%94 = add i64 %64, %62",
           "stride_mul":
           [{"input":"%37 = add nuw nsw i64 %33, 1",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%40 = mul i64 %37, %11"},
            {"input":"%61 = add i64 %40, %46",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%62 = mul i64 %61, %12"},
            {"input":"%94 = add i64 %64, %62",
             "value":"%94 = add i64 %64, %62"}]},
   "value":"%96 = load double, double* %95, align 8, !tbaa !9"}],
 "stencil_expr":{"input":
                 ["%109 = load double, double* %108, align 8, !tbaa !9",
                  "%112 = load double, double* %111, align 8, !tbaa !9",
                  "%117 = load double, double* %116, align 8, !tbaa !9",
                  "%130 = load double, double* %129, align 8, !tbaa !9",
                  "%130 = load double, double* %129, align 8, !tbaa !9",
                  "%130 = load double, double* %129, align 8, !tbaa !9",
                  "%132 = load double, double* %131, align 8, !tbaa !9",
                  "%132 = load double, double* %131, align 8, !tbaa !9",
                  "%132 = load double, double* %131, align 8, !tbaa !9"],
                 "output":"%135 = fsub double %127, %134"},
 "stencil_loop":{"begin":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                 "body":{"begin":"%107 = add i64 %104, %102",
                         "end":"br label %103",
                         "precursor":"br i1 %105, label %106, label %41",
                         "successor":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"},
                 "comparison":"%105 = icmp slt i64 %104, %27",
                 "end":"br i1 %105, label %106, label %41",
                 "increment":"%122 = add nuw nsw i64 %104, 1",
                 "iter_begin":"i64 1",
                 "iter_end":"%27 = sext i32 %23 to i64",
                 "iter_step":"i64 1",
                 "iterator":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                 "precursor":"br label %103",
                 "successor":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
 "stencil_reads":
 [{"address":"%108 = getelementptr double, double* %14, i64 %107",
   "base_pointer":"%14 = bitcast i8* %1 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%108 = getelementptr double, double* %14, i64 %107",
           "base_pointer":"%14 = bitcast i8* %1 to double*",
           "index_add":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%38 = mul i64 %33, %11",
             "value":"%101 = add i64 %38, %42"},
            {"addend":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "input":"%102 = mul i64 %101, %12",
             "value":"%107 = add i64 %104, %102"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"input":"%107 = add i64 %104, %102",
                         "value":"%107 = add i64 %104, %102"},
           "output_index":"%107 = add i64 %104, %102",
           "stride_mul":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%38 = mul i64 %33, %11"},
            {"input":"%101 = add i64 %38, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%102 = mul i64 %101, %12"},
            {"input":"%107 = add i64 %104, %102",
             "value":"%107 = add i64 %104, %102"}]},
   "value":"%109 = load double, double* %108, align 8, !tbaa !9"},
  {"address":"%111 = getelementptr double, double* %13, i64 %107",
   "base_pointer":"%13 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
     "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
    {"input":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
     "value":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]"},
    {"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
    "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
    "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%111 = getelementptr double, double* %13, i64 %107",
           "base_pointer":"%13 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
            {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
             "input":"%38 = mul i64 %33, %11",
             "value":"%101 = add i64 %38, %42"},
            {"addend":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "input":"%102 = mul i64 %101, %12",
             "value":"%107 = add i64 %104, %102"}],
           "input_index":
           ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
            "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
            "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"input":"%107 = add i64 %104, %102",
                         "value":"%107 = add i64 %104, %102"},
           "output_index":"%107 = add i64 %104, %102",
           "stride_mul":
           [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
             "multiplier":"%11 = zext i32 %4 to i64",
             "value":"%38 = mul i64 %33, %11"},
            {"input":"%101 = add i64 %38, %42",
             "multiplier":"%12 = zext i32 %3 to i64",
             "value":"%102 = mul i64 %101, %12"},
            {"input":"%107 = add i64 %104, %102",
             "value":"%107 = add i64 %104, %102"}]},
   "value":"%112 = load double, double* %111, align 8, !tbaa !9"}],
 "stencil_write":{"address":"%136 = getelementptr double, double* %15, i64 %107",
                  "base_pointer":"%15 = bitcast i8* %2 to double*",
                  "index_add":
                  [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
                    "value":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]"},
                   {"addend":"%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
                    "input":"%38 = mul i64 %33, %11",
                    "value":"%101 = add i64 %38, %42"},
                   {"addend":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                    "input":"%102 = mul i64 %101, %12",
                    "value":"%107 = add i64 %104, %102"}],
                  "input_index":
                  ["%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
                   "%42 = phi i64 [ 1, %35 ], [ %46, %103 ]",
                   "%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
                  "offset_add":{"input":"%107 = add i64 %104, %102",
                                "value":"%107 = add i64 %104, %102"},
                  "output_index":"%107 = add i64 %104, %102",
                  "store":"store double %135, double* %136, align 8, !tbaa !9",
                  "stride_mul":
                  [{"input":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
                    "multiplier":"%11 = zext i32 %4 to i64",
                    "value":"%38 = mul i64 %33, %11"},
                   {"input":"%101 = add i64 %38, %42",
                    "multiplier":"%12 = zext i32 %3 to i64",
                    "value":"%102 = mul i64 %101, %12"},
                   {"input":"%107 = add i64 %104, %102",
                    "value":"%107 = add i64 %104, %102"}]},
 "successor":"%33 = phi i64 [ 1, %20 ], [ %37, %41 ]",
 "temp_reads":
 [{"address":"%116 = getelementptr double, double* %31, i64 %104",
   "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
   "index":
   [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%116 = getelementptr double, double* %31, i64 %104",
           "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
           "index_add":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
           "input_index":
           ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                         "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"},
           "output_index":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
           "stride_mul":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}]},
   "value":"%117 = load double, double* %116, align 8, !tbaa !9"},
  {"address":"%129 = getelementptr double, double* %31, i64 %118",
   "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
   "index":
   [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%129 = getelementptr double, double* %31, i64 %118",
           "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
           "index_add":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
           "input_index":
           ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"addend":"i64 -1",
                         "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                         "value":"%118 = add nsw i64 %104, -1"},
           "output_index":"%118 = add nsw i64 %104, -1",
           "stride_mul":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}]},
   "value":"%130 = load double, double* %129, align 8, !tbaa !9"},
  {"address":"%129 = getelementptr double, double* %31, i64 %118",
   "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
   "index":
   [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%129 = getelementptr double, double* %31, i64 %118",
           "base_index":"i64 -1",
           "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%118 = add nsw i64 %104, -1"}],
           "input_index":
           ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"input":"%118 = add nsw i64 %104, -1",
                         "value":"%118 = add nsw i64 %104, -1"},
           "output_index":"%118 = add nsw i64 %104, -1",
           "stride_mul":
           [{"input":"%118 = add nsw i64 %104, -1",
             "value":"%118 = add nsw i64 %104, -1"}]},
   "value":"%130 = load double, double* %129, align 8, !tbaa !9"},
  {"address":"%129 = getelementptr double, double* %31, i64 %118",
   "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
   "index":
   [{"addend":"i64 -1",
     "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%118 = add nsw i64 %104, -1"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%129 = getelementptr double, double* %31, i64 %118",
           "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
           "index_add":
           [{"input":"%118 = add nsw i64 %104, -1",
             "value":"%118 = add nsw i64 %104, -1"}],
           "input_index":
           ["%118 = add nsw i64 %104, -1"],
           "offset_add":{"input":"%118 = add nsw i64 %104, -1",
                         "value":"%118 = add nsw i64 %104, -1"},
           "output_index":"%118 = add nsw i64 %104, -1",
           "stride_mul":
           [{"input":"%118 = add nsw i64 %104, -1",
             "value":"%118 = add nsw i64 %104, -1"}]},
   "value":"%130 = load double, double* %129, align 8, !tbaa !9"},
  {"address":"%131 = getelementptr double, double* %31, i64 %122",
   "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
   "index":
   [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%131 = getelementptr double, double* %31, i64 %122",
           "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
           "index_add":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
           "input_index":
           ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
                         "value":"%122 = add nuw nsw i64 %104, 1"},
           "output_index":"%122 = add nuw nsw i64 %104, 1",
           "stride_mul":
           [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}]},
   "value":"%132 = load double, double* %131, align 8, !tbaa !9"},
  {"address":"%131 = getelementptr double, double* %31, i64 %122",
   "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
   "index":
   [{"input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%131 = getelementptr double, double* %31, i64 %122",
           "base_index":"i64 1",
           "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
           "index_add":
           [{"addend":"i64 1",
             "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
             "value":"%122 = add nuw nsw i64 %104, 1"}],
           "input_index":
           ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
           "offset_add":{"input":"%122 = add nuw nsw i64 %104, 1",
                         "value":"%122 = add nuw nsw i64 %104, 1"},
           "output_index":"%122 = add nuw nsw i64 %104, 1",
           "stride_mul":
           [{"input":"%122 = add nuw nsw i64 %104, 1",
             "value":"%122 = add nuw nsw i64 %104, 1"}]},
   "value":"%132 = load double, double* %131, align 8, !tbaa !9"},
  {"address":"%131 = getelementptr double, double* %31, i64 %122",
   "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
   "index":
   [{"addend":"i64 1",
     "input":"%104 = phi i64 [ %122, %106 ], [ 1, %100 ]",
     "value":"%122 = add nuw nsw i64 %104, 1"}],
   "input_index":
   ["%104 = phi i64 [ %122, %106 ], [ 1, %100 ]"],
   "read":{"address":"%131 = getelementptr double, double* %31, i64 %122",
           "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
           "index_add":
           [{"input":"%122 = add nuw nsw i64 %104, 1",
             "value":"%122 = add nuw nsw i64 %104, 1"}],
           "input_index":
           ["%122 = add nuw nsw i64 %104, 1"],
           "offset_add":{"input":"%122 = add nuw nsw i64 %104, 1",
                         "value":"%122 = add nuw nsw i64 %104, 1"},
           "output_index":"%122 = add nuw nsw i64 %104, 1",
           "stride_mul":
           [{"input":"%122 = add nuw nsw i64 %104, 1",
             "value":"%122 = add nuw nsw i64 %104, 1"}]},
   "value":"%132 = load double, double* %131, align 8, !tbaa !9"}],
 "temp_write":{"address":"%98 = getelementptr double, double* %31, i64 %64",
               "base_pointer":"%31 = getelementptr [259 x double], [259 x double]* %10, i64 0, i64 0",
               "index_add":
               [{"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
                 "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}],
               "input_index":
               ["%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"],
               "offset_add":{"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
                             "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"},
               "output_index":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
               "store":"store double %97, double* %98, align 8, !tbaa !9",
               "stride_mul":
               [{"input":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]",
                 "value":"%64 = phi i64 [ %99, %66 ], [ 0, %44 ]"}]}}
END stenpls
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION mg3P
BEGIN LOOP
BEGIN stencil
{"begin":"%284 = mul i64 %281, %275",
 "body":{"begin":"%295 = add i64 %292, %290",
         "end":"br label %291",
         "precursor":"br i1 %293, label %294, label %299",
         "successor":"%292 = phi i64 [ %298, %294 ], [ 0, %288 ]"},
 "end":"br label %280",
 "iterator":
 ["%281 = phi i64 [ %302, %301 ], [ 0, %263 ]",
  "%286 = phi i64 [ %300, %299 ], [ 0, %283 ]",
  "%292 = phi i64 [ %298, %294 ], [ 0, %288 ]"],
 "kernel":{"constants":
           [{"use":"%297 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0), i64 %296",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0)"},
            {"use":"%296 = add i64 %267, %295",
             "value":"%267 = sext i32 %266 to i64"}],
           "origin":
           ["br i1 %293, label %294, label %299"],
           "output":"double 0.000000e+00",
           "restrictions":
           [{"use":"%295 = add i64 %292, %290",
             "value":"%290 = mul i64 %289, %276"},
            {"use":"%295 = add i64 %292, %290",
             "value":"%292 = phi i64 [ %298, %294 ], [ 0, %288 ]"},
            {"use":"%298 = add nuw nsw i64 %292, 1",
             "value":"%292 = phi i64 [ %298, %294 ], [ 0, %288 ]"}]},
 "loop":
 [{"begin":"%281 = phi i64 [ %302, %301 ], [ 0, %263 ]",
   "body":{"begin":"%284 = mul i64 %281, %275",
           "end":"br label %280",
           "precursor":"br i1 %282, label %283, label %303",
           "successor":"%281 = phi i64 [ %302, %301 ], [ 0, %263 ]"},
   "comparison":"%282 = icmp slt i64 %281, %279",
   "end":"br i1 %282, label %283, label %303",
   "increment":"%302 = add nuw nsw i64 %281, 1",
   "iter_begin":"i64 0",
   "iter_end":"%279 = sext i32 %274 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %280",
   "successor":"%304 = zext i1 %16 to i32"},
  {"begin":"%286 = phi i64 [ %300, %299 ], [ 0, %283 ]",
   "body":{"begin":"%289 = add i64 %284, %286",
           "end":"br label %285",
           "precursor":"br i1 %287, label %288, label %301",
           "successor":"%286 = phi i64 [ %300, %299 ], [ 0, %283 ]"},
   "comparison":"%287 = icmp slt i64 %286, %278",
   "end":"br i1 %287, label %288, label %301",
   "increment":"%300 = add nuw nsw i64 %286, 1",
   "iter_begin":"i64 0",
   "iter_end":"%278 = sext i32 %272 to i64",
   "iter_step":"i64 1",
   "iterator":"%286 = phi i64 [ %300, %299 ], [ 0, %283 ]",
   "post_sese":{"begin":"%302 = add nuw nsw i64 %281, 1",
                "end":"br label %280",
                "precursor":"br i1 %287, label %288, label %301",
                "successor":"%281 = phi i64 [ %302, %301 ], [ 0, %263 ]"},
   "pre_sese":{"begin":"%284 = mul i64 %281, %275",
               "end":"br label %285",
               "precursor":"br i1 %282, label %283, label %303",
               "successor":"%286 = phi i64 [ %300, %299 ], [ 0, %283 ]"},
   "precursor":"br label %285",
   "successor":"%302 = add nuw nsw i64 %281, 1"},
  {"begin":"%292 = phi i64 [ %298, %294 ], [ 0, %288 ]",
   "body":{"begin":"%295 = add i64 %292, %290",
           "end":"br label %291",
           "precursor":"br i1 %293, label %294, label %299",
           "successor":"%292 = phi i64 [ %298, %294 ], [ 0, %288 ]"},
   "comparison":"%293 = icmp slt i64 %292, %277",
   "end":"br i1 %293, label %294, label %299",
   "increment":"%298 = add nuw nsw i64 %292, 1",
   "iter_begin":"i64 0",
   "iter_end":"%277 = sext i32 %270 to i64",
   "iter_step":"i64 1",
   "iterator":"%292 = phi i64 [ %298, %294 ], [ 0, %288 ]",
   "post_sese":{"begin":"%300 = add nuw nsw i64 %286, 1",
                "end":"br label %285",
                "precursor":"br i1 %293, label %294, label %299",
                "successor":"%286 = phi i64 [ %300, %299 ], [ 0, %283 ]"},
   "pre_sese":{"begin":"%289 = add i64 %284, %286",
               "end":"br label %291",
               "precursor":"br i1 %287, label %288, label %301",
               "successor":"%292 = phi i64 [ %298, %294 ], [ 0, %288 ]"},
   "precursor":"br label %291",
   "successor":"%300 = add nuw nsw i64 %286, 1"}],
 "precursor":"br i1 %282, label %283, label %303",
 "successor":"%281 = phi i64 [ %302, %301 ], [ 0, %263 ]",
 "write":{"address":"%297 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0), i64 %296",
          "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0)",
          "index_add":
          [{"input":"%281 = phi i64 [ %302, %301 ], [ 0, %263 ]",
            "value":"%281 = phi i64 [ %302, %301 ], [ 0, %263 ]"},
           {"addend":"%286 = phi i64 [ %300, %299 ], [ 0, %283 ]",
            "input":"%284 = mul i64 %281, %275",
            "value":"%289 = add i64 %284, %286"},
           {"addend":"%292 = phi i64 [ %298, %294 ], [ 0, %288 ]",
            "input":"%290 = mul i64 %289, %276",
            "value":"%295 = add i64 %292, %290"}],
          "input_index":
          ["%281 = phi i64 [ %302, %301 ], [ 0, %263 ]",
           "%286 = phi i64 [ %300, %299 ], [ 0, %283 ]",
           "%292 = phi i64 [ %298, %294 ], [ 0, %288 ]"],
          "offset_add":{"addend":"%267 = sext i32 %266 to i64",
                        "input":"%295 = add i64 %292, %290",
                        "value":"%296 = add i64 %267, %295"},
          "output_index":"%296 = add i64 %267, %295",
          "store":"store double 0.000000e+00, double* %297, align 8, !tbaa !9",
          "stride_mul":
          [{"input":"%281 = phi i64 [ %302, %301 ], [ 0, %263 ]",
            "multiplier":"%275 = zext i32 %272 to i64",
            "value":"%284 = mul i64 %281, %275"},
           {"input":"%289 = add i64 %284, %286",
            "multiplier":"%276 = zext i32 %270 to i64",
            "value":"%290 = mul i64 %289, %276"},
           {"input":"%295 = add i64 %292, %290",
            "value":"%295 = add i64 %292, %290"}]}}
END stencil
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%335 = mul i64 %332, %326",
 "body":{"begin":"%346 = add i64 %343, %341",
         "end":"br label %342",
         "precursor":"br i1 %344, label %345, label %350",
         "successor":"%343 = phi i64 [ %349, %345 ], [ 0, %339 ]"},
 "end":"br label %331",
 "iterator":
 ["%332 = phi i64 [ %353, %352 ], [ 0, %315 ]",
  "%337 = phi i64 [ %351, %350 ], [ 0, %334 ]",
  "%343 = phi i64 [ %349, %345 ], [ 0, %339 ]"],
 "kernel":{"constants":
           [{"use":"%348 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0), i64 %347",
             "value":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0)"},
            {"use":"%347 = add i64 %318, %346",
             "value":"%318 = sext i32 %317 to i64"}],
           "origin":
           ["br i1 %344, label %345, label %350"],
           "output":"double 0.000000e+00",
           "restrictions":
           [{"use":"%346 = add i64 %343, %341",
             "value":"%341 = mul i64 %340, %327"},
            {"use":"%346 = add i64 %343, %341",
             "value":"%343 = phi i64 [ %349, %345 ], [ 0, %339 ]"},
            {"use":"%349 = add nuw nsw i64 %343, 1",
             "value":"%343 = phi i64 [ %349, %345 ], [ 0, %339 ]"}]},
 "loop":
 [{"begin":"%332 = phi i64 [ %353, %352 ], [ 0, %315 ]",
   "body":{"begin":"%335 = mul i64 %332, %326",
           "end":"br label %331",
           "precursor":"br i1 %333, label %334, label %354",
           "successor":"%332 = phi i64 [ %353, %352 ], [ 0, %315 ]"},
   "comparison":"%333 = icmp slt i64 %332, %330",
   "end":"br i1 %333, label %334, label %354",
   "increment":"%353 = add nuw nsw i64 %332, 1",
   "iter_begin":"i64 0",
   "iter_end":"%330 = sext i32 %325 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %331",
   "successor":"%355 = add nsw i64 %311, -1"},
  {"begin":"%337 = phi i64 [ %351, %350 ], [ 0, %334 ]",
   "body":{"begin":"%340 = add i64 %335, %337",
           "end":"br label %336",
           "precursor":"br i1 %338, label %339, label %352",
           "successor":"%337 = phi i64 [ %351, %350 ], [ 0, %334 ]"},
   "comparison":"%338 = icmp slt i64 %337, %329",
   "end":"br i1 %338, label %339, label %352",
   "increment":"%351 = add nuw nsw i64 %337, 1",
   "iter_begin":"i64 0",
   "iter_end":"%329 = sext i32 %323 to i64",
   "iter_step":"i64 1",
   "iterator":"%337 = phi i64 [ %351, %350 ], [ 0, %334 ]",
   "post_sese":{"begin":"%353 = add nuw nsw i64 %332, 1",
                "end":"br label %331",
                "precursor":"br i1 %338, label %339, label %352",
                "successor":"%332 = phi i64 [ %353, %352 ], [ 0, %315 ]"},
   "pre_sese":{"begin":"%335 = mul i64 %332, %326",
               "end":"br label %336",
               "precursor":"br i1 %333, label %334, label %354",
               "successor":"%337 = phi i64 [ %351, %350 ], [ 0, %334 ]"},
   "precursor":"br label %336",
   "successor":"%353 = add nuw nsw i64 %332, 1"},
  {"begin":"%343 = phi i64 [ %349, %345 ], [ 0, %339 ]",
   "body":{"begin":"%346 = add i64 %343, %341",
           "end":"br label %342",
           "precursor":"br i1 %344, label %345, label %350",
           "successor":"%343 = phi i64 [ %349, %345 ], [ 0, %339 ]"},
   "comparison":"%344 = icmp slt i64 %343, %328",
   "end":"br i1 %344, label %345, label %350",
   "increment":"%349 = add nuw nsw i64 %343, 1",
   "iter_begin":"i64 0",
   "iter_end":"%328 = sext i32 %321 to i64",
   "iter_step":"i64 1",
   "iterator":"%343 = phi i64 [ %349, %345 ], [ 0, %339 ]",
   "post_sese":{"begin":"%351 = add nuw nsw i64 %337, 1",
                "end":"br label %336",
                "precursor":"br i1 %344, label %345, label %350",
                "successor":"%337 = phi i64 [ %351, %350 ], [ 0, %334 ]"},
   "pre_sese":{"begin":"%340 = add i64 %335, %337",
               "end":"br label %342",
               "precursor":"br i1 %338, label %339, label %352",
               "successor":"%343 = phi i64 [ %349, %345 ], [ 0, %339 ]"},
   "precursor":"br label %342",
   "successor":"%351 = add nuw nsw i64 %337, 1"}],
 "precursor":"br i1 %333, label %334, label %354",
 "successor":"%332 = phi i64 [ %353, %352 ], [ 0, %315 ]",
 "write":{"address":"%348 = getelementptr double, double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0), i64 %347",
          "base_pointer":"double* getelementptr inbounds ([19704488 x double], [19704488 x double]* @u, i64 0, i64 0)",
          "index_add":
          [{"input":"%332 = phi i64 [ %353, %352 ], [ 0, %315 ]",
            "value":"%332 = phi i64 [ %353, %352 ], [ 0, %315 ]"},
           {"addend":"%337 = phi i64 [ %351, %350 ], [ 0, %334 ]",
            "input":"%335 = mul i64 %332, %326",
            "value":"%340 = add i64 %335, %337"},
           {"addend":"%343 = phi i64 [ %349, %345 ], [ 0, %339 ]",
            "input":"%341 = mul i64 %340, %327",
            "value":"%346 = add i64 %343, %341"}],
          "input_index":
          ["%332 = phi i64 [ %353, %352 ], [ 0, %315 ]",
           "%337 = phi i64 [ %351, %350 ], [ 0, %334 ]",
           "%343 = phi i64 [ %349, %345 ], [ 0, %339 ]"],
          "offset_add":{"addend":"%318 = sext i32 %317 to i64",
                        "input":"%346 = add i64 %343, %341",
                        "value":"%347 = add i64 %318, %346"},
          "output_index":"%347 = add i64 %318, %346",
          "store":"store double 0.000000e+00, double* %348, align 8, !tbaa !9",
          "stride_mul":
          [{"input":"%332 = phi i64 [ %353, %352 ], [ 0, %315 ]",
            "multiplier":"%326 = zext i32 %323 to i64",
            "value":"%335 = mul i64 %332, %326"},
           {"input":"%340 = add i64 %335, %337",
            "multiplier":"%327 = zext i32 %321 to i64",
            "value":"%341 = mul i64 %340, %327"},
           {"input":"%346 = add i64 %343, %341",
            "value":"%346 = add i64 %343, %341"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION psinv
BEGIN LOOP
BEGIN stenpls
{"begin":"%34 = add nsw i64 %31, -1",
 "body":{"begin":"%65 = add i64 %62, %46",
         "end":"br label %61",
         "precursor":"br i1 %63, label %64, label %98",
         "successor":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"},
 "compute_expr":{"constants":
                 [{"use":"%66 = getelementptr double, double* %12, i64 %65",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%69 = getelementptr double, double* %12, i64 %68",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%73 = getelementptr double, double* %12, i64 %72",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%77 = getelementptr double, double* %12, i64 %76",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%82 = getelementptr double, double* %12, i64 %81",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%85 = getelementptr double, double* %12, i64 %84",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%89 = getelementptr double, double* %12, i64 %88",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%93 = getelementptr double, double* %12, i64 %92",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%80 = getelementptr double, double* %28, i64 %62",
                   "value":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0"},
                  {"use":"%96 = getelementptr double, double* %29, i64 %62",
                   "value":"%29 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0"}],
                 "input":
                 ["%67 = load double, double* %66, align 8, !tbaa !9",
                  "%70 = load double, double* %69, align 8, !tbaa !9",
                  "%74 = load double, double* %73, align 8, !tbaa !9",
                  "%74 = load double, double* %73, align 8, !tbaa !9",
                  "%78 = load double, double* %77, align 8, !tbaa !9",
                  "%78 = load double, double* %77, align 8, !tbaa !9",
                  "%83 = load double, double* %82, align 8, !tbaa !9",
                  "%83 = load double, double* %82, align 8, !tbaa !9",
                  "%86 = load double, double* %85, align 8, !tbaa !9",
                  "%86 = load double, double* %85, align 8, !tbaa !9",
                  "%90 = load double, double* %89, align 8, !tbaa !9",
                  "%90 = load double, double* %89, align 8, !tbaa !9",
                  "%94 = load double, double* %93, align 8, !tbaa !9",
                  "%94 = load double, double* %93, align 8, !tbaa !9"],
                 "origin":
                 ["br i1 %63, label %64, label %98"],
                 "output":"%79 = fadd double %75, %78",
                 "restrictions":
                 [{"use":"%65 = add i64 %62, %46",
                   "value":"%46 = mul i64 %45, %11"},
                  {"use":"%68 = add i64 %62, %48",
                   "value":"%48 = mul i64 %47, %11"},
                  {"use":"%72 = add i64 %62, %50",
                   "value":"%50 = mul i64 %49, %11"},
                  {"use":"%76 = add i64 %62, %52",
                   "value":"%52 = mul i64 %51, %11"},
                  {"use":"%81 = add i64 %62, %54",
                   "value":"%54 = mul i64 %53, %11"},
                  {"use":"%84 = add i64 %62, %56",
                   "value":"%56 = mul i64 %55, %11"},
                  {"use":"%88 = add i64 %62, %58",
                   "value":"%58 = mul i64 %57, %11"},
                  {"use":"%92 = add i64 %62, %60",
                   "value":"%60 = mul i64 %59, %11"}]},
 "end":"br i1 %41, label %42, label %30",
 "iterator":
 ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
  "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
  "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
 "loop":
 [{"begin":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
   "body":{"begin":"%34 = add nsw i64 %31, -1",
           "end":"br i1 %41, label %42, label %30",
           "precursor":"br i1 %32, label %33, label %139",
           "successor":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
   "comparison":"%32 = icmp slt i64 %31, %27",
   "end":"br i1 %32, label %33, label %139",
   "increment":"%35 = add nuw nsw i64 %31, 1",
   "iter_begin":"i64 1",
   "iter_end":"%27 = sext i32 %19 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %30",
   "successor":"%140 = load i1, i1* @timeron, align 4"},
  {"begin":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
   "body":{"begin":"%43 = add nsw i64 %40, -1",
           "end":"br i1 %103, label %104, label %39",
           "precursor":"br i1 %41, label %42, label %30",
           "successor":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
   "comparison":"%41 = icmp slt i64 %40, %26",
   "end":"br i1 %41, label %42, label %30",
   "increment":"%44 = add nuw nsw i64 %40, 1",
   "iter_begin":"i64 1",
   "iter_end":"%26 = sext i32 %20 to i64",
   "iter_step":"i64 1",
   "iterator":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
   "post_sese":{"begin":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
                "end":"br i1 %41, label %42, label %30",
                "precursor":"br i1 %41, label %42, label %30",
                "successor":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
   "pre_sese":{"begin":"%34 = add nsw i64 %31, -1",
               "end":"br label %39",
               "precursor":"br i1 %32, label %33, label %139",
               "successor":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
   "precursor":"br label %39",
   "successor":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
  {"begin":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
   "body":{"begin":"%65 = add i64 %62, %46",
           "end":"br label %61",
           "precursor":"br i1 %63, label %64, label %98",
           "successor":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"},
   "comparison":"%63 = icmp slt i64 %62, %24",
   "end":"br i1 %63, label %64, label %98",
   "increment":"%97 = add nuw nsw i64 %62, 1",
   "iter_begin":"i64 0",
   "iter_end":"%24 = sext i32 %2 to i64",
   "iter_step":"i64 1",
   "iterator":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
   "post_sese":{"begin":"%99 = add i64 %36, %40",
                "end":"br i1 %103, label %104, label %39",
                "precursor":"br i1 %63, label %64, label %98",
                "successor":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
   "pre_sese":{"begin":"%43 = add nsw i64 %40, -1",
               "end":"br label %61",
               "precursor":"br i1 %41, label %42, label %30",
               "successor":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"},
   "precursor":"br label %61",
   "successor":"%99 = add i64 %36, %40"}],
 "precursor":"br i1 %32, label %33, label %139",
 "reads":
 [{"address":"%66 = getelementptr double, double* %12, i64 %65",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%66 = getelementptr double, double* %12, i64 %65",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%36 = mul i64 %31, %10",
             "value":"%45 = add i64 %36, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%46 = mul i64 %45, %11",
             "value":"%65 = add i64 %62, %46"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%65 = add i64 %62, %46",
                         "value":"%65 = add i64 %62, %46"},
           "output_index":"%65 = add i64 %62, %46",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%45 = add i64 %36, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%46 = mul i64 %45, %11"},
            {"input":"%65 = add i64 %62, %46",
             "value":"%65 = add i64 %62, %46"}]},
   "value":"%67 = load double, double* %66, align 8, !tbaa !9"},
  {"address":"%69 = getelementptr double, double* %12, i64 %68",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%69 = getelementptr double, double* %12, i64 %68",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%36 = mul i64 %31, %10",
             "value":"%47 = add i64 %36, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%48 = mul i64 %47, %11",
             "value":"%68 = add i64 %62, %48"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%68 = add i64 %62, %48",
                         "value":"%68 = add i64 %62, %48"},
           "output_index":"%68 = add i64 %62, %48",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%47 = add i64 %36, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%48 = mul i64 %47, %11"},
            {"input":"%68 = add i64 %62, %48",
             "value":"%68 = add i64 %62, %48"}]},
   "value":"%70 = load double, double* %69, align 8, !tbaa !9"},
  {"address":"%73 = getelementptr double, double* %12, i64 %72",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%73 = getelementptr double, double* %12, i64 %72",
           "base_index":"i64 -1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%37 = mul i64 %34, %10",
             "value":"%49 = add i64 %37, %40"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%50 = mul i64 %49, %11",
             "value":"%72 = add i64 %62, %50"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%72 = add i64 %62, %50",
                         "value":"%72 = add i64 %62, %50"},
           "output_index":"%72 = add i64 %62, %50",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%49 = add i64 %37, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%50 = mul i64 %49, %11"},
            {"input":"%72 = add i64 %62, %50",
             "value":"%72 = add i64 %62, %50"}]},
   "value":"%74 = load double, double* %73, align 8, !tbaa !9"},
  {"address":"%73 = getelementptr double, double* %12, i64 %72",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%34 = add nsw i64 %31, -1"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%73 = getelementptr double, double* %12, i64 %72",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%34 = add nsw i64 %31, -1",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%37 = mul i64 %34, %10",
             "value":"%49 = add i64 %37, %40"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%50 = mul i64 %49, %11",
             "value":"%72 = add i64 %62, %50"}],
           "input_index":
           ["%34 = add nsw i64 %31, -1",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%72 = add i64 %62, %50",
                         "value":"%72 = add i64 %62, %50"},
           "output_index":"%72 = add i64 %62, %50",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%49 = add i64 %37, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%50 = mul i64 %49, %11"},
            {"input":"%72 = add i64 %62, %50",
             "value":"%72 = add i64 %62, %50"}]},
   "value":"%74 = load double, double* %73, align 8, !tbaa !9"},
  {"address":"%77 = getelementptr double, double* %12, i64 %76",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%77 = getelementptr double, double* %12, i64 %76",
           "base_index":"i64 1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%38 = mul i64 %35, %10",
             "value":"%51 = add i64 %38, %40"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%52 = mul i64 %51, %11",
             "value":"%76 = add i64 %62, %52"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%76 = add i64 %62, %52",
                         "value":"%76 = add i64 %62, %52"},
           "output_index":"%76 = add i64 %62, %52",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%51 = add i64 %38, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%52 = mul i64 %51, %11"},
            {"input":"%76 = add i64 %62, %52",
             "value":"%76 = add i64 %62, %52"}]},
   "value":"%78 = load double, double* %77, align 8, !tbaa !9"},
  {"address":"%77 = getelementptr double, double* %12, i64 %76",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%35 = add nuw nsw i64 %31, 1"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%77 = getelementptr double, double* %12, i64 %76",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%38 = mul i64 %35, %10",
             "value":"%51 = add i64 %38, %40"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%52 = mul i64 %51, %11",
             "value":"%76 = add i64 %62, %52"}],
           "input_index":
           ["%35 = add nuw nsw i64 %31, 1",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%76 = add i64 %62, %52",
                         "value":"%76 = add i64 %62, %52"},
           "output_index":"%76 = add i64 %62, %52",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%51 = add i64 %38, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%52 = mul i64 %51, %11"},
            {"input":"%76 = add i64 %62, %52",
             "value":"%76 = add i64 %62, %52"}]},
   "value":"%78 = load double, double* %77, align 8, !tbaa !9"},
  {"address":"%82 = getelementptr double, double* %12, i64 %81",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%82 = getelementptr double, double* %12, i64 %81",
           "base_index":"i64 -1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%37 = mul i64 %34, %10",
             "value":"%53 = add i64 %37, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%54 = mul i64 %53, %11",
             "value":"%81 = add i64 %62, %54"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%81 = add i64 %62, %54",
                         "value":"%81 = add i64 %62, %54"},
           "output_index":"%81 = add i64 %62, %54",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%53 = add i64 %37, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%54 = mul i64 %53, %11"},
            {"input":"%81 = add i64 %62, %54",
             "value":"%81 = add i64 %62, %54"}]},
   "value":"%83 = load double, double* %82, align 8, !tbaa !9"},
  {"address":"%82 = getelementptr double, double* %12, i64 %81",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%34 = add nsw i64 %31, -1"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%82 = getelementptr double, double* %12, i64 %81",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%34 = add nsw i64 %31, -1",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%37 = mul i64 %34, %10",
             "value":"%53 = add i64 %37, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%54 = mul i64 %53, %11",
             "value":"%81 = add i64 %62, %54"}],
           "input_index":
           ["%34 = add nsw i64 %31, -1",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%81 = add i64 %62, %54",
                         "value":"%81 = add i64 %62, %54"},
           "output_index":"%81 = add i64 %62, %54",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%53 = add i64 %37, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%54 = mul i64 %53, %11"},
            {"input":"%81 = add i64 %62, %54",
             "value":"%81 = add i64 %62, %54"}]},
   "value":"%83 = load double, double* %82, align 8, !tbaa !9"},
  {"address":"%85 = getelementptr double, double* %12, i64 %84",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%85 = getelementptr double, double* %12, i64 %84",
           "base_index":"i64 -1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%37 = mul i64 %34, %10",
             "value":"%55 = add i64 %37, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%56 = mul i64 %55, %11",
             "value":"%84 = add i64 %62, %56"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%84 = add i64 %62, %56",
                         "value":"%84 = add i64 %62, %56"},
           "output_index":"%84 = add i64 %62, %56",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%55 = add i64 %37, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%56 = mul i64 %55, %11"},
            {"input":"%84 = add i64 %62, %56",
             "value":"%84 = add i64 %62, %56"}]},
   "value":"%86 = load double, double* %85, align 8, !tbaa !9"},
  {"address":"%85 = getelementptr double, double* %12, i64 %84",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%34 = add nsw i64 %31, -1"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%85 = getelementptr double, double* %12, i64 %84",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%34 = add nsw i64 %31, -1",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%37 = mul i64 %34, %10",
             "value":"%55 = add i64 %37, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%56 = mul i64 %55, %11",
             "value":"%84 = add i64 %62, %56"}],
           "input_index":
           ["%34 = add nsw i64 %31, -1",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%84 = add i64 %62, %56",
                         "value":"%84 = add i64 %62, %56"},
           "output_index":"%84 = add i64 %62, %56",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%55 = add i64 %37, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%56 = mul i64 %55, %11"},
            {"input":"%84 = add i64 %62, %56",
             "value":"%84 = add i64 %62, %56"}]},
   "value":"%86 = load double, double* %85, align 8, !tbaa !9"},
  {"address":"%89 = getelementptr double, double* %12, i64 %88",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%89 = getelementptr double, double* %12, i64 %88",
           "base_index":"i64 1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%38 = mul i64 %35, %10",
             "value":"%57 = add i64 %38, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%58 = mul i64 %57, %11",
             "value":"%88 = add i64 %62, %58"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%88 = add i64 %62, %58",
                         "value":"%88 = add i64 %62, %58"},
           "output_index":"%88 = add i64 %62, %58",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%57 = add i64 %38, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%58 = mul i64 %57, %11"},
            {"input":"%88 = add i64 %62, %58",
             "value":"%88 = add i64 %62, %58"}]},
   "value":"%90 = load double, double* %89, align 8, !tbaa !9"},
  {"address":"%89 = getelementptr double, double* %12, i64 %88",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%35 = add nuw nsw i64 %31, 1"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%89 = getelementptr double, double* %12, i64 %88",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%38 = mul i64 %35, %10",
             "value":"%57 = add i64 %38, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%58 = mul i64 %57, %11",
             "value":"%88 = add i64 %62, %58"}],
           "input_index":
           ["%35 = add nuw nsw i64 %31, 1",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%88 = add i64 %62, %58",
                         "value":"%88 = add i64 %62, %58"},
           "output_index":"%88 = add i64 %62, %58",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%57 = add i64 %38, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%58 = mul i64 %57, %11"},
            {"input":"%88 = add i64 %62, %58",
             "value":"%88 = add i64 %62, %58"}]},
   "value":"%90 = load double, double* %89, align 8, !tbaa !9"},
  {"address":"%93 = getelementptr double, double* %12, i64 %92",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%93 = getelementptr double, double* %12, i64 %92",
           "base_index":"i64 1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%38 = mul i64 %35, %10",
             "value":"%59 = add i64 %38, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%60 = mul i64 %59, %11",
             "value":"%92 = add i64 %62, %60"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%92 = add i64 %62, %60",
                         "value":"%92 = add i64 %62, %60"},
           "output_index":"%92 = add i64 %62, %60",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%59 = add i64 %38, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%60 = mul i64 %59, %11"},
            {"input":"%92 = add i64 %62, %60",
             "value":"%92 = add i64 %62, %60"}]},
   "value":"%94 = load double, double* %93, align 8, !tbaa !9"},
  {"address":"%93 = getelementptr double, double* %12, i64 %92",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%35 = add nuw nsw i64 %31, 1"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%93 = getelementptr double, double* %12, i64 %92",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%38 = mul i64 %35, %10",
             "value":"%59 = add i64 %38, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%60 = mul i64 %59, %11",
             "value":"%92 = add i64 %62, %60"}],
           "input_index":
           ["%35 = add nuw nsw i64 %31, 1",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%92 = add i64 %62, %60",
                         "value":"%92 = add i64 %62, %60"},
           "output_index":"%92 = add i64 %62, %60",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%59 = add i64 %38, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%60 = mul i64 %59, %11"},
            {"input":"%92 = add i64 %62, %60",
             "value":"%92 = add i64 %62, %60"}]},
   "value":"%94 = load double, double* %93, align 8, !tbaa !9"}],
 "stencil_expr":{"input":
                 ["%107 = load double, double* %106, align 8, !tbaa !9",
                  "%110 = load double, double* %109, align 8, !tbaa !9",
                  "%117 = load double, double* %116, align 8, !tbaa !9",
                  "%121 = load double, double* %120, align 8, !tbaa !9",
                  "%124 = load double, double* %123, align 8, !tbaa !9",
                  "%132 = load double, double* %131, align 8, !tbaa !9",
                  "%132 = load double, double* %131, align 8, !tbaa !9",
                  "%132 = load double, double* %131, align 8, !tbaa !9",
                  "%135 = load double, double* %134, align 8, !tbaa !9",
                  "%135 = load double, double* %134, align 8, !tbaa !9",
                  "%135 = load double, double* %134, align 8, !tbaa !9"],
                 "output":"%138 = fadd double %127, %137"},
 "stencil_loop":{"begin":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                 "body":{"begin":"%105 = add i64 %102, %100",
                         "end":"br label %101",
                         "precursor":"br i1 %103, label %104, label %39",
                         "successor":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"},
                 "comparison":"%103 = icmp slt i64 %102, %25",
                 "end":"br i1 %103, label %104, label %39",
                 "increment":"%118 = add nuw nsw i64 %102, 1",
                 "iter_begin":"i64 1",
                 "iter_end":"%25 = sext i32 %21 to i64",
                 "iter_step":"i64 1",
                 "iterator":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                 "precursor":"br label %101",
                 "successor":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
 "stencil_reads":
 [{"address":"%106 = getelementptr double, double* %13, i64 %105",
   "base_pointer":"%13 = bitcast i8* %1 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%106 = getelementptr double, double* %13, i64 %105",
           "base_pointer":"%13 = bitcast i8* %1 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%36 = mul i64 %31, %10",
             "value":"%99 = add i64 %36, %40"},
            {"addend":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "input":"%100 = mul i64 %99, %11",
             "value":"%105 = add i64 %102, %100"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"input":"%105 = add i64 %102, %100",
                         "value":"%105 = add i64 %102, %100"},
           "output_index":"%105 = add i64 %102, %100",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%99 = add i64 %36, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%100 = mul i64 %99, %11"},
            {"input":"%105 = add i64 %102, %100",
             "value":"%105 = add i64 %102, %100"}]},
   "value":"%107 = load double, double* %106, align 8, !tbaa !9"},
  {"address":"%109 = getelementptr double, double* %12, i64 %105",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%109 = getelementptr double, double* %12, i64 %105",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%36 = mul i64 %31, %10",
             "value":"%99 = add i64 %36, %40"},
            {"addend":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "input":"%100 = mul i64 %99, %11",
             "value":"%105 = add i64 %102, %100"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"input":"%105 = add i64 %102, %100",
                         "value":"%105 = add i64 %102, %100"},
           "output_index":"%105 = add i64 %102, %100",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%99 = add i64 %36, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%100 = mul i64 %99, %11"},
            {"input":"%105 = add i64 %102, %100",
             "value":"%105 = add i64 %102, %100"}]},
   "value":"%110 = load double, double* %109, align 8, !tbaa !9"},
  {"address":"%116 = getelementptr double, double* %12, i64 %115",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"addend":"i64 -1",
     "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%114 = add nsw i64 %102, -1"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%116 = getelementptr double, double* %12, i64 %115",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%36 = mul i64 %31, %10",
             "value":"%99 = add i64 %36, %40"},
            {"addend":"%114 = add nsw i64 %102, -1",
             "input":"%100 = mul i64 %99, %11",
             "value":"%115 = add i64 %114, %100"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%114 = add nsw i64 %102, -1"],
           "offset_add":{"input":"%115 = add i64 %114, %100",
                         "value":"%115 = add i64 %114, %100"},
           "output_index":"%115 = add i64 %114, %100",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%99 = add i64 %36, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%100 = mul i64 %99, %11"},
            {"input":"%115 = add i64 %114, %100",
             "value":"%115 = add i64 %114, %100"}]},
   "value":"%117 = load double, double* %116, align 8, !tbaa !9"},
  {"address":"%120 = getelementptr double, double* %12, i64 %119",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"addend":"i64 1",
     "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%118 = add nuw nsw i64 %102, 1"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%120 = getelementptr double, double* %12, i64 %119",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%36 = mul i64 %31, %10",
             "value":"%99 = add i64 %36, %40"},
            {"addend":"%118 = add nuw nsw i64 %102, 1",
             "input":"%100 = mul i64 %99, %11",
             "value":"%119 = add i64 %118, %100"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%118 = add nuw nsw i64 %102, 1"],
           "offset_add":{"input":"%119 = add i64 %118, %100",
                         "value":"%119 = add i64 %118, %100"},
           "output_index":"%119 = add i64 %118, %100",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%99 = add i64 %36, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%100 = mul i64 %99, %11"},
            {"input":"%119 = add i64 %118, %100",
             "value":"%119 = add i64 %118, %100"}]},
   "value":"%121 = load double, double* %120, align 8, !tbaa !9"}],
 "stencil_write":{"address":"%106 = getelementptr double, double* %13, i64 %105",
                  "base_pointer":"%13 = bitcast i8* %1 to double*",
                  "index_add":
                  [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
                    "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
                   {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
                    "input":"%36 = mul i64 %31, %10",
                    "value":"%99 = add i64 %36, %40"},
                   {"addend":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                    "input":"%100 = mul i64 %99, %11",
                    "value":"%105 = add i64 %102, %100"}],
                  "input_index":
                  ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
                   "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
                   "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
                  "offset_add":{"input":"%105 = add i64 %102, %100",
                                "value":"%105 = add i64 %102, %100"},
                  "output_index":"%105 = add i64 %102, %100",
                  "store":"store double %138, double* %106, align 8, !tbaa !9",
                  "stride_mul":
                  [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
                    "multiplier":"%10 = zext i32 %3 to i64",
                    "value":"%36 = mul i64 %31, %10"},
                   {"input":"%99 = add i64 %36, %40",
                    "multiplier":"%11 = zext i32 %2 to i64",
                    "value":"%100 = mul i64 %99, %11"},
                   {"input":"%105 = add i64 %102, %100",
                    "value":"%105 = add i64 %102, %100"}]},
 "successor":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
 "temp_reads":
 [{"address":"%123 = getelementptr double, double* %28, i64 %102",
   "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
   "index":
   [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%123 = getelementptr double, double* %28, i64 %102",
           "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
           "index_add":
           [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
           "input_index":
           ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                         "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"},
           "output_index":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
           "stride_mul":
           [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}]},
   "value":"%124 = load double, double* %123, align 8, !tbaa !9"},
  {"address":"%131 = getelementptr double, double* %28, i64 %114",
   "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
   "index":
   [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%131 = getelementptr double, double* %28, i64 %114",
           "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
           "index_add":
           [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
           "input_index":
           ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"addend":"i64 -1",
                         "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                         "value":"%114 = add nsw i64 %102, -1"},
           "output_index":"%114 = add nsw i64 %102, -1",
           "stride_mul":
           [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}]},
   "value":"%132 = load double, double* %131, align 8, !tbaa !9"},
  {"address":"%131 = getelementptr double, double* %28, i64 %114",
   "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
   "index":
   [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%131 = getelementptr double, double* %28, i64 %114",
           "base_index":"i64 -1",
           "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%114 = add nsw i64 %102, -1"}],
           "input_index":
           ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"input":"%114 = add nsw i64 %102, -1",
                         "value":"%114 = add nsw i64 %102, -1"},
           "output_index":"%114 = add nsw i64 %102, -1",
           "stride_mul":
           [{"input":"%114 = add nsw i64 %102, -1",
             "value":"%114 = add nsw i64 %102, -1"}]},
   "value":"%132 = load double, double* %131, align 8, !tbaa !9"},
  {"address":"%131 = getelementptr double, double* %28, i64 %114",
   "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
   "index":
   [{"addend":"i64 -1",
     "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%114 = add nsw i64 %102, -1"}],
   "input_index":
   ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%131 = getelementptr double, double* %28, i64 %114",
           "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
           "index_add":
           [{"input":"%114 = add nsw i64 %102, -1",
             "value":"%114 = add nsw i64 %102, -1"}],
           "input_index":
           ["%114 = add nsw i64 %102, -1"],
           "offset_add":{"input":"%114 = add nsw i64 %102, -1",
                         "value":"%114 = add nsw i64 %102, -1"},
           "output_index":"%114 = add nsw i64 %102, -1",
           "stride_mul":
           [{"input":"%114 = add nsw i64 %102, -1",
             "value":"%114 = add nsw i64 %102, -1"}]},
   "value":"%132 = load double, double* %131, align 8, !tbaa !9"},
  {"address":"%134 = getelementptr double, double* %28, i64 %118",
   "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
   "index":
   [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%134 = getelementptr double, double* %28, i64 %118",
           "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
           "index_add":
           [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
           "input_index":
           ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                         "value":"%118 = add nuw nsw i64 %102, 1"},
           "output_index":"%118 = add nuw nsw i64 %102, 1",
           "stride_mul":
           [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}]},
   "value":"%135 = load double, double* %134, align 8, !tbaa !9"},
  {"address":"%134 = getelementptr double, double* %28, i64 %118",
   "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
   "index":
   [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%134 = getelementptr double, double* %28, i64 %118",
           "base_index":"i64 1",
           "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
           "index_add":
           [{"addend":"i64 1",
             "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%118 = add nuw nsw i64 %102, 1"}],
           "input_index":
           ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"input":"%118 = add nuw nsw i64 %102, 1",
                         "value":"%118 = add nuw nsw i64 %102, 1"},
           "output_index":"%118 = add nuw nsw i64 %102, 1",
           "stride_mul":
           [{"input":"%118 = add nuw nsw i64 %102, 1",
             "value":"%118 = add nuw nsw i64 %102, 1"}]},
   "value":"%135 = load double, double* %134, align 8, !tbaa !9"},
  {"address":"%134 = getelementptr double, double* %28, i64 %118",
   "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
   "index":
   [{"addend":"i64 1",
     "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%118 = add nuw nsw i64 %102, 1"}],
   "input_index":
   ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%134 = getelementptr double, double* %28, i64 %118",
           "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
           "index_add":
           [{"input":"%118 = add nuw nsw i64 %102, 1",
             "value":"%118 = add nuw nsw i64 %102, 1"}],
           "input_index":
           ["%118 = add nuw nsw i64 %102, 1"],
           "offset_add":{"input":"%118 = add nuw nsw i64 %102, 1",
                         "value":"%118 = add nuw nsw i64 %102, 1"},
           "output_index":"%118 = add nuw nsw i64 %102, 1",
           "stride_mul":
           [{"input":"%118 = add nuw nsw i64 %102, 1",
             "value":"%118 = add nuw nsw i64 %102, 1"}]},
   "value":"%135 = load double, double* %134, align 8, !tbaa !9"}],
 "temp_write":{"address":"%80 = getelementptr double, double* %28, i64 %62",
               "base_pointer":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0",
               "index_add":
               [{"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
                 "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
               "input_index":
               ["%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
               "offset_add":{"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
                             "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"},
               "output_index":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
               "store":"store double %79, double* %80, align 8, !tbaa !9",
               "stride_mul":
               [{"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
                 "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}]}}
END stenpls
BEGIN stenpls
{"begin":"%34 = add nsw i64 %31, -1",
 "body":{"begin":"%65 = add i64 %62, %46",
         "end":"br label %61",
         "precursor":"br i1 %63, label %64, label %98",
         "successor":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"},
 "compute_expr":{"constants":
                 [{"use":"%66 = getelementptr double, double* %12, i64 %65",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%69 = getelementptr double, double* %12, i64 %68",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%73 = getelementptr double, double* %12, i64 %72",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%77 = getelementptr double, double* %12, i64 %76",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%82 = getelementptr double, double* %12, i64 %81",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%85 = getelementptr double, double* %12, i64 %84",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%89 = getelementptr double, double* %12, i64 %88",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%93 = getelementptr double, double* %12, i64 %92",
                   "value":"%12 = bitcast i8* %0 to double*"},
                  {"use":"%80 = getelementptr double, double* %28, i64 %62",
                   "value":"%28 = getelementptr [259 x double], [259 x double]* %8, i64 0, i64 0"},
                  {"use":"%96 = getelementptr double, double* %29, i64 %62",
                   "value":"%29 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0"}],
                 "input":
                 ["%67 = load double, double* %66, align 8, !tbaa !9",
                  "%70 = load double, double* %69, align 8, !tbaa !9",
                  "%74 = load double, double* %73, align 8, !tbaa !9",
                  "%74 = load double, double* %73, align 8, !tbaa !9",
                  "%78 = load double, double* %77, align 8, !tbaa !9",
                  "%78 = load double, double* %77, align 8, !tbaa !9",
                  "%83 = load double, double* %82, align 8, !tbaa !9",
                  "%83 = load double, double* %82, align 8, !tbaa !9",
                  "%86 = load double, double* %85, align 8, !tbaa !9",
                  "%86 = load double, double* %85, align 8, !tbaa !9",
                  "%90 = load double, double* %89, align 8, !tbaa !9",
                  "%90 = load double, double* %89, align 8, !tbaa !9",
                  "%94 = load double, double* %93, align 8, !tbaa !9",
                  "%94 = load double, double* %93, align 8, !tbaa !9"],
                 "origin":
                 ["br i1 %63, label %64, label %98"],
                 "output":"%95 = fadd double %91, %94",
                 "restrictions":
                 [{"use":"%65 = add i64 %62, %46",
                   "value":"%46 = mul i64 %45, %11"},
                  {"use":"%68 = add i64 %62, %48",
                   "value":"%48 = mul i64 %47, %11"},
                  {"use":"%72 = add i64 %62, %50",
                   "value":"%50 = mul i64 %49, %11"},
                  {"use":"%76 = add i64 %62, %52",
                   "value":"%52 = mul i64 %51, %11"},
                  {"use":"%81 = add i64 %62, %54",
                   "value":"%54 = mul i64 %53, %11"},
                  {"use":"%84 = add i64 %62, %56",
                   "value":"%56 = mul i64 %55, %11"},
                  {"use":"%88 = add i64 %62, %58",
                   "value":"%58 = mul i64 %57, %11"},
                  {"use":"%92 = add i64 %62, %60",
                   "value":"%60 = mul i64 %59, %11"}]},
 "end":"br i1 %41, label %42, label %30",
 "iterator":
 ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
  "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
  "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
 "loop":
 [{"begin":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
   "body":{"begin":"%34 = add nsw i64 %31, -1",
           "end":"br i1 %41, label %42, label %30",
           "precursor":"br i1 %32, label %33, label %139",
           "successor":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
   "comparison":"%32 = icmp slt i64 %31, %27",
   "end":"br i1 %32, label %33, label %139",
   "increment":"%35 = add nuw nsw i64 %31, 1",
   "iter_begin":"i64 1",
   "iter_end":"%27 = sext i32 %19 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %30",
   "successor":"%140 = load i1, i1* @timeron, align 4"},
  {"begin":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
   "body":{"begin":"%43 = add nsw i64 %40, -1",
           "end":"br i1 %103, label %104, label %39",
           "precursor":"br i1 %41, label %42, label %30",
           "successor":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
   "comparison":"%41 = icmp slt i64 %40, %26",
   "end":"br i1 %41, label %42, label %30",
   "increment":"%44 = add nuw nsw i64 %40, 1",
   "iter_begin":"i64 1",
   "iter_end":"%26 = sext i32 %20 to i64",
   "iter_step":"i64 1",
   "iterator":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
   "post_sese":{"begin":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
                "end":"br i1 %41, label %42, label %30",
                "precursor":"br i1 %41, label %42, label %30",
                "successor":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
   "pre_sese":{"begin":"%34 = add nsw i64 %31, -1",
               "end":"br label %39",
               "precursor":"br i1 %32, label %33, label %139",
               "successor":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
   "precursor":"br label %39",
   "successor":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
  {"begin":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
   "body":{"begin":"%65 = add i64 %62, %46",
           "end":"br label %61",
           "precursor":"br i1 %63, label %64, label %98",
           "successor":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"},
   "comparison":"%63 = icmp slt i64 %62, %24",
   "end":"br i1 %63, label %64, label %98",
   "increment":"%97 = add nuw nsw i64 %62, 1",
   "iter_begin":"i64 0",
   "iter_end":"%24 = sext i32 %2 to i64",
   "iter_step":"i64 1",
   "iterator":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
   "post_sese":{"begin":"%99 = add i64 %36, %40",
                "end":"br i1 %103, label %104, label %39",
                "precursor":"br i1 %63, label %64, label %98",
                "successor":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
   "pre_sese":{"begin":"%43 = add nsw i64 %40, -1",
               "end":"br label %61",
               "precursor":"br i1 %41, label %42, label %30",
               "successor":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"},
   "precursor":"br label %61",
   "successor":"%99 = add i64 %36, %40"}],
 "precursor":"br i1 %32, label %33, label %139",
 "reads":
 [{"address":"%66 = getelementptr double, double* %12, i64 %65",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%66 = getelementptr double, double* %12, i64 %65",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%36 = mul i64 %31, %10",
             "value":"%45 = add i64 %36, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%46 = mul i64 %45, %11",
             "value":"%65 = add i64 %62, %46"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%65 = add i64 %62, %46",
                         "value":"%65 = add i64 %62, %46"},
           "output_index":"%65 = add i64 %62, %46",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%45 = add i64 %36, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%46 = mul i64 %45, %11"},
            {"input":"%65 = add i64 %62, %46",
             "value":"%65 = add i64 %62, %46"}]},
   "value":"%67 = load double, double* %66, align 8, !tbaa !9"},
  {"address":"%69 = getelementptr double, double* %12, i64 %68",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%69 = getelementptr double, double* %12, i64 %68",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%36 = mul i64 %31, %10",
             "value":"%47 = add i64 %36, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%48 = mul i64 %47, %11",
             "value":"%68 = add i64 %62, %48"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%68 = add i64 %62, %48",
                         "value":"%68 = add i64 %62, %48"},
           "output_index":"%68 = add i64 %62, %48",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%47 = add i64 %36, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%48 = mul i64 %47, %11"},
            {"input":"%68 = add i64 %62, %48",
             "value":"%68 = add i64 %62, %48"}]},
   "value":"%70 = load double, double* %69, align 8, !tbaa !9"},
  {"address":"%73 = getelementptr double, double* %12, i64 %72",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%73 = getelementptr double, double* %12, i64 %72",
           "base_index":"i64 -1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%37 = mul i64 %34, %10",
             "value":"%49 = add i64 %37, %40"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%50 = mul i64 %49, %11",
             "value":"%72 = add i64 %62, %50"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%72 = add i64 %62, %50",
                         "value":"%72 = add i64 %62, %50"},
           "output_index":"%72 = add i64 %62, %50",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%49 = add i64 %37, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%50 = mul i64 %49, %11"},
            {"input":"%72 = add i64 %62, %50",
             "value":"%72 = add i64 %62, %50"}]},
   "value":"%74 = load double, double* %73, align 8, !tbaa !9"},
  {"address":"%73 = getelementptr double, double* %12, i64 %72",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%34 = add nsw i64 %31, -1"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%73 = getelementptr double, double* %12, i64 %72",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%34 = add nsw i64 %31, -1",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%37 = mul i64 %34, %10",
             "value":"%49 = add i64 %37, %40"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%50 = mul i64 %49, %11",
             "value":"%72 = add i64 %62, %50"}],
           "input_index":
           ["%34 = add nsw i64 %31, -1",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%72 = add i64 %62, %50",
                         "value":"%72 = add i64 %62, %50"},
           "output_index":"%72 = add i64 %62, %50",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%49 = add i64 %37, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%50 = mul i64 %49, %11"},
            {"input":"%72 = add i64 %62, %50",
             "value":"%72 = add i64 %62, %50"}]},
   "value":"%74 = load double, double* %73, align 8, !tbaa !9"},
  {"address":"%77 = getelementptr double, double* %12, i64 %76",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%77 = getelementptr double, double* %12, i64 %76",
           "base_index":"i64 1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%38 = mul i64 %35, %10",
             "value":"%51 = add i64 %38, %40"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%52 = mul i64 %51, %11",
             "value":"%76 = add i64 %62, %52"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%76 = add i64 %62, %52",
                         "value":"%76 = add i64 %62, %52"},
           "output_index":"%76 = add i64 %62, %52",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%51 = add i64 %38, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%52 = mul i64 %51, %11"},
            {"input":"%76 = add i64 %62, %52",
             "value":"%76 = add i64 %62, %52"}]},
   "value":"%78 = load double, double* %77, align 8, !tbaa !9"},
  {"address":"%77 = getelementptr double, double* %12, i64 %76",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%35 = add nuw nsw i64 %31, 1"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%77 = getelementptr double, double* %12, i64 %76",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%38 = mul i64 %35, %10",
             "value":"%51 = add i64 %38, %40"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%52 = mul i64 %51, %11",
             "value":"%76 = add i64 %62, %52"}],
           "input_index":
           ["%35 = add nuw nsw i64 %31, 1",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%76 = add i64 %62, %52",
                         "value":"%76 = add i64 %62, %52"},
           "output_index":"%76 = add i64 %62, %52",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%51 = add i64 %38, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%52 = mul i64 %51, %11"},
            {"input":"%76 = add i64 %62, %52",
             "value":"%76 = add i64 %62, %52"}]},
   "value":"%78 = load double, double* %77, align 8, !tbaa !9"},
  {"address":"%82 = getelementptr double, double* %12, i64 %81",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%82 = getelementptr double, double* %12, i64 %81",
           "base_index":"i64 -1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%37 = mul i64 %34, %10",
             "value":"%53 = add i64 %37, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%54 = mul i64 %53, %11",
             "value":"%81 = add i64 %62, %54"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%81 = add i64 %62, %54",
                         "value":"%81 = add i64 %62, %54"},
           "output_index":"%81 = add i64 %62, %54",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%53 = add i64 %37, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%54 = mul i64 %53, %11"},
            {"input":"%81 = add i64 %62, %54",
             "value":"%81 = add i64 %62, %54"}]},
   "value":"%83 = load double, double* %82, align 8, !tbaa !9"},
  {"address":"%82 = getelementptr double, double* %12, i64 %81",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%34 = add nsw i64 %31, -1"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%82 = getelementptr double, double* %12, i64 %81",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%34 = add nsw i64 %31, -1",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%37 = mul i64 %34, %10",
             "value":"%53 = add i64 %37, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%54 = mul i64 %53, %11",
             "value":"%81 = add i64 %62, %54"}],
           "input_index":
           ["%34 = add nsw i64 %31, -1",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%81 = add i64 %62, %54",
                         "value":"%81 = add i64 %62, %54"},
           "output_index":"%81 = add i64 %62, %54",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%53 = add i64 %37, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%54 = mul i64 %53, %11"},
            {"input":"%81 = add i64 %62, %54",
             "value":"%81 = add i64 %62, %54"}]},
   "value":"%83 = load double, double* %82, align 8, !tbaa !9"},
  {"address":"%85 = getelementptr double, double* %12, i64 %84",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%85 = getelementptr double, double* %12, i64 %84",
           "base_index":"i64 -1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 -1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%37 = mul i64 %34, %10",
             "value":"%55 = add i64 %37, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%56 = mul i64 %55, %11",
             "value":"%84 = add i64 %62, %56"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%84 = add i64 %62, %56",
                         "value":"%84 = add i64 %62, %56"},
           "output_index":"%84 = add i64 %62, %56",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%55 = add i64 %37, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%56 = mul i64 %55, %11"},
            {"input":"%84 = add i64 %62, %56",
             "value":"%84 = add i64 %62, %56"}]},
   "value":"%86 = load double, double* %85, align 8, !tbaa !9"},
  {"address":"%85 = getelementptr double, double* %12, i64 %84",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 -1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%34 = add nsw i64 %31, -1"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%85 = getelementptr double, double* %12, i64 %84",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%34 = add nsw i64 %31, -1",
             "value":"%34 = add nsw i64 %31, -1"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%37 = mul i64 %34, %10",
             "value":"%55 = add i64 %37, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%56 = mul i64 %55, %11",
             "value":"%84 = add i64 %62, %56"}],
           "input_index":
           ["%34 = add nsw i64 %31, -1",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%84 = add i64 %62, %56",
                         "value":"%84 = add i64 %62, %56"},
           "output_index":"%84 = add i64 %62, %56",
           "stride_mul":
           [{"input":"%34 = add nsw i64 %31, -1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%37 = mul i64 %34, %10"},
            {"input":"%55 = add i64 %37, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%56 = mul i64 %55, %11"},
            {"input":"%84 = add i64 %62, %56",
             "value":"%84 = add i64 %62, %56"}]},
   "value":"%86 = load double, double* %85, align 8, !tbaa !9"},
  {"address":"%89 = getelementptr double, double* %12, i64 %88",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%89 = getelementptr double, double* %12, i64 %88",
           "base_index":"i64 1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%38 = mul i64 %35, %10",
             "value":"%57 = add i64 %38, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%58 = mul i64 %57, %11",
             "value":"%88 = add i64 %62, %58"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%88 = add i64 %62, %58",
                         "value":"%88 = add i64 %62, %58"},
           "output_index":"%88 = add i64 %62, %58",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%57 = add i64 %38, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%58 = mul i64 %57, %11"},
            {"input":"%88 = add i64 %62, %58",
             "value":"%88 = add i64 %62, %58"}]},
   "value":"%90 = load double, double* %89, align 8, !tbaa !9"},
  {"address":"%89 = getelementptr double, double* %12, i64 %88",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%35 = add nuw nsw i64 %31, 1"},
    {"addend":"i64 -1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%43 = add nsw i64 %40, -1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%89 = getelementptr double, double* %12, i64 %88",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%43 = add nsw i64 %40, -1",
             "input":"%38 = mul i64 %35, %10",
             "value":"%57 = add i64 %38, %43"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%58 = mul i64 %57, %11",
             "value":"%88 = add i64 %62, %58"}],
           "input_index":
           ["%35 = add nuw nsw i64 %31, 1",
            "%43 = add nsw i64 %40, -1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%88 = add i64 %62, %58",
                         "value":"%88 = add i64 %62, %58"},
           "output_index":"%88 = add i64 %62, %58",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%57 = add i64 %38, %43",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%58 = mul i64 %57, %11"},
            {"input":"%88 = add i64 %62, %58",
             "value":"%88 = add i64 %62, %58"}]},
   "value":"%90 = load double, double* %89, align 8, !tbaa !9"},
  {"address":"%93 = getelementptr double, double* %12, i64 %92",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%93 = getelementptr double, double* %12, i64 %92",
           "base_index":"i64 1",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"addend":"i64 1",
             "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%38 = mul i64 %35, %10",
             "value":"%59 = add i64 %38, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%60 = mul i64 %59, %11",
             "value":"%92 = add i64 %62, %60"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%92 = add i64 %62, %60",
                         "value":"%92 = add i64 %62, %60"},
           "output_index":"%92 = add i64 %62, %60",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%59 = add i64 %38, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%60 = mul i64 %59, %11"},
            {"input":"%92 = add i64 %62, %60",
             "value":"%92 = add i64 %62, %60"}]},
   "value":"%94 = load double, double* %93, align 8, !tbaa !9"},
  {"address":"%93 = getelementptr double, double* %12, i64 %92",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"addend":"i64 1",
     "input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%35 = add nuw nsw i64 %31, 1"},
    {"addend":"i64 1",
     "input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%44 = add nuw nsw i64 %40, 1"},
    {"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
     "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
   "read":{"address":"%93 = getelementptr double, double* %12, i64 %92",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "value":"%35 = add nuw nsw i64 %31, 1"},
            {"addend":"%44 = add nuw nsw i64 %40, 1",
             "input":"%38 = mul i64 %35, %10",
             "value":"%59 = add i64 %38, %44"},
            {"addend":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
             "input":"%60 = mul i64 %59, %11",
             "value":"%92 = add i64 %62, %60"}],
           "input_index":
           ["%35 = add nuw nsw i64 %31, 1",
            "%44 = add nuw nsw i64 %40, 1",
            "%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
           "offset_add":{"input":"%92 = add i64 %62, %60",
                         "value":"%92 = add i64 %62, %60"},
           "output_index":"%92 = add i64 %62, %60",
           "stride_mul":
           [{"input":"%35 = add nuw nsw i64 %31, 1",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%38 = mul i64 %35, %10"},
            {"input":"%59 = add i64 %38, %44",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%60 = mul i64 %59, %11"},
            {"input":"%92 = add i64 %62, %60",
             "value":"%92 = add i64 %62, %60"}]},
   "value":"%94 = load double, double* %93, align 8, !tbaa !9"}],
 "stencil_expr":{"input":
                 ["%107 = load double, double* %106, align 8, !tbaa !9",
                  "%110 = load double, double* %109, align 8, !tbaa !9",
                  "%117 = load double, double* %116, align 8, !tbaa !9",
                  "%121 = load double, double* %120, align 8, !tbaa !9",
                  "%130 = load double, double* %129, align 8, !tbaa !9"],
                 "output":"%138 = fadd double %127, %137"},
 "stencil_loop":{"begin":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                 "body":{"begin":"%105 = add i64 %102, %100",
                         "end":"br label %101",
                         "precursor":"br i1 %103, label %104, label %39",
                         "successor":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"},
                 "comparison":"%103 = icmp slt i64 %102, %25",
                 "end":"br i1 %103, label %104, label %39",
                 "increment":"%118 = add nuw nsw i64 %102, 1",
                 "iter_begin":"i64 1",
                 "iter_end":"%25 = sext i32 %21 to i64",
                 "iter_step":"i64 1",
                 "iterator":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                 "precursor":"br label %101",
                 "successor":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
 "stencil_reads":
 [{"address":"%106 = getelementptr double, double* %13, i64 %105",
   "base_pointer":"%13 = bitcast i8* %1 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%106 = getelementptr double, double* %13, i64 %105",
           "base_pointer":"%13 = bitcast i8* %1 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%36 = mul i64 %31, %10",
             "value":"%99 = add i64 %36, %40"},
            {"addend":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "input":"%100 = mul i64 %99, %11",
             "value":"%105 = add i64 %102, %100"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"input":"%105 = add i64 %102, %100",
                         "value":"%105 = add i64 %102, %100"},
           "output_index":"%105 = add i64 %102, %100",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%99 = add i64 %36, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%100 = mul i64 %99, %11"},
            {"input":"%105 = add i64 %102, %100",
             "value":"%105 = add i64 %102, %100"}]},
   "value":"%107 = load double, double* %106, align 8, !tbaa !9"},
  {"address":"%109 = getelementptr double, double* %12, i64 %105",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%109 = getelementptr double, double* %12, i64 %105",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%36 = mul i64 %31, %10",
             "value":"%99 = add i64 %36, %40"},
            {"addend":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "input":"%100 = mul i64 %99, %11",
             "value":"%105 = add i64 %102, %100"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"input":"%105 = add i64 %102, %100",
                         "value":"%105 = add i64 %102, %100"},
           "output_index":"%105 = add i64 %102, %100",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%99 = add i64 %36, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%100 = mul i64 %99, %11"},
            {"input":"%105 = add i64 %102, %100",
             "value":"%105 = add i64 %102, %100"}]},
   "value":"%110 = load double, double* %109, align 8, !tbaa !9"},
  {"address":"%116 = getelementptr double, double* %12, i64 %115",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"addend":"i64 -1",
     "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%114 = add nsw i64 %102, -1"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%116 = getelementptr double, double* %12, i64 %115",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%36 = mul i64 %31, %10",
             "value":"%99 = add i64 %36, %40"},
            {"addend":"%114 = add nsw i64 %102, -1",
             "input":"%100 = mul i64 %99, %11",
             "value":"%115 = add i64 %114, %100"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%114 = add nsw i64 %102, -1"],
           "offset_add":{"input":"%115 = add i64 %114, %100",
                         "value":"%115 = add i64 %114, %100"},
           "output_index":"%115 = add i64 %114, %100",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%99 = add i64 %36, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%100 = mul i64 %99, %11"},
            {"input":"%115 = add i64 %114, %100",
             "value":"%115 = add i64 %114, %100"}]},
   "value":"%117 = load double, double* %116, align 8, !tbaa !9"},
  {"address":"%120 = getelementptr double, double* %12, i64 %119",
   "base_pointer":"%12 = bitcast i8* %0 to double*",
   "index":
   [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
     "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
    {"input":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
     "value":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]"},
    {"addend":"i64 1",
     "input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%118 = add nuw nsw i64 %102, 1"}],
   "input_index":
   ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
    "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
    "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%120 = getelementptr double, double* %12, i64 %119",
           "base_pointer":"%12 = bitcast i8* %0 to double*",
           "index_add":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
            {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
             "input":"%36 = mul i64 %31, %10",
             "value":"%99 = add i64 %36, %40"},
            {"addend":"%118 = add nuw nsw i64 %102, 1",
             "input":"%100 = mul i64 %99, %11",
             "value":"%119 = add i64 %118, %100"}],
           "input_index":
           ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
            "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
            "%118 = add nuw nsw i64 %102, 1"],
           "offset_add":{"input":"%119 = add i64 %118, %100",
                         "value":"%119 = add i64 %118, %100"},
           "output_index":"%119 = add i64 %118, %100",
           "stride_mul":
           [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
             "multiplier":"%10 = zext i32 %3 to i64",
             "value":"%36 = mul i64 %31, %10"},
            {"input":"%99 = add i64 %36, %40",
             "multiplier":"%11 = zext i32 %2 to i64",
             "value":"%100 = mul i64 %99, %11"},
            {"input":"%119 = add i64 %118, %100",
             "value":"%119 = add i64 %118, %100"}]},
   "value":"%121 = load double, double* %120, align 8, !tbaa !9"}],
 "stencil_write":{"address":"%106 = getelementptr double, double* %13, i64 %105",
                  "base_pointer":"%13 = bitcast i8* %1 to double*",
                  "index_add":
                  [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
                    "value":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]"},
                   {"addend":"%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
                    "input":"%36 = mul i64 %31, %10",
                    "value":"%99 = add i64 %36, %40"},
                   {"addend":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                    "input":"%100 = mul i64 %99, %11",
                    "value":"%105 = add i64 %102, %100"}],
                  "input_index":
                  ["%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
                   "%40 = phi i64 [ 1, %33 ], [ %44, %101 ]",
                   "%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
                  "offset_add":{"input":"%105 = add i64 %102, %100",
                                "value":"%105 = add i64 %102, %100"},
                  "output_index":"%105 = add i64 %102, %100",
                  "store":"store double %138, double* %106, align 8, !tbaa !9",
                  "stride_mul":
                  [{"input":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
                    "multiplier":"%10 = zext i32 %3 to i64",
                    "value":"%36 = mul i64 %31, %10"},
                   {"input":"%99 = add i64 %36, %40",
                    "multiplier":"%11 = zext i32 %2 to i64",
                    "value":"%100 = mul i64 %99, %11"},
                   {"input":"%105 = add i64 %102, %100",
                    "value":"%105 = add i64 %102, %100"}]},
 "successor":"%31 = phi i64 [ 1, %18 ], [ %35, %39 ]",
 "temp_reads":
 [{"address":"%129 = getelementptr double, double* %29, i64 %102",
   "base_pointer":"%29 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
   "index":
   [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
     "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
   "input_index":
   ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
   "read":{"address":"%129 = getelementptr double, double* %29, i64 %102",
           "base_pointer":"%29 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
           "index_add":
           [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}],
           "input_index":
           ["%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"],
           "offset_add":{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
                         "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"},
           "output_index":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
           "stride_mul":
           [{"input":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]",
             "value":"%102 = phi i64 [ %118, %104 ], [ 1, %98 ]"}]},
   "value":"%130 = load double, double* %129, align 8, !tbaa !9"}],
 "temp_write":{"address":"%96 = getelementptr double, double* %29, i64 %62",
               "base_pointer":"%29 = getelementptr [259 x double], [259 x double]* %9, i64 0, i64 0",
               "index_add":
               [{"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
                 "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}],
               "input_index":
               ["%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"],
               "offset_add":{"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
                             "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"},
               "output_index":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
               "store":"store double %95, double* %96, align 8, !tbaa !9",
               "stride_mul":
               [{"input":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]",
                 "value":"%62 = phi i64 [ %97, %64 ], [ 0, %42 ]"}]}}
END stenpls
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION interp
BEGIN LOOP
BEGIN scalar
{"begin":"%304 = phi i64 [ %372, %371 ], [ 1, %248 ]",
 "body":{"begin":"%308 = shl nsw i32 %305, 1",
         "end":"br label %303",
         "precursor":"br i1 %306, label %307, label %374",
         "successor":"%304 = phi i64 [ %372, %371 ], [ 1, %248 ]"},
 "comparison":"%306 = icmp slt i64 %304, %234",
 "end":"br i1 %306, label %307, label %374",
 "increment":"%372 = add nuw nsw i64 %304, 1",
 "iter_begin":"i64 1",
 "iter_end":"%234 = sext i32 %2 to i64",
 "iter_step":"i64 1",
 "iterator":"%304 = phi i64 [ %372, %371 ], [ 1, %248 ]",
 "kernel":{"constants":
           [{"use":"%315 = mul i64 %314, %14",
             "value":"%14 = zext i32 %1 to i64"},
            {"use":"%317 = mul i64 %316, %14",
             "value":"%14 = zext i32 %1 to i64"},
            {"use":"%331 = getelementptr double, double* %15, i64 %330",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%334 = getelementptr double, double* %15, i64 %333",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%352 = getelementptr double, double* %15, i64 %351",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%355 = getelementptr double, double* %15, i64 %354",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%360 = getelementptr double, double* %15, i64 %359",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%364 = getelementptr double, double* %15, i64 %363",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%313 = mul i64 %312, %17",
             "value":"%17 = zext i32 %5 to i64"},
            {"use":"%327 = getelementptr double, double* %18, i64 %326",
             "value":"%18 = bitcast i8* %4 to double*"},
            {"use":"%349 = getelementptr double, double* %18, i64 %348",
             "value":"%18 = bitcast i8* %4 to double*"},
            {"use":"%324 = add i32 %323, %228",
             "value":"%228 = xor i32 %219, -1"},
            {"use":"%346 = add i32 %229, %345",
             "value":"%229 = add nsw i32 %220, -1"},
            {"use":"%309 = add i32 %230, %308",
             "value":"%230 = add nsw i32 %223, -1"},
            {"use":"%319 = phi i64 [ %339, %321 ], [ %231, %307 ]",
             "value":"%231 = zext i32 %219 to i64"},
            {"use":"%320 = icmp slt i64 %319, %232",
             "value":"%232 = sext i32 %1 to i64"},
            {"use":"%343 = icmp slt i64 %341, %232",
             "value":"%232 = sext i32 %1 to i64"},
            {"use":"%312 = add i64 %246, %310",
             "value":"%246 = mul i64 %244, %16"},
            {"use":"%314 = add i64 %247, %304",
             "value":"%247 = mul i64 %245, %13"},
            {"use":"%316 = add i64 %247, %311",
             "value":"%247 = mul i64 %245, %13"}],
           "input":
           ["%305 = phi i32 [ %373, %371 ], [ 1, %248 ]"],
           "origin":
           ["br i1 %306, label %307, label %374"],
           "output":"%373 = add nuw nsw i32 %305, 1",
           "restrictions":
           [{"use":"%311 = add nsw i64 %304, -1",
             "value":"%304 = phi i64 [ %372, %371 ], [ 1, %248 ]"},
            {"use":"%314 = add i64 %247, %304",
             "value":"%304 = phi i64 [ %372, %371 ], [ 1, %248 ]"},
            {"use":"%372 = add nuw nsw i64 %304, 1",
             "value":"%304 = phi i64 [ %372, %371 ], [ 1, %248 ]"},
            {"use":"%308 = shl nsw i32 %305, 1",
             "value":"%305 = phi i32 [ %373, %371 ], [ 1, %248 ]"},
            {"use":"%373 = add nuw nsw i32 %305, 1",
             "value":"%305 = phi i32 [ %373, %371 ], [ 1, %248 ]"}]},
 "old_value":"%305 = phi i32 [ %373, %371 ], [ 1, %248 ]",
 "precursor":"br i1 %250, label %251, label %303",
 "successor":"%375 = add nuw nsw i64 %238, 1"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  long t1;
  int t2;
  long t0 = /* missing closure */;
label1:
  t1 = 1;
  t2 = 1;
  if(t0</* missing closure */){
  t0 += 1;
  goto label1;
  }
label3:
  if(t1</* missing closure */){
  t1 += 1;
  t2 += 1;
  goto label3;
  }
  in0->_0 += 1;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]",
 "body":{"begin":"%283 = shl nsw i32 %280, 1",
         "end":"br label %278",
         "precursor":"br i1 %281, label %282, label %301",
         "successor":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]"},
 "comparison":"%281 = icmp slt i64 %279, %232",
 "end":"br i1 %281, label %282, label %301",
 "increment":"%299 = add nuw nsw i64 %279, 1",
 "iter_begin":"i64 1",
 "iter_end":"%232 = sext i32 %1 to i64",
 "iter_step":"i64 1",
 "iterator":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]",
 "kernel":{"constants":
           [{"use":"%290 = getelementptr double, double* %15, i64 %289",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%294 = getelementptr double, double* %15, i64 %293",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%287 = getelementptr double, double* %18, i64 %286",
             "value":"%18 = bitcast i8* %4 to double*"},
            {"use":"%284 = add i32 %229, %283",
             "value":"%229 = add nsw i32 %220, -1"},
            {"use":"%286 = add i64 %285, %258",
             "value":"%258 = mul i64 %257, %17"},
            {"use":"%289 = add i64 %279, %260",
             "value":"%260 = mul i64 %259, %14"},
            {"use":"%293 = add i64 %292, %260",
             "value":"%260 = mul i64 %259, %14"}],
           "input":
           ["%291 = load double, double* %290, align 8, !tbaa !9",
            "%291 = load double, double* %290, align 8, !tbaa !9",
            "%295 = load double, double* %294, align 8, !tbaa !9",
            "%280 = phi i32 [ %300, %282 ], [ 1, %261 ]"],
           "origin":
           ["br i1 %281, label %282, label %301"],
           "output":"%300 = add nuw nsw i32 %280, 1",
           "restrictions":
           [{"use":"%289 = add i64 %279, %260",
             "value":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]"},
            {"use":"%292 = add nsw i64 %279, -1",
             "value":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]"},
            {"use":"%299 = add nuw nsw i64 %279, 1",
             "value":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]"},
            {"use":"%283 = shl nsw i32 %280, 1",
             "value":"%280 = phi i32 [ %300, %282 ], [ 1, %261 ]"},
            {"use":"%300 = add nuw nsw i32 %280, 1",
             "value":"%280 = phi i32 [ %300, %282 ], [ 1, %261 ]"}]},
 "old_value":"%280 = phi i32 [ %300, %282 ], [ 1, %261 ]",
 "precursor":"br i1 %263, label %264, label %278",
 "read":
 [{"address":"%290 = getelementptr double, double* %15, i64 %289",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]",
     "value":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]"}],
   "input_index":
   ["%279 = phi i64 [ %299, %282 ], [ 1, %261 ]"],
   "offset_add":{"addend":"%260 = mul i64 %259, %14",
                 "input":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]",
                 "value":"%289 = add i64 %279, %260"},
   "output_index":"%289 = add i64 %279, %260",
   "stride_mul":
   [{"input":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]",
     "value":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]"}]},
  {"address":"%290 = getelementptr double, double* %15, i64 %289",
   "base_index":"%260 = mul i64 %259, %14",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%260 = mul i64 %259, %14",
     "input":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]",
     "value":"%289 = add i64 %279, %260"}],
   "input_index":
   ["%279 = phi i64 [ %299, %282 ], [ 1, %261 ]"],
   "offset_add":{"input":"%289 = add i64 %279, %260",
                 "value":"%289 = add i64 %279, %260"},
   "output_index":"%289 = add i64 %279, %260",
   "stride_mul":
   [{"input":"%289 = add i64 %279, %260",
     "value":"%289 = add i64 %279, %260"}]},
  {"address":"%294 = getelementptr double, double* %15, i64 %293",
   "base_index":"i64 -1",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%279 = phi i64 [ %299, %282 ], [ 1, %261 ]",
     "value":"%292 = add nsw i64 %279, -1"}],
   "input_index":
   ["%279 = phi i64 [ %299, %282 ], [ 1, %261 ]"],
   "offset_add":{"addend":"%260 = mul i64 %259, %14",
                 "input":"%292 = add nsw i64 %279, -1",
                 "value":"%293 = add i64 %292, %260"},
   "output_index":"%293 = add i64 %292, %260",
   "stride_mul":
   [{"input":"%292 = add nsw i64 %279, -1",
     "value":"%292 = add nsw i64 %279, -1"}]}],
 "read_value":
 ["%291 = load double, double* %290, align 8, !tbaa !9",
  "%291 = load double, double* %290, align 8, !tbaa !9",
  "%295 = load double, double* %294, align 8, !tbaa !9"],
 "successor":"%302 = add nuw nsw i64 %249, 1"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0, double in1, double in2)
{
  in0->_0 += 1;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
 "body":{"begin":"%345 = shl nsw i32 %342, 1",
         "end":"br label %340",
         "precursor":"br i1 %343, label %344, label %371",
         "successor":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"},
 "comparison":"%343 = icmp slt i64 %341, %232",
 "end":"br i1 %343, label %344, label %371",
 "increment":"%369 = add nuw nsw i64 %341, 1",
 "iter_begin":"i64 1",
 "iter_end":"%232 = sext i32 %1 to i64",
 "iter_step":"i64 1",
 "iterator":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
 "kernel":{"constants":
           [{"use":"%352 = getelementptr double, double* %15, i64 %351",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%355 = getelementptr double, double* %15, i64 %354",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%360 = getelementptr double, double* %15, i64 %359",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%364 = getelementptr double, double* %15, i64 %363",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%349 = getelementptr double, double* %18, i64 %348",
             "value":"%18 = bitcast i8* %4 to double*"},
            {"use":"%346 = add i32 %229, %345",
             "value":"%229 = add nsw i32 %220, -1"},
            {"use":"%348 = add i64 %347, %313",
             "value":"%313 = mul i64 %312, %17"},
            {"use":"%351 = add i64 %341, %315",
             "value":"%315 = mul i64 %314, %14"},
            {"use":"%359 = add i64 %358, %315",
             "value":"%315 = mul i64 %314, %14"},
            {"use":"%354 = add i64 %341, %317",
             "value":"%317 = mul i64 %316, %14"},
            {"use":"%363 = add i64 %358, %317",
             "value":"%317 = mul i64 %316, %14"}],
           "input":
           ["%353 = load double, double* %352, align 8, !tbaa !9",
            "%353 = load double, double* %352, align 8, !tbaa !9",
            "%356 = load double, double* %355, align 8, !tbaa !9",
            "%356 = load double, double* %355, align 8, !tbaa !9",
            "%361 = load double, double* %360, align 8, !tbaa !9",
            "%365 = load double, double* %364, align 8, !tbaa !9",
            "%342 = phi i32 [ %370, %344 ], [ 1, %318 ]"],
           "origin":
           ["br i1 %343, label %344, label %371"],
           "output":"%370 = add nuw nsw i32 %342, 1",
           "restrictions":
           [{"use":"%351 = add i64 %341, %315",
             "value":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"},
            {"use":"%354 = add i64 %341, %317",
             "value":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"},
            {"use":"%358 = add nsw i64 %341, -1",
             "value":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"},
            {"use":"%369 = add nuw nsw i64 %341, 1",
             "value":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"},
            {"use":"%345 = shl nsw i32 %342, 1",
             "value":"%342 = phi i32 [ %370, %344 ], [ 1, %318 ]"},
            {"use":"%370 = add nuw nsw i32 %342, 1",
             "value":"%342 = phi i32 [ %370, %344 ], [ 1, %318 ]"}]},
 "old_value":"%342 = phi i32 [ %370, %344 ], [ 1, %318 ]",
 "precursor":"br i1 %320, label %321, label %340",
 "read":
 [{"address":"%352 = getelementptr double, double* %15, i64 %351",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
     "value":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"}],
   "input_index":
   ["%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"],
   "offset_add":{"addend":"%315 = mul i64 %314, %14",
                 "input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
                 "value":"%351 = add i64 %341, %315"},
   "output_index":"%351 = add i64 %341, %315",
   "stride_mul":
   [{"input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
     "value":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"}]},
  {"address":"%352 = getelementptr double, double* %15, i64 %351",
   "base_index":"%315 = mul i64 %314, %14",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%315 = mul i64 %314, %14",
     "input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
     "value":"%351 = add i64 %341, %315"}],
   "input_index":
   ["%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"],
   "offset_add":{"input":"%351 = add i64 %341, %315",
                 "value":"%351 = add i64 %341, %315"},
   "output_index":"%351 = add i64 %341, %315",
   "stride_mul":
   [{"input":"%351 = add i64 %341, %315",
     "value":"%351 = add i64 %341, %315"}]},
  {"address":"%355 = getelementptr double, double* %15, i64 %354",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
     "value":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"}],
   "input_index":
   ["%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"],
   "offset_add":{"addend":"%317 = mul i64 %316, %14",
                 "input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
                 "value":"%354 = add i64 %341, %317"},
   "output_index":"%354 = add i64 %341, %317",
   "stride_mul":
   [{"input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
     "value":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"}]},
  {"address":"%355 = getelementptr double, double* %15, i64 %354",
   "base_index":"%317 = mul i64 %316, %14",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%317 = mul i64 %316, %14",
     "input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
     "value":"%354 = add i64 %341, %317"}],
   "input_index":
   ["%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"],
   "offset_add":{"input":"%354 = add i64 %341, %317",
                 "value":"%354 = add i64 %341, %317"},
   "output_index":"%354 = add i64 %341, %317",
   "stride_mul":
   [{"input":"%354 = add i64 %341, %317",
     "value":"%354 = add i64 %341, %317"}]},
  {"address":"%360 = getelementptr double, double* %15, i64 %359",
   "base_index":"i64 -1",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
     "value":"%358 = add nsw i64 %341, -1"}],
   "input_index":
   ["%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"],
   "offset_add":{"addend":"%315 = mul i64 %314, %14",
                 "input":"%358 = add nsw i64 %341, -1",
                 "value":"%359 = add i64 %358, %315"},
   "output_index":"%359 = add i64 %358, %315",
   "stride_mul":
   [{"input":"%358 = add nsw i64 %341, -1",
     "value":"%358 = add nsw i64 %341, -1"}]},
  {"address":"%364 = getelementptr double, double* %15, i64 %363",
   "base_index":"i64 -1",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%341 = phi i64 [ %369, %344 ], [ 1, %318 ]",
     "value":"%358 = add nsw i64 %341, -1"}],
   "input_index":
   ["%341 = phi i64 [ %369, %344 ], [ 1, %318 ]"],
   "offset_add":{"addend":"%317 = mul i64 %316, %14",
                 "input":"%358 = add nsw i64 %341, -1",
                 "value":"%363 = add i64 %358, %317"},
   "output_index":"%363 = add i64 %358, %317",
   "stride_mul":
   [{"input":"%358 = add nsw i64 %341, -1",
     "value":"%358 = add nsw i64 %341, -1"}]}],
 "read_value":
 ["%353 = load double, double* %352, align 8, !tbaa !9",
  "%353 = load double, double* %352, align 8, !tbaa !9",
  "%356 = load double, double* %355, align 8, !tbaa !9",
  "%356 = load double, double* %355, align 8, !tbaa !9",
  "%361 = load double, double* %360, align 8, !tbaa !9",
  "%365 = load double, double* %364, align 8, !tbaa !9"],
 "successor":"%372 = add nuw nsw i64 %304, 1"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0, double in1, double in2, double in3, double in4)
{
  in0->_0 += 1;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%462 = phi i64 [ %558, %557 ], [ 1, %391 ]",
 "body":{"begin":"%466 = shl nsw i32 %463, 1",
         "end":"br label %461",
         "precursor":"br i1 %464, label %465, label %560",
         "successor":"%462 = phi i64 [ %558, %557 ], [ 1, %391 ]"},
 "comparison":"%464 = icmp slt i64 %462, %234",
 "end":"br i1 %464, label %465, label %560",
 "increment":"%558 = add nuw nsw i64 %462, 1",
 "iter_begin":"i64 1",
 "iter_end":"%234 = sext i32 %2 to i64",
 "iter_step":"i64 1",
 "iterator":"%462 = phi i64 [ %558, %557 ], [ 1, %391 ]",
 "kernel":{"constants":
           [{"use":"%473 = mul i64 %472, %14",
             "value":"%14 = zext i32 %1 to i64"},
            {"use":"%475 = mul i64 %474, %14",
             "value":"%14 = zext i32 %1 to i64"},
            {"use":"%477 = mul i64 %476, %14",
             "value":"%14 = zext i32 %1 to i64"},
            {"use":"%479 = mul i64 %478, %14",
             "value":"%14 = zext i32 %1 to i64"},
            {"use":"%493 = getelementptr double, double* %15, i64 %492",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%496 = getelementptr double, double* %15, i64 %495",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%500 = getelementptr double, double* %15, i64 %499",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%504 = getelementptr double, double* %15, i64 %503",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%522 = getelementptr double, double* %15, i64 %521",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%525 = getelementptr double, double* %15, i64 %524",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%530 = getelementptr double, double* %15, i64 %529",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%534 = getelementptr double, double* %15, i64 %533",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%538 = getelementptr double, double* %15, i64 %537",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%542 = getelementptr double, double* %15, i64 %541",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%546 = getelementptr double, double* %15, i64 %545",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%550 = getelementptr double, double* %15, i64 %549",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%471 = mul i64 %470, %17",
             "value":"%17 = zext i32 %5 to i64"},
            {"use":"%489 = getelementptr double, double* %18, i64 %488",
             "value":"%18 = bitcast i8* %4 to double*"},
            {"use":"%519 = getelementptr double, double* %18, i64 %518",
             "value":"%18 = bitcast i8* %4 to double*"},
            {"use":"%486 = add i32 %485, %228",
             "value":"%228 = xor i32 %219, -1"},
            {"use":"%516 = add i32 %229, %515",
             "value":"%229 = add nsw i32 %220, -1"},
            {"use":"%467 = add i32 %230, %466",
             "value":"%230 = add nsw i32 %223, -1"},
            {"use":"%481 = phi i64 [ %509, %483 ], [ %231, %465 ]",
             "value":"%231 = zext i32 %219 to i64"},
            {"use":"%482 = icmp slt i64 %481, %232",
             "value":"%232 = sext i32 %1 to i64"}],
           "input":
           ["%463 = phi i32 [ %559, %557 ], [ 1, %391 ]"],
           "origin":
           ["br i1 %464, label %465, label %560"],
           "output":"%559 = add nuw nsw i32 %463, 1",
           "restrictions":
           [{"use":"%469 = add nsw i64 %462, -1",
             "value":"%462 = phi i64 [ %558, %557 ], [ 1, %391 ]"},
            {"use":"%472 = add i64 %389, %462",
             "value":"%462 = phi i64 [ %558, %557 ], [ 1, %391 ]"},
            {"use":"%476 = add i64 %390, %462",
             "value":"%462 = phi i64 [ %558, %557 ], [ 1, %391 ]"},
            {"use":"%558 = add nuw nsw i64 %462, 1",
             "value":"%462 = phi i64 [ %558, %557 ], [ 1, %391 ]"},
            {"use":"%466 = shl nsw i32 %463, 1",
             "value":"%463 = phi i32 [ %559, %557 ], [ 1, %391 ]"},
            {"use":"%559 = add nuw nsw i32 %463, 1",
             "value":"%463 = phi i32 [ %559, %557 ], [ 1, %391 ]"}]},
 "old_value":"%463 = phi i32 [ %559, %557 ], [ 1, %391 ]",
 "precursor":"br i1 %393, label %394, label %461",
 "successor":"%561 = add nuw nsw i64 %380, 1"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  long t1;
  int t2;
  long t0 = /* missing closure */;
label1:
  t1 = 1;
  t2 = 1;
  if(t0</* missing closure */){
  t0 += 1;
  goto label1;
  }
label3:
  if(t1</* missing closure */){
  t1 += 1;
  t2 += 1;
  goto label3;
  }
  in0->_0 += 1;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
 "body":{"begin":"%433 = shl nsw i32 %430, 1",
         "end":"br label %428",
         "precursor":"br i1 %431, label %432, label %459",
         "successor":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"},
 "comparison":"%431 = icmp slt i64 %429, %232",
 "end":"br i1 %431, label %432, label %459",
 "increment":"%457 = add nuw nsw i64 %429, 1",
 "iter_begin":"i64 1",
 "iter_end":"%232 = sext i32 %1 to i64",
 "iter_step":"i64 1",
 "iterator":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
 "kernel":{"constants":
           [{"use":"%440 = getelementptr double, double* %15, i64 %439",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%444 = getelementptr double, double* %15, i64 %443",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%448 = getelementptr double, double* %15, i64 %447",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%452 = getelementptr double, double* %15, i64 %451",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%437 = getelementptr double, double* %18, i64 %436",
             "value":"%18 = bitcast i8* %4 to double*"},
            {"use":"%434 = add i32 %229, %433",
             "value":"%229 = add nsw i32 %220, -1"},
            {"use":"%436 = add i64 %435, %401",
             "value":"%401 = mul i64 %400, %17"},
            {"use":"%439 = add i64 %429, %403",
             "value":"%403 = mul i64 %402, %14"},
            {"use":"%443 = add i64 %442, %403",
             "value":"%403 = mul i64 %402, %14"},
            {"use":"%447 = add i64 %429, %405",
             "value":"%405 = mul i64 %404, %14"},
            {"use":"%451 = add i64 %442, %405",
             "value":"%405 = mul i64 %404, %14"}],
           "input":
           ["%441 = load double, double* %440, align 8, !tbaa !9",
            "%441 = load double, double* %440, align 8, !tbaa !9",
            "%445 = load double, double* %444, align 8, !tbaa !9",
            "%449 = load double, double* %448, align 8, !tbaa !9",
            "%449 = load double, double* %448, align 8, !tbaa !9",
            "%453 = load double, double* %452, align 8, !tbaa !9",
            "%430 = phi i32 [ %458, %432 ], [ 1, %406 ]"],
           "origin":
           ["br i1 %431, label %432, label %459"],
           "output":"%458 = add nuw nsw i32 %430, 1",
           "restrictions":
           [{"use":"%439 = add i64 %429, %403",
             "value":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"},
            {"use":"%442 = add nsw i64 %429, -1",
             "value":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"},
            {"use":"%447 = add i64 %429, %405",
             "value":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"},
            {"use":"%457 = add nuw nsw i64 %429, 1",
             "value":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"},
            {"use":"%433 = shl nsw i32 %430, 1",
             "value":"%430 = phi i32 [ %458, %432 ], [ 1, %406 ]"},
            {"use":"%458 = add nuw nsw i32 %430, 1",
             "value":"%430 = phi i32 [ %458, %432 ], [ 1, %406 ]"}]},
 "old_value":"%430 = phi i32 [ %458, %432 ], [ 1, %406 ]",
 "precursor":"br i1 %408, label %409, label %428",
 "read":
 [{"address":"%440 = getelementptr double, double* %15, i64 %439",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
     "value":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"}],
   "input_index":
   ["%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"],
   "offset_add":{"addend":"%403 = mul i64 %402, %14",
                 "input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
                 "value":"%439 = add i64 %429, %403"},
   "output_index":"%439 = add i64 %429, %403",
   "stride_mul":
   [{"input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
     "value":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"}]},
  {"address":"%440 = getelementptr double, double* %15, i64 %439",
   "base_index":"%403 = mul i64 %402, %14",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%403 = mul i64 %402, %14",
     "input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
     "value":"%439 = add i64 %429, %403"}],
   "input_index":
   ["%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"],
   "offset_add":{"input":"%439 = add i64 %429, %403",
                 "value":"%439 = add i64 %429, %403"},
   "output_index":"%439 = add i64 %429, %403",
   "stride_mul":
   [{"input":"%439 = add i64 %429, %403",
     "value":"%439 = add i64 %429, %403"}]},
  {"address":"%444 = getelementptr double, double* %15, i64 %443",
   "base_index":"i64 -1",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
     "value":"%442 = add nsw i64 %429, -1"}],
   "input_index":
   ["%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"],
   "offset_add":{"addend":"%403 = mul i64 %402, %14",
                 "input":"%442 = add nsw i64 %429, -1",
                 "value":"%443 = add i64 %442, %403"},
   "output_index":"%443 = add i64 %442, %403",
   "stride_mul":
   [{"input":"%442 = add nsw i64 %429, -1",
     "value":"%442 = add nsw i64 %429, -1"}]},
  {"address":"%448 = getelementptr double, double* %15, i64 %447",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
     "value":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"}],
   "input_index":
   ["%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"],
   "offset_add":{"addend":"%405 = mul i64 %404, %14",
                 "input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
                 "value":"%447 = add i64 %429, %405"},
   "output_index":"%447 = add i64 %429, %405",
   "stride_mul":
   [{"input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
     "value":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"}]},
  {"address":"%448 = getelementptr double, double* %15, i64 %447",
   "base_index":"%405 = mul i64 %404, %14",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%405 = mul i64 %404, %14",
     "input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
     "value":"%447 = add i64 %429, %405"}],
   "input_index":
   ["%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"],
   "offset_add":{"input":"%447 = add i64 %429, %405",
                 "value":"%447 = add i64 %429, %405"},
   "output_index":"%447 = add i64 %429, %405",
   "stride_mul":
   [{"input":"%447 = add i64 %429, %405",
     "value":"%447 = add i64 %429, %405"}]},
  {"address":"%452 = getelementptr double, double* %15, i64 %451",
   "base_index":"i64 -1",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%429 = phi i64 [ %457, %432 ], [ 1, %406 ]",
     "value":"%442 = add nsw i64 %429, -1"}],
   "input_index":
   ["%429 = phi i64 [ %457, %432 ], [ 1, %406 ]"],
   "offset_add":{"addend":"%405 = mul i64 %404, %14",
                 "input":"%442 = add nsw i64 %429, -1",
                 "value":"%451 = add i64 %442, %405"},
   "output_index":"%451 = add i64 %442, %405",
   "stride_mul":
   [{"input":"%442 = add nsw i64 %429, -1",
     "value":"%442 = add nsw i64 %429, -1"}]}],
 "read_value":
 ["%441 = load double, double* %440, align 8, !tbaa !9",
  "%441 = load double, double* %440, align 8, !tbaa !9",
  "%445 = load double, double* %444, align 8, !tbaa !9",
  "%449 = load double, double* %448, align 8, !tbaa !9",
  "%449 = load double, double* %448, align 8, !tbaa !9",
  "%453 = load double, double* %452, align 8, !tbaa !9"],
 "successor":"%460 = add nuw nsw i64 %392, 1"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0, double in1, double in2, double in3, double in4)
{
  in0->_0 += 1;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
 "body":{"begin":"%515 = shl nsw i32 %512, 1",
         "end":"br label %510",
         "precursor":"br i1 %513, label %514, label %557",
         "successor":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"},
 "comparison":"%513 = icmp slt i64 %511, %232",
 "end":"br i1 %513, label %514, label %557",
 "increment":"%555 = add nuw nsw i64 %511, 1",
 "iter_begin":"i64 1",
 "iter_end":"%232 = sext i32 %1 to i64",
 "iter_step":"i64 1",
 "iterator":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
 "kernel":{"constants":
           [{"use":"%522 = getelementptr double, double* %15, i64 %521",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%525 = getelementptr double, double* %15, i64 %524",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%530 = getelementptr double, double* %15, i64 %529",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%534 = getelementptr double, double* %15, i64 %533",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%538 = getelementptr double, double* %15, i64 %537",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%542 = getelementptr double, double* %15, i64 %541",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%546 = getelementptr double, double* %15, i64 %545",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%550 = getelementptr double, double* %15, i64 %549",
             "value":"%15 = bitcast i8* %0 to double*"},
            {"use":"%519 = getelementptr double, double* %18, i64 %518",
             "value":"%18 = bitcast i8* %4 to double*"},
            {"use":"%516 = add i32 %229, %515",
             "value":"%229 = add nsw i32 %220, -1"},
            {"use":"%518 = add i64 %517, %471",
             "value":"%471 = mul i64 %470, %17"},
            {"use":"%521 = add i64 %511, %473",
             "value":"%473 = mul i64 %472, %14"},
            {"use":"%529 = add i64 %528, %473",
             "value":"%473 = mul i64 %472, %14"},
            {"use":"%524 = add i64 %511, %475",
             "value":"%475 = mul i64 %474, %14"},
            {"use":"%533 = add i64 %528, %475",
             "value":"%475 = mul i64 %474, %14"},
            {"use":"%537 = add i64 %511, %477",
             "value":"%477 = mul i64 %476, %14"},
            {"use":"%545 = add i64 %528, %477",
             "value":"%477 = mul i64 %476, %14"},
            {"use":"%541 = add i64 %511, %479",
             "value":"%479 = mul i64 %478, %14"},
            {"use":"%549 = add i64 %528, %479",
             "value":"%479 = mul i64 %478, %14"}],
           "input":
           ["%523 = load double, double* %522, align 8, !tbaa !9",
            "%523 = load double, double* %522, align 8, !tbaa !9",
            "%526 = load double, double* %525, align 8, !tbaa !9",
            "%526 = load double, double* %525, align 8, !tbaa !9",
            "%531 = load double, double* %530, align 8, !tbaa !9",
            "%535 = load double, double* %534, align 8, !tbaa !9",
            "%539 = load double, double* %538, align 8, !tbaa !9",
            "%539 = load double, double* %538, align 8, !tbaa !9",
            "%543 = load double, double* %542, align 8, !tbaa !9",
            "%543 = load double, double* %542, align 8, !tbaa !9",
            "%547 = load double, double* %546, align 8, !tbaa !9",
            "%551 = load double, double* %550, align 8, !tbaa !9",
            "%512 = phi i32 [ %556, %514 ], [ 1, %480 ]"],
           "origin":
           ["br i1 %513, label %514, label %557"],
           "output":"%556 = add nuw nsw i32 %512, 1",
           "restrictions":
           [{"use":"%521 = add i64 %511, %473",
             "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"},
            {"use":"%524 = add i64 %511, %475",
             "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"},
            {"use":"%528 = add nsw i64 %511, -1",
             "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"},
            {"use":"%537 = add i64 %511, %477",
             "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"},
            {"use":"%541 = add i64 %511, %479",
             "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"},
            {"use":"%555 = add nuw nsw i64 %511, 1",
             "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"},
            {"use":"%515 = shl nsw i32 %512, 1",
             "value":"%512 = phi i32 [ %556, %514 ], [ 1, %480 ]"},
            {"use":"%556 = add nuw nsw i32 %512, 1",
             "value":"%512 = phi i32 [ %556, %514 ], [ 1, %480 ]"}]},
 "old_value":"%512 = phi i32 [ %556, %514 ], [ 1, %480 ]",
 "precursor":"br i1 %482, label %483, label %510",
 "read":
 [{"address":"%522 = getelementptr double, double* %15, i64 %521",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"addend":"%473 = mul i64 %472, %14",
                 "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
                 "value":"%521 = add i64 %511, %473"},
   "output_index":"%521 = add i64 %511, %473",
   "stride_mul":
   [{"input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"}]},
  {"address":"%522 = getelementptr double, double* %15, i64 %521",
   "base_index":"%473 = mul i64 %472, %14",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%473 = mul i64 %472, %14",
     "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%521 = add i64 %511, %473"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"input":"%521 = add i64 %511, %473",
                 "value":"%521 = add i64 %511, %473"},
   "output_index":"%521 = add i64 %511, %473",
   "stride_mul":
   [{"input":"%521 = add i64 %511, %473",
     "value":"%521 = add i64 %511, %473"}]},
  {"address":"%525 = getelementptr double, double* %15, i64 %524",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"addend":"%475 = mul i64 %474, %14",
                 "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
                 "value":"%524 = add i64 %511, %475"},
   "output_index":"%524 = add i64 %511, %475",
   "stride_mul":
   [{"input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"}]},
  {"address":"%525 = getelementptr double, double* %15, i64 %524",
   "base_index":"%475 = mul i64 %474, %14",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%475 = mul i64 %474, %14",
     "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%524 = add i64 %511, %475"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"input":"%524 = add i64 %511, %475",
                 "value":"%524 = add i64 %511, %475"},
   "output_index":"%524 = add i64 %511, %475",
   "stride_mul":
   [{"input":"%524 = add i64 %511, %475",
     "value":"%524 = add i64 %511, %475"}]},
  {"address":"%530 = getelementptr double, double* %15, i64 %529",
   "base_index":"i64 -1",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%528 = add nsw i64 %511, -1"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"addend":"%473 = mul i64 %472, %14",
                 "input":"%528 = add nsw i64 %511, -1",
                 "value":"%529 = add i64 %528, %473"},
   "output_index":"%529 = add i64 %528, %473",
   "stride_mul":
   [{"input":"%528 = add nsw i64 %511, -1",
     "value":"%528 = add nsw i64 %511, -1"}]},
  {"address":"%534 = getelementptr double, double* %15, i64 %533",
   "base_index":"i64 -1",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%528 = add nsw i64 %511, -1"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"addend":"%475 = mul i64 %474, %14",
                 "input":"%528 = add nsw i64 %511, -1",
                 "value":"%533 = add i64 %528, %475"},
   "output_index":"%533 = add i64 %528, %475",
   "stride_mul":
   [{"input":"%528 = add nsw i64 %511, -1",
     "value":"%528 = add nsw i64 %511, -1"}]},
  {"address":"%538 = getelementptr double, double* %15, i64 %537",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"addend":"%477 = mul i64 %476, %14",
                 "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
                 "value":"%537 = add i64 %511, %477"},
   "output_index":"%537 = add i64 %511, %477",
   "stride_mul":
   [{"input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"}]},
  {"address":"%538 = getelementptr double, double* %15, i64 %537",
   "base_index":"%477 = mul i64 %476, %14",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%477 = mul i64 %476, %14",
     "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%537 = add i64 %511, %477"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"input":"%537 = add i64 %511, %477",
                 "value":"%537 = add i64 %511, %477"},
   "output_index":"%537 = add i64 %511, %477",
   "stride_mul":
   [{"input":"%537 = add i64 %511, %477",
     "value":"%537 = add i64 %511, %477"}]},
  {"address":"%542 = getelementptr double, double* %15, i64 %541",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"addend":"%479 = mul i64 %478, %14",
                 "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
                 "value":"%541 = add i64 %511, %479"},
   "output_index":"%541 = add i64 %511, %479",
   "stride_mul":
   [{"input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"}]},
  {"address":"%542 = getelementptr double, double* %15, i64 %541",
   "base_index":"%479 = mul i64 %478, %14",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%479 = mul i64 %478, %14",
     "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%541 = add i64 %511, %479"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"input":"%541 = add i64 %511, %479",
                 "value":"%541 = add i64 %511, %479"},
   "output_index":"%541 = add i64 %511, %479",
   "stride_mul":
   [{"input":"%541 = add i64 %511, %479",
     "value":"%541 = add i64 %511, %479"}]},
  {"address":"%546 = getelementptr double, double* %15, i64 %545",
   "base_index":"i64 -1",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%528 = add nsw i64 %511, -1"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"addend":"%477 = mul i64 %476, %14",
                 "input":"%528 = add nsw i64 %511, -1",
                 "value":"%545 = add i64 %528, %477"},
   "output_index":"%545 = add i64 %528, %477",
   "stride_mul":
   [{"input":"%528 = add nsw i64 %511, -1",
     "value":"%528 = add nsw i64 %511, -1"}]},
  {"address":"%550 = getelementptr double, double* %15, i64 %549",
   "base_index":"i64 -1",
   "base_pointer":"%15 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%511 = phi i64 [ %555, %514 ], [ 1, %480 ]",
     "value":"%528 = add nsw i64 %511, -1"}],
   "input_index":
   ["%511 = phi i64 [ %555, %514 ], [ 1, %480 ]"],
   "offset_add":{"addend":"%479 = mul i64 %478, %14",
                 "input":"%528 = add nsw i64 %511, -1",
                 "value":"%549 = add i64 %528, %479"},
   "output_index":"%549 = add i64 %528, %479",
   "stride_mul":
   [{"input":"%528 = add nsw i64 %511, -1",
     "value":"%528 = add nsw i64 %511, -1"}]}],
 "read_value":
 ["%523 = load double, double* %522, align 8, !tbaa !9",
  "%523 = load double, double* %522, align 8, !tbaa !9",
  "%526 = load double, double* %525, align 8, !tbaa !9",
  "%526 = load double, double* %525, align 8, !tbaa !9",
  "%531 = load double, double* %530, align 8, !tbaa !9",
  "%535 = load double, double* %534, align 8, !tbaa !9",
  "%539 = load double, double* %538, align 8, !tbaa !9",
  "%539 = load double, double* %538, align 8, !tbaa !9",
  "%543 = load double, double* %542, align 8, !tbaa !9",
  "%543 = load double, double* %542, align 8, !tbaa !9",
  "%547 = load double, double* %546, align 8, !tbaa !9",
  "%551 = load double, double* %550, align 8, !tbaa !9"],
 "successor":"%558 = add nuw nsw i64 %462, 1"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0, double in1, double in2, double in3, double in4, double in5, double in6, double in7, double in8)
{
  in0->_0 += 1;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION rep_nrm
BEGIN LOOP
BEGIN scalar
{"begin":"%45 = phi double [ %36, %41 ], [ %58, %50 ]",
 "body":{"begin":"%51 = add i64 %47, %43",
         "end":"br label %44",
         "precursor":"br i1 %49, label %50, label %61",
         "successor":"%45 = phi double [ %36, %41 ], [ %58, %50 ]"},
 "comparison":"%49 = icmp slt i64 %47, %24",
 "end":"br i1 %49, label %50, label %61",
 "increment":"%60 = add nuw nsw i64 %47, 1",
 "iter_begin":"i64 1",
 "iter_end":"%24 = sext i32 %23 to i64",
 "iter_step":"i64 1",
 "iterator":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
 "kernel":{"constants":
           [{"use":"%52 = getelementptr double, double* %16, i64 %51",
             "value":"%16 = bitcast i8* %0 to double*"},
            {"use":"%51 = add i64 %47, %43",
             "value":"%43 = mul i64 %42, %15"}],
           "input":
           ["%53 = load double, double* %52, align 8, !tbaa !9",
            "%53 = load double, double* %52, align 8, !tbaa !9",
            "%48 = phi double [ %39, %41 ], [ %55, %50 ]"],
           "origin":
           ["br i1 %49, label %50, label %61"],
           "output":"%55 = fadd double %48, %54",
           "restrictions":
           [{"use":"%58 = select i1 %57, double %56, double %45",
             "value":"%45 = phi double [ %36, %41 ], [ %58, %50 ]"},
            {"use":"%57 = fcmp ogt double %56, %46",
             "value":"%46 = phi double [ %37, %41 ], [ %59, %50 ]"},
            {"use":"%59 = select i1 %57, double %56, double %46",
             "value":"%46 = phi double [ %37, %41 ], [ %59, %50 ]"},
            {"use":"%51 = add i64 %47, %43",
             "value":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"},
            {"use":"%60 = add nuw nsw i64 %47, 1",
             "value":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"},
            {"use":"%55 = fadd double %48, %54",
             "value":"%48 = phi double [ %39, %41 ], [ %55, %50 ]"}]},
 "old_value":"%48 = phi double [ %39, %41 ], [ %55, %50 ]",
 "precursor":"br label %44",
 "read":
 [{"address":"%52 = getelementptr double, double* %16, i64 %51",
   "base_pointer":"%16 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
     "value":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"}],
   "input_index":
   ["%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"],
   "offset_add":{"addend":"%43 = mul i64 %42, %15",
                 "input":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
                 "value":"%51 = add i64 %47, %43"},
   "output_index":"%51 = add i64 %47, %43",
   "stride_mul":
   [{"input":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
     "value":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"}]},
  {"address":"%52 = getelementptr double, double* %16, i64 %51",
   "base_index":"%43 = mul i64 %42, %15",
   "base_pointer":"%16 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%43 = mul i64 %42, %15",
     "input":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
     "value":"%51 = add i64 %47, %43"}],
   "input_index":
   ["%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"],
   "offset_add":{"input":"%51 = add i64 %47, %43",
                 "value":"%51 = add i64 %47, %43"},
   "output_index":"%51 = add i64 %47, %43",
   "stride_mul":
   [{"input":"%51 = add i64 %47, %43",
     "value":"%51 = add i64 %47, %43"}]}],
 "read_value":
 ["%53 = load double, double* %52, align 8, !tbaa !9",
  "%53 = load double, double* %52, align 8, !tbaa !9"],
 "successor":"%62 = add nuw nsw i64 %38, 1"}
END scalar
BEGIN scalar
{"begin":"%45 = phi double [ %36, %41 ], [ %58, %50 ]",
 "body":{"begin":"%51 = add i64 %47, %43",
         "end":"br label %44",
         "precursor":"br i1 %49, label %50, label %61",
         "successor":"%45 = phi double [ %36, %41 ], [ %58, %50 ]"},
 "comparison":"%49 = icmp slt i64 %47, %24",
 "end":"br i1 %49, label %50, label %61",
 "increment":"%60 = add nuw nsw i64 %47, 1",
 "iter_begin":"i64 1",
 "iter_end":"%24 = sext i32 %23 to i64",
 "iter_step":"i64 1",
 "iterator":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
 "kernel":{"constants":
           [{"use":"%52 = getelementptr double, double* %16, i64 %51",
             "value":"%16 = bitcast i8* %0 to double*"},
            {"use":"%51 = add i64 %47, %43",
             "value":"%43 = mul i64 %42, %15"}],
           "input":
           ["%53 = load double, double* %52, align 8, !tbaa !9",
            "%53 = load double, double* %52, align 8, !tbaa !9",
            "%46 = phi double [ %37, %41 ], [ %59, %50 ]"],
           "origin":
           ["br i1 %49, label %50, label %61"],
           "output":"%59 = select i1 %57, double %56, double %46",
           "restrictions":
           [{"use":"%58 = select i1 %57, double %56, double %45",
             "value":"%45 = phi double [ %36, %41 ], [ %58, %50 ]"},
            {"use":"%57 = fcmp ogt double %56, %46",
             "value":"%46 = phi double [ %37, %41 ], [ %59, %50 ]"},
            {"use":"%59 = select i1 %57, double %56, double %46",
             "value":"%46 = phi double [ %37, %41 ], [ %59, %50 ]"},
            {"use":"%51 = add i64 %47, %43",
             "value":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"},
            {"use":"%60 = add nuw nsw i64 %47, 1",
             "value":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"},
            {"use":"%55 = fadd double %48, %54",
             "value":"%48 = phi double [ %39, %41 ], [ %55, %50 ]"}]},
 "old_value":"%46 = phi double [ %37, %41 ], [ %59, %50 ]",
 "precursor":"br label %44",
 "read":
 [{"address":"%52 = getelementptr double, double* %16, i64 %51",
   "base_pointer":"%16 = bitcast i8* %0 to double*",
   "index_add":
   [{"input":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
     "value":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"}],
   "input_index":
   ["%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"],
   "offset_add":{"addend":"%43 = mul i64 %42, %15",
                 "input":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
                 "value":"%51 = add i64 %47, %43"},
   "output_index":"%51 = add i64 %47, %43",
   "stride_mul":
   [{"input":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
     "value":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"}]},
  {"address":"%52 = getelementptr double, double* %16, i64 %51",
   "base_index":"%43 = mul i64 %42, %15",
   "base_pointer":"%16 = bitcast i8* %0 to double*",
   "index_add":
   [{"addend":"%43 = mul i64 %42, %15",
     "input":"%47 = phi i64 [ 1, %41 ], [ %60, %50 ]",
     "value":"%51 = add i64 %47, %43"}],
   "input_index":
   ["%47 = phi i64 [ 1, %41 ], [ %60, %50 ]"],
   "offset_add":{"input":"%51 = add i64 %47, %43",
                 "value":"%51 = add i64 %47, %43"},
   "output_index":"%51 = add i64 %47, %43",
   "stride_mul":
   [{"input":"%51 = add i64 %47, %43",
     "value":"%51 = add i64 %47, %43"}]}],
 "read_value":
 ["%53 = load double, double* %52, align 8, !tbaa !9",
  "%53 = load double, double* %52, align 8, !tbaa !9"],
 "successor":"%62 = add nuw nsw i64 %38, 1"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; double _1; }* in0, double in1)
{
  double t0 = in0->_1;
  double t1 = fabs(in1);
  in0->_0 += in1*in1;
  in0->_1 = t1>t0?t1:t0;
}
END LOOP
END FUNCTION TRANSFORMATION

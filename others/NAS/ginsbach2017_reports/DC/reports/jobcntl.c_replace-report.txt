BEGIN FUNCTION TRANSFORMATION setLeadingOnes32
BEGIN LOOP
BEGIN scalar
{"begin":"%3 = phi i32 [ -2147483648, %1 ], [ %9, %7 ]",
 "body":{"begin":"%8 = or i32 %4, %3",
         "end":"br label %2",
         "precursor":"br i1 %6, label %11, label %7",
         "successor":"%3 = phi i32 [ -2147483648, %1 ], [ %9, %7 ]"},
 "comparison":"%6 = icmp eq i32 %5, %0",
 "end":"br i1 %6, label %11, label %7",
 "increment":"%10 = add i32 %5, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 %0",
 "iter_step":"i32 1",
 "iterator":"%5 = phi i32 [ 0, %1 ], [ %10, %7 ]",
 "kernel":{"input":
           ["%3 = phi i32 [ -2147483648, %1 ], [ %9, %7 ]"],
           "origin":
           ["br i1 %6, label %11, label %7"],
           "output":"%9 = ashr i32 %3, 1",
           "restrictions":
           [{"use":"%8 = or i32 %4, %3",
             "value":"%3 = phi i32 [ -2147483648, %1 ], [ %9, %7 ]"},
            {"use":"%9 = ashr i32 %3, 1",
             "value":"%3 = phi i32 [ -2147483648, %1 ], [ %9, %7 ]"},
            {"use":"%8 = or i32 %4, %3",
             "value":"%4 = phi i32 [ 0, %1 ], [ %8, %7 ]"},
            {"use":"%10 = add i32 %5, 1",
             "value":"%5 = phi i32 [ 0, %1 ], [ %10, %7 ]"}]},
 "old_value":"%3 = phi i32 [ -2147483648, %1 ], [ %9, %7 ]",
 "precursor":"br label %2",
 "successor":"ret i32 %4"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION WriteOne32Tuple
BEGIN LOOP
BEGIN scalar
{"begin":"%8 = phi i64 [ 2147483648, %4 ], [ %19, %18 ]",
 "body":{"begin":"%12 = and i64 %8, %6",
         "end":"br label %7",
         "precursor":"br i1 %10, label %21, label %11",
         "successor":"%8 = phi i64 [ 2147483648, %4 ], [ %19, %18 ]"},
 "comparison":"%10 = icmp eq i32 %9, %2",
 "end":"br i1 %10, label %21, label %11",
 "increment":"%20 = add i32 %9, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 %2",
 "iter_step":"i32 1",
 "iterator":"%9 = phi i32 [ 0, %4 ], [ %20, %18 ]",
 "kernel":{"constants":
           [{"use":"%15 = tail call i32 @fputc(i32 49, %struct._IO_FILE* %3)",
             "value":"%struct._IO_FILE* %3"},
            {"use":"%17 = tail call i32 @fputc(i32 48, %struct._IO_FILE* %3)",
             "value":"%struct._IO_FILE* %3"},
            {"use":"%12 = and i64 %8, %6",
             "value":"%6 = zext i32 %1 to i64"}],
           "input":
           ["%8 = phi i64 [ 2147483648, %4 ], [ %19, %18 ]"],
           "origin":
           ["br i1 %10, label %21, label %11"],
           "output":"%19 = lshr i64 %8, 1",
           "restrictions":
           [{"use":"%12 = and i64 %8, %6",
             "value":"%8 = phi i64 [ 2147483648, %4 ], [ %19, %18 ]"},
            {"use":"%19 = lshr i64 %8, 1",
             "value":"%8 = phi i64 [ 2147483648, %4 ], [ %19, %18 ]"},
            {"use":"%20 = add i32 %9, 1",
             "value":"%9 = phi i32 [ 0, %4 ], [ %20, %18 ]"}]},
 "old_value":"%8 = phi i64 [ 2147483648, %4 ], [ %19, %18 ]",
 "precursor":"br label %7",
 "successor":"ret void"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0)
{
  long t0 = in0->_0;
  if(!(/* missing closure */)) {
  goto label3;
  }
label3:
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION GetParent
BEGIN LOOP
BEGIN scalar
{"begin":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]",
 "body":{"begin":"%10 = and i64 %5, %3",
         "end":"br label %4",
         "precursor":"br i1 %8, label %16, label %9",
         "successor":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"},
 "comparison":"%8 = icmp eq i32 %6, 64",
 "end":"br i1 %8, label %16, label %9",
 "increment":"%15 = add nuw nsw i32 %6, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 64",
 "iter_step":"i32 1",
 "iterator":"%6 = phi i32 [ 0, %2 ], [ %15, %9 ]",
 "kernel":{"constants":
           [{"use":"%10 = and i64 %5, %3",
             "value":"%3 = zext i32 %1 to i64"}],
           "input":
           ["%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"],
           "origin":
           ["br i1 %8, label %16, label %9"],
           "output":"%14 = lshr i64 %5, 1",
           "restrictions":
           [{"use":"%10 = and i64 %5, %3",
             "value":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"},
            {"use":"%14 = lshr i64 %5, 1",
             "value":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"},
            {"use":"%15 = add nuw nsw i32 %6, 1",
             "value":"%6 = phi i32 [ 0, %2 ], [ %15, %9 ]"},
            {"use":"%13 = add i32 %7, %12",
             "value":"%7 = phi i32 [ 0, %2 ], [ %13, %9 ]"}]},
 "old_value":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]",
 "precursor":"br label %4",
 "successor":"%17 = getelementptr inbounds %struct.ADC_VIEW_CNTL, %struct.ADC_VIEW_CNTL* %0, i64 0, i32 46"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]",
 "body":{"begin":"%37 = or i32 %33, %32",
         "end":"br label %31",
         "precursor":"br i1 %35, label %40, label %36",
         "successor":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]"},
 "comparison":"%35 = icmp eq i32 %34, %22",
 "end":"br i1 %35, label %40, label %36",
 "increment":"%39 = add i32 %34, 1",
 "iter_begin":"i32 0",
 "iter_end":"%22 = phi i32 [ 32, %16 ], [ %29, %27 ]",
 "iter_step":"i32 1",
 "iterator":"%34 = phi i32 [ %39, %36 ], [ 0, %19 ]",
 "kernel":{"input":
           ["%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]"],
           "origin":
           ["br i1 %35, label %40, label %36"],
           "output":"%38 = ashr i32 %32, 1",
           "restrictions":
           [{"use":"%37 = or i32 %33, %32",
             "value":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]"},
            {"use":"%38 = ashr i32 %32, 1",
             "value":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]"},
            {"use":"%37 = or i32 %33, %32",
             "value":"%33 = phi i32 [ %37, %36 ], [ 0, %19 ]"},
            {"use":"%39 = add i32 %34, 1",
             "value":"%34 = phi i32 [ %39, %36 ], [ 0, %19 ]"}]},
 "old_value":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]",
 "precursor":"br i1 %26, label %27, label %31",
 "successor":"%41 = phi i32 [ %48, %47 ], [ -2147483648, %31 ]"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%63 = phi i32 [ -2147483648, %60 ], [ %69, %67 ]",
 "body":{"begin":"%68 = or i32 %64, %63",
         "end":"br label %62",
         "precursor":"br i1 %66, label %71, label %67",
         "successor":"%63 = phi i32 [ -2147483648, %60 ], [ %69, %67 ]"},
 "comparison":"%66 = icmp eq i32 %65, %52",
 "end":"br i1 %66, label %71, label %67",
 "increment":"%70 = add i32 %65, 1",
 "iter_begin":"i32 0",
 "iter_end":"%52 = phi i32 [ %59, %57 ], [ 0, %40 ]",
 "iter_step":"i32 1",
 "iterator":"%65 = phi i32 [ 0, %60 ], [ %70, %67 ]",
 "kernel":{"input":
           ["%63 = phi i32 [ -2147483648, %60 ], [ %69, %67 ]"],
           "origin":
           ["br i1 %66, label %71, label %67"],
           "output":"%69 = ashr i32 %63, 1",
           "restrictions":
           [{"use":"%68 = or i32 %64, %63",
             "value":"%63 = phi i32 [ -2147483648, %60 ], [ %69, %67 ]"},
            {"use":"%69 = ashr i32 %63, 1",
             "value":"%63 = phi i32 [ -2147483648, %60 ], [ %69, %67 ]"},
            {"use":"%68 = or i32 %64, %63",
             "value":"%64 = phi i32 [ 0, %60 ], [ %68, %67 ]"},
            {"use":"%70 = add i32 %65, 1",
             "value":"%65 = phi i32 [ 0, %60 ], [ %70, %67 ]"}]},
 "old_value":"%63 = phi i32 [ -2147483648, %60 ], [ %69, %67 ]",
 "precursor":"br label %62",
 "successor":"%72 = getelementptr inbounds %struct.ADC_VIEW_CNTL, %struct.ADC_VIEW_CNTL* %0, i64 0, i32 7"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION NumberOfOnes
BEGIN LOOP
BEGIN scalar
{"begin":"%3 = phi i64 [ -9223372036854775808, %1 ], [ %12, %7 ]",
 "body":{"begin":"%8 = and i64 %3, %0",
         "end":"br label %2",
         "precursor":"br i1 %6, label %14, label %7",
         "successor":"%3 = phi i64 [ -9223372036854775808, %1 ], [ %12, %7 ]"},
 "comparison":"%6 = icmp eq i32 %4, 64",
 "end":"br i1 %6, label %14, label %7",
 "increment":"%13 = add nuw nsw i32 %4, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 64",
 "iter_step":"i32 1",
 "iterator":"%4 = phi i32 [ 0, %1 ], [ %13, %7 ]",
 "kernel":{"constants":
           [{"use":"%8 = and i64 %3, %0",
             "value":"i64 %0"}],
           "input":
           ["%3 = phi i64 [ -9223372036854775808, %1 ], [ %12, %7 ]"],
           "origin":
           ["br i1 %6, label %14, label %7"],
           "output":"%12 = lshr i64 %3, 1",
           "restrictions":
           [{"use":"%8 = and i64 %3, %0",
             "value":"%3 = phi i64 [ -9223372036854775808, %1 ], [ %12, %7 ]"},
            {"use":"%12 = lshr i64 %3, 1",
             "value":"%3 = phi i64 [ -9223372036854775808, %1 ], [ %12, %7 ]"},
            {"use":"%13 = add nuw nsw i32 %4, 1",
             "value":"%4 = phi i32 [ 0, %1 ], [ %13, %7 ]"},
            {"use":"%11 = add i32 %5, %10",
             "value":"%5 = phi i32 [ 0, %1 ], [ %11, %7 ]"}]},
 "old_value":"%3 = phi i64 [ -9223372036854775808, %1 ], [ %12, %7 ]",
 "precursor":"br label %2",
 "successor":"ret i32 %5"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION GetSmallestParent
BEGIN LOOP
BEGIN scalar
{"begin":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]",
 "body":{"begin":"%10 = and i64 %5, %3",
         "end":"br label %4",
         "precursor":"br i1 %8, label %16, label %9",
         "successor":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"},
 "comparison":"%8 = icmp eq i32 %6, 64",
 "end":"br i1 %8, label %16, label %9",
 "increment":"%15 = add nuw nsw i32 %6, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 64",
 "iter_step":"i32 1",
 "iterator":"%6 = phi i32 [ 0, %2 ], [ %15, %9 ]",
 "kernel":{"constants":
           [{"use":"%10 = and i64 %5, %3",
             "value":"%3 = zext i32 %1 to i64"}],
           "input":
           ["%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"],
           "origin":
           ["br i1 %8, label %16, label %9"],
           "output":"%14 = lshr i64 %5, 1",
           "restrictions":
           [{"use":"%10 = and i64 %5, %3",
             "value":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"},
            {"use":"%14 = lshr i64 %5, 1",
             "value":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"},
            {"use":"%15 = add nuw nsw i32 %6, 1",
             "value":"%6 = phi i32 [ 0, %2 ], [ %15, %9 ]"},
            {"use":"%13 = add i32 %7, %12",
             "value":"%7 = phi i32 [ 0, %2 ], [ %13, %9 ]"}]},
 "old_value":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]",
 "precursor":"br label %4",
 "successor":"%17 = getelementptr inbounds %struct.ADC_VIEW_CNTL, %struct.ADC_VIEW_CNTL* %0, i64 0, i32 7"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION GetPrefixedParent
BEGIN LOOP
BEGIN scalar
{"begin":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]",
 "body":{"begin":"%10 = and i64 %5, %3",
         "end":"br label %4",
         "precursor":"br i1 %8, label %16, label %9",
         "successor":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"},
 "comparison":"%8 = icmp eq i32 %6, 64",
 "end":"br i1 %8, label %16, label %9",
 "increment":"%15 = add nuw nsw i32 %6, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 64",
 "iter_step":"i32 1",
 "iterator":"%6 = phi i32 [ 0, %2 ], [ %15, %9 ]",
 "kernel":{"constants":
           [{"use":"%10 = and i64 %5, %3",
             "value":"%3 = zext i32 %1 to i64"}],
           "input":
           ["%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"],
           "origin":
           ["br i1 %8, label %16, label %9"],
           "output":"%14 = lshr i64 %5, 1",
           "restrictions":
           [{"use":"%10 = and i64 %5, %3",
             "value":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"},
            {"use":"%14 = lshr i64 %5, 1",
             "value":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]"},
            {"use":"%15 = add nuw nsw i32 %6, 1",
             "value":"%6 = phi i32 [ 0, %2 ], [ %15, %9 ]"},
            {"use":"%13 = add i32 %7, %12",
             "value":"%7 = phi i32 [ 0, %2 ], [ %13, %9 ]"}]},
 "old_value":"%5 = phi i64 [ -9223372036854775808, %2 ], [ %14, %9 ]",
 "precursor":"br label %4",
 "successor":"%17 = getelementptr inbounds %struct.ADC_VIEW_CNTL, %struct.ADC_VIEW_CNTL* %0, i64 0, i32 46"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]",
 "body":{"begin":"%37 = or i32 %33, %32",
         "end":"br label %31",
         "precursor":"br i1 %35, label %40, label %36",
         "successor":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]"},
 "comparison":"%35 = icmp eq i32 %34, %22",
 "end":"br i1 %35, label %40, label %36",
 "increment":"%39 = add i32 %34, 1",
 "iter_begin":"i32 0",
 "iter_end":"%22 = phi i32 [ 32, %16 ], [ %29, %27 ]",
 "iter_step":"i32 1",
 "iterator":"%34 = phi i32 [ %39, %36 ], [ 0, %19 ]",
 "kernel":{"input":
           ["%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]"],
           "origin":
           ["br i1 %35, label %40, label %36"],
           "output":"%38 = ashr i32 %32, 1",
           "restrictions":
           [{"use":"%37 = or i32 %33, %32",
             "value":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]"},
            {"use":"%38 = ashr i32 %32, 1",
             "value":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]"},
            {"use":"%37 = or i32 %33, %32",
             "value":"%33 = phi i32 [ %37, %36 ], [ 0, %19 ]"},
            {"use":"%39 = add i32 %34, 1",
             "value":"%34 = phi i32 [ %39, %36 ], [ 0, %19 ]"}]},
 "old_value":"%32 = phi i32 [ %38, %36 ], [ -2147483648, %19 ]",
 "precursor":"br i1 %26, label %27, label %31",
 "successor":"%41 = getelementptr inbounds %struct.ADC_VIEW_CNTL, %struct.ADC_VIEW_CNTL* %0, i64 0, i32 7"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION WriteOne64Tuple
BEGIN LOOP
BEGIN scalar
{"begin":"%7 = phi i64 [ -9223372036854775808, %4 ], [ %18, %17 ]",
 "body":{"begin":"%11 = and i64 %7, %1",
         "end":"br label %6",
         "precursor":"br i1 %9, label %20, label %10",
         "successor":"%7 = phi i64 [ -9223372036854775808, %4 ], [ %18, %17 ]"},
 "comparison":"%9 = icmp eq i32 %8, %2",
 "end":"br i1 %9, label %20, label %10",
 "increment":"%19 = add i32 %8, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 %2",
 "iter_step":"i32 1",
 "iterator":"%8 = phi i32 [ 0, %4 ], [ %19, %17 ]",
 "kernel":{"constants":
           [{"use":"%14 = tail call i32 @fputc(i32 49, %struct._IO_FILE* %3)",
             "value":"%struct._IO_FILE* %3"},
            {"use":"%16 = tail call i32 @fputc(i32 48, %struct._IO_FILE* %3)",
             "value":"%struct._IO_FILE* %3"},
            {"use":"%11 = and i64 %7, %1",
             "value":"i64 %1"}],
           "input":
           ["%7 = phi i64 [ -9223372036854775808, %4 ], [ %18, %17 ]"],
           "origin":
           ["br i1 %9, label %20, label %10"],
           "output":"%18 = lshr i64 %7, 1",
           "restrictions":
           [{"use":"%11 = and i64 %7, %1",
             "value":"%7 = phi i64 [ -9223372036854775808, %4 ], [ %18, %17 ]"},
            {"use":"%18 = lshr i64 %7, 1",
             "value":"%7 = phi i64 [ -9223372036854775808, %4 ], [ %18, %17 ]"},
            {"use":"%19 = add i32 %8, 1",
             "value":"%8 = phi i32 [ 0, %4 ], [ %19, %17 ]"}]},
 "old_value":"%7 = phi i64 [ -9223372036854775808, %4 ], [ %18, %17 ]",
 "precursor":"br label %6",
 "successor":"ret void"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0)
{
  long t0 = in0->_0;
  if(!(/* missing closure */)) {
  goto label3;
  }
label3:
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION GetRegTupleFromBin64
BEGIN LOOP
BEGIN scalar
{"begin":"%6 = phi i64 [ -9223372036854775808, %4 ], [ %22, %20 ]",
 "body":{"begin":"%11 = and i64 %6, %0",
         "end":"br label %5",
         "precursor":"br i1 %9, label %23, label %10",
         "successor":"%6 = phi i64 [ -9223372036854775808, %4 ], [ %22, %20 ]"},
 "comparison":"%9 = icmp eq i32 %7, %2",
 "end":"br i1 %9, label %23, label %10",
 "increment":"%13 = add i32 %7, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 %2",
 "iter_step":"i32 1",
 "iterator":"%7 = phi i32 [ 0, %4 ], [ %13, %20 ]",
 "kernel":{"constants":
           [{"use":"%18 = load i32, i32* %3, align 4, !tbaa !6",
             "value":"i32* %3"},
            {"use":"store i32 %19, i32* %3, align 4, !tbaa !6",
             "value":"i32* %3"},
            {"use":"%11 = and i64 %6, %0",
             "value":"i64 %0"},
            {"use":"%17 = getelementptr inbounds i32, i32* %1, i64 %16",
             "value":"i32* %1"}],
           "input":
           ["%6 = phi i64 [ -9223372036854775808, %4 ], [ %22, %20 ]"],
           "origin":
           ["br i1 %9, label %23, label %10"],
           "output":"%22 = lshr i64 %6, 1",
           "restrictions":
           [{"use":"%11 = and i64 %6, %0",
             "value":"%6 = phi i64 [ -9223372036854775808, %4 ], [ %22, %20 ]"},
            {"use":"%22 = lshr i64 %6, 1",
             "value":"%6 = phi i64 [ -9223372036854775808, %4 ], [ %22, %20 ]"},
            {"use":"%13 = add i32 %7, 1",
             "value":"%7 = phi i32 [ 0, %4 ], [ %13, %20 ]"},
            {"use":"%15 = add i32 %8, 1",
             "value":"%8 = phi i32 [ 0, %4 ], [ %21, %20 ]"},
            {"use":"%16 = zext i32 %8 to i64",
             "value":"%8 = phi i32 [ 0, %4 ], [ %21, %20 ]"},
            {"use":"%21 = phi i32 [ %15, %14 ], [ %8, %10 ]",
             "value":"%8 = phi i32 [ 0, %4 ], [ %21, %20 ]"}]},
 "old_value":"%6 = phi i64 [ -9223372036854775808, %4 ], [ %22, %20 ]",
 "precursor":"br label %5",
 "successor":"ret void"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0)
{
  long t0 = in0->_0;
  if(!(/* missing closure */)) {
  }
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION getRegTupleFromBin32
BEGIN LOOP
BEGIN scalar
{"begin":"%6 = phi i32 [ -2147483648, %4 ], [ %22, %20 ]",
 "body":{"begin":"%11 = and i32 %6, %0",
         "end":"br label %5",
         "precursor":"br i1 %9, label %23, label %10",
         "successor":"%6 = phi i32 [ -2147483648, %4 ], [ %22, %20 ]"},
 "comparison":"%9 = icmp eq i32 %7, %2",
 "end":"br i1 %9, label %23, label %10",
 "increment":"%13 = add i32 %7, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 %2",
 "iter_step":"i32 1",
 "iterator":"%7 = phi i32 [ 0, %4 ], [ %13, %20 ]",
 "kernel":{"constants":
           [{"use":"%18 = load i32, i32* %3, align 4, !tbaa !6",
             "value":"i32* %3"},
            {"use":"store i32 %19, i32* %3, align 4, !tbaa !6",
             "value":"i32* %3"},
            {"use":"%11 = and i32 %6, %0",
             "value":"i32 %0"},
            {"use":"%17 = getelementptr inbounds i32, i32* %1, i64 %16",
             "value":"i32* %1"}],
           "input":
           ["%6 = phi i32 [ -2147483648, %4 ], [ %22, %20 ]"],
           "origin":
           ["br i1 %9, label %23, label %10"],
           "output":"%22 = lshr i32 %6, 1",
           "restrictions":
           [{"use":"%11 = and i32 %6, %0",
             "value":"%6 = phi i32 [ -2147483648, %4 ], [ %22, %20 ]"},
            {"use":"%22 = lshr i32 %6, 1",
             "value":"%6 = phi i32 [ -2147483648, %4 ], [ %22, %20 ]"},
            {"use":"%13 = add i32 %7, 1",
             "value":"%7 = phi i32 [ 0, %4 ], [ %13, %20 ]"},
            {"use":"%15 = add i32 %8, 1",
             "value":"%8 = phi i32 [ 0, %4 ], [ %21, %20 ]"},
            {"use":"%16 = zext i32 %8 to i64",
             "value":"%8 = phi i32 [ 0, %4 ], [ %21, %20 ]"},
            {"use":"%21 = phi i32 [ %15, %14 ], [ %8, %10 ]",
             "value":"%8 = phi i32 [ 0, %4 ], [ %21, %20 ]"}]},
 "old_value":"%6 = phi i32 [ -2147483648, %4 ], [ %22, %20 ]",
 "precursor":"br label %5",
 "successor":"ret void"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  int t0 = in0->_0;
  if(!(/* missing closure */)) {
  }
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION GetRegTupleFromParent
BEGIN LOOP
BEGIN scalar
{"begin":"%12 = phi i32 [ -2147483648, %4 ], [ %32, %30 ]",
 "body":{"begin":"%18 = and i32 %12, %1",
         "end":"br label %11",
         "precursor":"br i1 %16, label %34, label %17",
         "successor":"%12 = phi i32 [ -2147483648, %4 ], [ %32, %30 ]"},
 "comparison":"%16 = icmp eq i32 %13, %3",
 "end":"br i1 %16, label %34, label %17",
 "increment":"%33 = add i32 %13, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 %3",
 "iter_step":"i32 1",
 "iterator":"%13 = phi i32 [ 0, %4 ], [ %33, %30 ]",
 "kernel":{"constants":
           [{"use":"%18 = and i32 %12, %1",
             "value":"i32 %1"},
            {"use":"%29 = getelementptr inbounds i32, i32* %2, i64 %28",
             "value":"i32* %2"},
            {"use":"%23 = and i32 %12, %10",
             "value":"%10 = shl i32 %8, %9"}],
           "input":
           ["%12 = phi i32 [ -2147483648, %4 ], [ %32, %30 ]"],
           "origin":
           ["br i1 %16, label %34, label %17"],
           "output":"%32 = lshr i32 %12, 1",
           "restrictions":
           [{"use":"%18 = and i32 %12, %1",
             "value":"%12 = phi i32 [ -2147483648, %4 ], [ %32, %30 ]"},
            {"use":"%23 = and i32 %12, %10",
             "value":"%12 = phi i32 [ -2147483648, %4 ], [ %32, %30 ]"},
            {"use":"%32 = lshr i32 %12, 1",
             "value":"%12 = phi i32 [ -2147483648, %4 ], [ %32, %30 ]"},
            {"use":"%33 = add i32 %13, 1",
             "value":"%13 = phi i32 [ 0, %4 ], [ %33, %30 ]"},
            {"use":"%27 = add i32 %14, 1",
             "value":"%14 = phi i32 [ 0, %4 ], [ %31, %30 ]"},
            {"use":"%28 = zext i32 %14 to i64",
             "value":"%14 = phi i32 [ 0, %4 ], [ %31, %30 ]"},
            {"use":"%31 = phi i32 [ %27, %26 ], [ %14, %17 ]",
             "value":"%14 = phi i32 [ 0, %4 ], [ %31, %30 ]"},
            {"use":"%21 = add i32 %15, %20",
             "value":"%15 = phi i32 [ 0, %4 ], [ %21, %30 ]"}]},
 "old_value":"%12 = phi i32 [ -2147483648, %4 ], [ %32, %30 ]",
 "precursor":"br label %11",
 "successor":"ret void"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  int t0 = in0->_0;
  if(!(/* missing closure */||/* missing closure */)) {
  }
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION CreateBinTuple
BEGIN LOOP
BEGIN scalar
{"begin":"%6 = phi i64 [ %15, %9 ], [ 0, %3 ]",
 "body":{"begin":"%10 = getelementptr inbounds i32, i32* %1, i64 %7",
         "end":"br label %5",
         "precursor":"br i1 %8, label %17, label %9",
         "successor":"%6 = phi i64 [ %15, %9 ], [ 0, %3 ]"},
 "comparison":"%8 = icmp eq i64 %7, %4",
 "end":"br i1 %8, label %17, label %9",
 "increment":"%16 = add nuw nsw i64 %7, 1",
 "iter_begin":"i64 0",
 "iter_end":"%4 = zext i32 %2 to i64",
 "iter_step":"i64 1",
 "iterator":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]",
 "kernel":{"constants":
           [{"use":"store i64 %15, i64* %0, align 8, !tbaa !2",
             "value":"i64* %0"},
            {"use":"%10 = getelementptr inbounds i32, i32* %1, i64 %7",
             "value":"i32* %1"}],
           "input":
           ["%11 = load i32, i32* %10, align 4, !tbaa !6",
            "%6 = phi i64 [ %15, %9 ], [ 0, %3 ]"],
           "origin":
           ["br i1 %8, label %17, label %9"],
           "output":"%15 = or i64 %14, %6",
           "restrictions":
           [{"use":"%15 = or i64 %14, %6",
             "value":"%6 = phi i64 [ %15, %9 ], [ 0, %3 ]"},
            {"use":"%10 = getelementptr inbounds i32, i32* %1, i64 %7",
             "value":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]"},
            {"use":"%16 = add nuw nsw i64 %7, 1",
             "value":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]"}]},
 "old_value":"%6 = phi i64 [ %15, %9 ], [ 0, %3 ]",
 "precursor":"br label %5",
 "read":
 [{"address":"%10 = getelementptr inbounds i32, i32* %1, i64 %7",
   "base_pointer":"i32* %1",
   "index_add":
   [{"input":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]",
     "value":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]"}],
   "input_index":
   ["%7 = phi i64 [ %16, %9 ], [ 0, %3 ]"],
   "offset_add":{"input":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]",
                 "value":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]"},
   "output_index":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]",
   "stride_mul":
   [{"input":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]",
     "value":"%7 = phi i64 [ %16, %9 ], [ 0, %3 ]"}]}],
 "read_value":
 ["%11 = load i32, i32* %10, align 4, !tbaa !6"],
 "successor":"ret void"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0, int in1)
{
  in0->_0 = /* missing closure */||in0->_0;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION vszsort
BEGIN LOOP
BEGIN histo
{"begin":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
 "body":{"begin":"%50 = add nsw i64 %47, -1",
         "end":"br i1 %61, label %46, label %62",
         "precursor":"br i1 %48, label %49, label %92",
         "successor":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"},
 "comparison":"%48 = icmp sgt i64 %47, 1",
 "end":"br i1 %48, label %49, label %92",
 "increment":"%50 = add nsw i64 %47, -1",
 "indexkernel":{"constants":
                [{"use":"%52 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%55 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 1",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%68 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %67, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%71 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %70, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%81 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %80, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%84 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %83, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%88 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %80, i32 1",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%90 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %83, i32 1",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%51 = load i64, i64* %43, align 8, !tbaa !30",
                  "value":"%43 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 0"},
                 {"use":"store i64 %53, i64* %43, align 8, !tbaa !30",
                  "value":"%43 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 0"},
                 {"use":"%54 = load i64, i64* %44, align 8, !tbaa !32",
                  "value":"%44 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 1"},
                 {"use":"store i64 %56, i64* %44, align 8, !tbaa !32",
                  "value":"%44 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 1"}],
                "origin":
                ["br i1 %48, label %49, label %92"],
                "output":"%43 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 0",
                "restrictions":
                [{"use":"%50 = add nsw i64 %47, -1",
                  "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
 "iter_begin":"%45 = sext i32 %1 to i64",
 "iter_end":"i64 1",
 "iter_step":"i64 -1",
 "iterator":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
 "kernel":{"constants":
           [{"use":"%52 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%55 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 1",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%68 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %67, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%71 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %70, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%81 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %80, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%84 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %83, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%88 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %80, i32 1",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%90 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %83, i32 1",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%51 = load i64, i64* %43, align 8, !tbaa !30",
             "value":"%43 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 0"},
            {"use":"store i64 %53, i64* %43, align 8, !tbaa !30",
             "value":"%43 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 0"},
            {"use":"%54 = load i64, i64* %44, align 8, !tbaa !32",
             "value":"%44 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 1"},
            {"use":"store i64 %56, i64* %44, align 8, !tbaa !32",
             "value":"%44 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 1"}],
           "input":
           ["%53 = load i64, i64* %52, align 8, !tbaa !30",
            "%53 = load i64, i64* %52, align 8, !tbaa !30",
            "%56 = load i64, i64* %55, align 8, !tbaa !32",
            "%56 = load i64, i64* %55, align 8, !tbaa !32",
            "%51 = load i64, i64* %43, align 8, !tbaa !30"],
           "origin":
           ["br i1 %48, label %49, label %92"],
           "output":"%53 = load i64, i64* %52, align 8, !tbaa !30",
           "restrictions":
           [{"use":"%50 = add nsw i64 %47, -1",
             "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
 "old_value":"%51 = load i64, i64* %43, align 8, !tbaa !30",
 "precursor":"br label %46",
 "read":
 [{"address":"%52 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 0",
   "base_pointer":"%struct.tuplevsize* %0",
   "index_add":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"addend":"i64 -1",
                 "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
  {"address":"%52 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 0",
   "base_index":"i64 -1",
   "base_pointer":"%struct.tuplevsize* %0",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%50 = add nsw i64 %47, -1"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"input":"%50 = add nsw i64 %47, -1",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%50 = add nsw i64 %47, -1",
     "value":"%50 = add nsw i64 %47, -1"}]},
  {"address":"%55 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 1",
   "base_pointer":"%struct.tuplevsize* %0",
   "index_add":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"addend":"i64 -1",
                 "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
  {"address":"%55 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 1",
   "base_index":"i64 -1",
   "base_pointer":"%struct.tuplevsize* %0",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%50 = add nsw i64 %47, -1"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"input":"%50 = add nsw i64 %47, -1",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%50 = add nsw i64 %47, -1",
     "value":"%50 = add nsw i64 %47, -1"}]}],
 "read_value":
 ["%53 = load i64, i64* %52, align 8, !tbaa !30",
  "%53 = load i64, i64* %52, align 8, !tbaa !30",
  "%56 = load i64, i64* %55, align 8, !tbaa !32",
  "%56 = load i64, i64* %55, align 8, !tbaa !32"],
 "store_instr":"store i64 %53, i64* %43, align 8, !tbaa !30",
 "store_instr_after":"store i64 %51, i64* %52, align 8, !tbaa !30",
 "successor":"ret void"}
END histo
BEGIN histo
{"begin":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
 "body":{"begin":"%50 = add nsw i64 %47, -1",
         "end":"br i1 %61, label %46, label %62",
         "precursor":"br i1 %48, label %49, label %92",
         "successor":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"},
 "comparison":"%48 = icmp sgt i64 %47, 1",
 "end":"br i1 %48, label %49, label %92",
 "increment":"%50 = add nsw i64 %47, -1",
 "indexkernel":{"constants":
                [{"use":"%52 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%55 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 1",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%68 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %67, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%71 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %70, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%81 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %80, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%84 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %83, i32 0",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%88 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %80, i32 1",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%90 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %83, i32 1",
                  "value":"%struct.tuplevsize* %0"},
                 {"use":"%51 = load i64, i64* %43, align 8, !tbaa !30",
                  "value":"%43 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 0"},
                 {"use":"store i64 %53, i64* %43, align 8, !tbaa !30",
                  "value":"%43 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 0"},
                 {"use":"%54 = load i64, i64* %44, align 8, !tbaa !32",
                  "value":"%44 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 1"},
                 {"use":"store i64 %56, i64* %44, align 8, !tbaa !32",
                  "value":"%44 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 1"}],
                "origin":
                ["br i1 %48, label %49, label %92"],
                "output":"%44 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 1",
                "restrictions":
                [{"use":"%50 = add nsw i64 %47, -1",
                  "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
 "iter_begin":"%45 = sext i32 %1 to i64",
 "iter_end":"i64 1",
 "iter_step":"i64 -1",
 "iterator":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
 "kernel":{"constants":
           [{"use":"%52 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%55 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 1",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%68 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %67, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%71 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %70, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%81 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %80, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%84 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %83, i32 0",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%88 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %80, i32 1",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%90 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %83, i32 1",
             "value":"%struct.tuplevsize* %0"},
            {"use":"%51 = load i64, i64* %43, align 8, !tbaa !30",
             "value":"%43 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 0"},
            {"use":"store i64 %53, i64* %43, align 8, !tbaa !30",
             "value":"%43 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 0"},
            {"use":"%54 = load i64, i64* %44, align 8, !tbaa !32",
             "value":"%44 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 1"},
            {"use":"store i64 %56, i64* %44, align 8, !tbaa !32",
             "value":"%44 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 0, i32 1"}],
           "input":
           ["%53 = load i64, i64* %52, align 8, !tbaa !30",
            "%53 = load i64, i64* %52, align 8, !tbaa !30",
            "%56 = load i64, i64* %55, align 8, !tbaa !32",
            "%56 = load i64, i64* %55, align 8, !tbaa !32",
            "%54 = load i64, i64* %44, align 8, !tbaa !32"],
           "origin":
           ["br i1 %48, label %49, label %92"],
           "output":"%56 = load i64, i64* %55, align 8, !tbaa !32",
           "restrictions":
           [{"use":"%50 = add nsw i64 %47, -1",
             "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
 "old_value":"%54 = load i64, i64* %44, align 8, !tbaa !32",
 "precursor":"br label %46",
 "read":
 [{"address":"%52 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 0",
   "base_pointer":"%struct.tuplevsize* %0",
   "index_add":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"addend":"i64 -1",
                 "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
  {"address":"%52 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 0",
   "base_index":"i64 -1",
   "base_pointer":"%struct.tuplevsize* %0",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%50 = add nsw i64 %47, -1"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"input":"%50 = add nsw i64 %47, -1",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%50 = add nsw i64 %47, -1",
     "value":"%50 = add nsw i64 %47, -1"}]},
  {"address":"%55 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 1",
   "base_pointer":"%struct.tuplevsize* %0",
   "index_add":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"addend":"i64 -1",
                 "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
  {"address":"%55 = getelementptr inbounds %struct.tuplevsize, %struct.tuplevsize* %0, i64 %50, i32 1",
   "base_index":"i64 -1",
   "base_pointer":"%struct.tuplevsize* %0",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%50 = add nsw i64 %47, -1"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"input":"%50 = add nsw i64 %47, -1",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%50 = add nsw i64 %47, -1",
     "value":"%50 = add nsw i64 %47, -1"}]}],
 "read_value":
 ["%53 = load i64, i64* %52, align 8, !tbaa !30",
  "%53 = load i64, i64* %52, align 8, !tbaa !30",
  "%56 = load i64, i64* %55, align 8, !tbaa !32",
  "%56 = load i64, i64* %55, align 8, !tbaa !32"],
 "store_instr":"store i64 %56, i64* %44, align 8, !tbaa !32",
 "store_instr_after":"store i64 %54, i64* %55, align 8, !tbaa !32",
 "successor":"ret void"}
END histo
BEGIN OPERATOR
void op(struct { long* _0; long* _1; }* in0, long in1, long in2)
{
  int t1;
  */* missing closure */ = in1;
  */* missing closure */ = in2;
  int t2 = (int)(/* missing closure */-1);
  int t0 = 1;
label1:
  if(/* missing closure */) goto label6;
  int t3 = ;
  t1 = t3;
  if(/* missing closure */){
  t1 = t3||(unsigned int)(unsigned bool)/* missing closure */;
  }
  t0 = t2;
  if(!(/* missing closure */)) goto label1;
  t0 = t1;
  goto label1;
label6:
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION countTupleOnes
BEGIN LOOP
BEGIN scalar
{"begin":"%4 = phi i32 [ 0, %2 ], [ %14, %8 ]",
 "body":{"begin":"%9 = and i64 %6, %0",
         "end":"br label %3",
         "precursor":"br i1 %7, label %15, label %8",
         "successor":"%4 = phi i32 [ 0, %2 ], [ %14, %8 ]"},
 "comparison":"%7 = icmp eq i32 %4, %1",
 "end":"br i1 %7, label %15, label %8",
 "increment":"%14 = add i32 %4, 1",
 "iter_begin":"i32 0",
 "iter_end":"i32 %1",
 "iter_step":"i32 1",
 "iterator":"%4 = phi i32 [ 0, %2 ], [ %14, %8 ]",
 "kernel":{"constants":
           [{"use":"%9 = and i64 %6, %0",
             "value":"i64 %0"}],
           "input":
           ["%6 = phi i64 [ 1, %2 ], [ %13, %8 ]"],
           "origin":
           ["br i1 %7, label %15, label %8"],
           "output":"%13 = shl i64 %6, 1",
           "restrictions":
           [{"use":"%14 = add i32 %4, 1",
             "value":"%4 = phi i32 [ 0, %2 ], [ %14, %8 ]"},
            {"use":"%12 = add i32 %5, %11",
             "value":"%5 = phi i32 [ 0, %2 ], [ %12, %8 ]"},
            {"use":"%9 = and i64 %6, %0",
             "value":"%6 = phi i64 [ 1, %2 ], [ %13, %8 ]"},
            {"use":"%13 = shl i64 %6, 1",
             "value":"%6 = phi i64 [ 1, %2 ], [ %13, %8 ]"}]},
 "old_value":"%6 = phi i64 [ 1, %2 ], [ %13, %8 ]",
 "precursor":"br label %3",
 "successor":"ret i32 %5"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION onessort
BEGIN LOOP
BEGIN histo
{"begin":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
 "body":{"begin":"%50 = add nsw i64 %47, -1",
         "end":"br i1 %61, label %46, label %62",
         "precursor":"br i1 %48, label %49, label %92",
         "successor":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"},
 "comparison":"%48 = icmp sgt i64 %47, 1",
 "end":"br i1 %48, label %49, label %92",
 "increment":"%50 = add nsw i64 %47, -1",
 "indexkernel":{"constants":
                [{"use":"%52 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%55 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 1",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%68 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %67, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%71 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %70, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%81 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %80, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%84 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %83, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%88 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %80, i32 1",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%90 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %83, i32 1",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%51 = load i32, i32* %43, align 8, !tbaa !33",
                  "value":"%43 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 0"},
                 {"use":"store i32 %53, i32* %43, align 8, !tbaa !33",
                  "value":"%43 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 0"},
                 {"use":"%54 = load i64, i64* %44, align 8, !tbaa !35",
                  "value":"%44 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 1"},
                 {"use":"store i64 %56, i64* %44, align 8, !tbaa !35",
                  "value":"%44 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 1"}],
                "origin":
                ["br i1 %48, label %49, label %92"],
                "output":"%43 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 0",
                "restrictions":
                [{"use":"%50 = add nsw i64 %47, -1",
                  "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
 "iter_begin":"%45 = sext i32 %1 to i64",
 "iter_end":"i64 1",
 "iter_step":"i64 -1",
 "iterator":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
 "kernel":{"constants":
           [{"use":"%52 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%55 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 1",
             "value":"%struct.tupleones* %0"},
            {"use":"%68 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %67, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%71 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %70, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%81 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %80, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%84 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %83, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%88 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %80, i32 1",
             "value":"%struct.tupleones* %0"},
            {"use":"%90 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %83, i32 1",
             "value":"%struct.tupleones* %0"},
            {"use":"%51 = load i32, i32* %43, align 8, !tbaa !33",
             "value":"%43 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 0"},
            {"use":"store i32 %53, i32* %43, align 8, !tbaa !33",
             "value":"%43 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 0"},
            {"use":"%54 = load i64, i64* %44, align 8, !tbaa !35",
             "value":"%44 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 1"},
            {"use":"store i64 %56, i64* %44, align 8, !tbaa !35",
             "value":"%44 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 1"}],
           "input":
           ["%53 = load i32, i32* %52, align 8, !tbaa !33",
            "%53 = load i32, i32* %52, align 8, !tbaa !33",
            "%56 = load i64, i64* %55, align 8, !tbaa !35",
            "%56 = load i64, i64* %55, align 8, !tbaa !35",
            "%51 = load i32, i32* %43, align 8, !tbaa !33"],
           "origin":
           ["br i1 %48, label %49, label %92"],
           "output":"%53 = load i32, i32* %52, align 8, !tbaa !33",
           "restrictions":
           [{"use":"%50 = add nsw i64 %47, -1",
             "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
 "old_value":"%51 = load i32, i32* %43, align 8, !tbaa !33",
 "precursor":"br label %46",
 "read":
 [{"address":"%52 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 0",
   "base_pointer":"%struct.tupleones* %0",
   "index_add":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"addend":"i64 -1",
                 "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
  {"address":"%52 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 0",
   "base_index":"i64 -1",
   "base_pointer":"%struct.tupleones* %0",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%50 = add nsw i64 %47, -1"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"input":"%50 = add nsw i64 %47, -1",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%50 = add nsw i64 %47, -1",
     "value":"%50 = add nsw i64 %47, -1"}]},
  {"address":"%55 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 1",
   "base_pointer":"%struct.tupleones* %0",
   "index_add":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"addend":"i64 -1",
                 "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
  {"address":"%55 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 1",
   "base_index":"i64 -1",
   "base_pointer":"%struct.tupleones* %0",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%50 = add nsw i64 %47, -1"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"input":"%50 = add nsw i64 %47, -1",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%50 = add nsw i64 %47, -1",
     "value":"%50 = add nsw i64 %47, -1"}]}],
 "read_value":
 ["%53 = load i32, i32* %52, align 8, !tbaa !33",
  "%53 = load i32, i32* %52, align 8, !tbaa !33",
  "%56 = load i64, i64* %55, align 8, !tbaa !35",
  "%56 = load i64, i64* %55, align 8, !tbaa !35"],
 "store_instr":"store i32 %53, i32* %43, align 8, !tbaa !33",
 "store_instr_after":"store i32 %51, i32* %52, align 8, !tbaa !33",
 "successor":"ret void"}
END histo
BEGIN histo
{"begin":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
 "body":{"begin":"%50 = add nsw i64 %47, -1",
         "end":"br i1 %61, label %46, label %62",
         "precursor":"br i1 %48, label %49, label %92",
         "successor":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"},
 "comparison":"%48 = icmp sgt i64 %47, 1",
 "end":"br i1 %48, label %49, label %92",
 "increment":"%50 = add nsw i64 %47, -1",
 "indexkernel":{"constants":
                [{"use":"%52 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%55 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 1",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%68 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %67, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%71 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %70, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%81 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %80, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%84 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %83, i32 0",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%88 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %80, i32 1",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%90 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %83, i32 1",
                  "value":"%struct.tupleones* %0"},
                 {"use":"%51 = load i32, i32* %43, align 8, !tbaa !33",
                  "value":"%43 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 0"},
                 {"use":"store i32 %53, i32* %43, align 8, !tbaa !33",
                  "value":"%43 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 0"},
                 {"use":"%54 = load i64, i64* %44, align 8, !tbaa !35",
                  "value":"%44 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 1"},
                 {"use":"store i64 %56, i64* %44, align 8, !tbaa !35",
                  "value":"%44 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 1"}],
                "origin":
                ["br i1 %48, label %49, label %92"],
                "output":"%44 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 1",
                "restrictions":
                [{"use":"%50 = add nsw i64 %47, -1",
                  "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
 "iter_begin":"%45 = sext i32 %1 to i64",
 "iter_end":"i64 1",
 "iter_step":"i64 -1",
 "iterator":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
 "kernel":{"constants":
           [{"use":"%52 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%55 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 1",
             "value":"%struct.tupleones* %0"},
            {"use":"%68 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %67, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%71 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %70, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%81 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %80, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%84 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %83, i32 0",
             "value":"%struct.tupleones* %0"},
            {"use":"%88 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %80, i32 1",
             "value":"%struct.tupleones* %0"},
            {"use":"%90 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %83, i32 1",
             "value":"%struct.tupleones* %0"},
            {"use":"%51 = load i32, i32* %43, align 8, !tbaa !33",
             "value":"%43 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 0"},
            {"use":"store i32 %53, i32* %43, align 8, !tbaa !33",
             "value":"%43 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 0"},
            {"use":"%54 = load i64, i64* %44, align 8, !tbaa !35",
             "value":"%44 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 1"},
            {"use":"store i64 %56, i64* %44, align 8, !tbaa !35",
             "value":"%44 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 0, i32 1"}],
           "input":
           ["%53 = load i32, i32* %52, align 8, !tbaa !33",
            "%53 = load i32, i32* %52, align 8, !tbaa !33",
            "%56 = load i64, i64* %55, align 8, !tbaa !35",
            "%56 = load i64, i64* %55, align 8, !tbaa !35",
            "%54 = load i64, i64* %44, align 8, !tbaa !35"],
           "origin":
           ["br i1 %48, label %49, label %92"],
           "output":"%56 = load i64, i64* %55, align 8, !tbaa !35",
           "restrictions":
           [{"use":"%50 = add nsw i64 %47, -1",
             "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
 "old_value":"%54 = load i64, i64* %44, align 8, !tbaa !35",
 "precursor":"br label %46",
 "read":
 [{"address":"%52 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 0",
   "base_pointer":"%struct.tupleones* %0",
   "index_add":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"addend":"i64 -1",
                 "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
  {"address":"%52 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 0",
   "base_index":"i64 -1",
   "base_pointer":"%struct.tupleones* %0",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%50 = add nsw i64 %47, -1"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"input":"%50 = add nsw i64 %47, -1",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%50 = add nsw i64 %47, -1",
     "value":"%50 = add nsw i64 %47, -1"}]},
  {"address":"%55 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 1",
   "base_pointer":"%struct.tupleones* %0",
   "index_add":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"addend":"i64 -1",
                 "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"}]},
  {"address":"%55 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %0, i64 %50, i32 1",
   "base_index":"i64 -1",
   "base_pointer":"%struct.tupleones* %0",
   "index_add":
   [{"addend":"i64 -1",
     "input":"%47 = phi i64 [ %45, %42 ], [ %50, %59 ]",
     "value":"%50 = add nsw i64 %47, -1"}],
   "input_index":
   ["%47 = phi i64 [ %45, %42 ], [ %50, %59 ]"],
   "offset_add":{"input":"%50 = add nsw i64 %47, -1",
                 "value":"%50 = add nsw i64 %47, -1"},
   "output_index":"%50 = add nsw i64 %47, -1",
   "stride_mul":
   [{"input":"%50 = add nsw i64 %47, -1",
     "value":"%50 = add nsw i64 %47, -1"}]}],
 "read_value":
 ["%53 = load i32, i32* %52, align 8, !tbaa !33",
  "%53 = load i32, i32* %52, align 8, !tbaa !33",
  "%56 = load i64, i64* %55, align 8, !tbaa !35",
  "%56 = load i64, i64* %55, align 8, !tbaa !35"],
 "store_instr":"store i64 %56, i64* %44, align 8, !tbaa !35",
 "store_instr_after":"store i64 %54, i64* %55, align 8, !tbaa !35",
 "successor":"ret void"}
END histo
BEGIN OPERATOR
void op(struct { int* _0; long* _1; }* in0, int in1, long in2)
{
  int t1;
  */* missing closure */ = in1;
  */* missing closure */ = in2;
  int t2 = (int)(/* missing closure */-1);
  int t0 = 1;
label1:
  if(/* missing closure */) goto label6;
  int t3 = ;
  t1 = t3;
  if(/* missing closure */){
  t1 = t3||(unsigned int)(unsigned bool)/* missing closure */;
  }
  t0 = t2;
  if(!(/* missing closure */)) goto label1;
  t0 = t1;
  goto label1;
label6:
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION MultiFileProcJobs
BEGIN LOOP
BEGIN scalar
{"begin":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]",
 "body":{"begin":"%74 = getelementptr i32, i32* %13, i64 %70",
         "end":"br label %69",
         "precursor":"br i1 %72, label %79, label %73",
         "successor":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]"},
 "comparison":"%72 = icmp eq i64 %70, %16",
 "end":"br i1 %72, label %79, label %73",
 "increment":"%78 = add nuw nsw i64 %70, 1",
 "iter_begin":"i64 0",
 "iter_end":"%16 = phi i64 [ %21, %18 ], [ 0, %3 ]",
 "iter_step":"i64 1",
 "iterator":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]",
 "kernel":{"constants":
           [{"use":"%74 = getelementptr i32, i32* %13, i64 %70",
             "value":"%13 = getelementptr [256 x i32], [256 x i32]* %5, i64 0, i64 0"}],
           "input":
           ["%75 = load i32, i32* %74, align 4, !tbaa !6",
            "%71 = phi i32 [ %77, %73 ], [ 0, %26 ]"],
           "origin":
           ["br i1 %72, label %79, label %73"],
           "output":"%77 = select i1 %76, i32 %75, i32 %71",
           "restrictions":
           [{"use":"%74 = getelementptr i32, i32* %13, i64 %70",
             "value":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]"},
            {"use":"%78 = add nuw nsw i64 %70, 1",
             "value":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]"},
            {"use":"%76 = icmp ugt i32 %75, %71",
             "value":"%71 = phi i32 [ %77, %73 ], [ 0, %26 ]"},
            {"use":"%77 = select i1 %76, i32 %75, i32 %71",
             "value":"%71 = phi i32 [ %77, %73 ], [ 0, %26 ]"}]},
 "old_value":"%71 = phi i32 [ %77, %73 ], [ 0, %26 ]",
 "precursor":"br i1 %32, label %33, label %69",
 "read":
 [{"address":"%74 = getelementptr i32, i32* %13, i64 %70",
   "base_pointer":"%13 = getelementptr [256 x i32], [256 x i32]* %5, i64 0, i64 0",
   "index_add":
   [{"input":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]",
     "value":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]"}],
   "input_index":
   ["%70 = phi i64 [ %78, %73 ], [ 0, %26 ]"],
   "offset_add":{"input":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]",
                 "value":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]"},
   "output_index":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]",
   "stride_mul":
   [{"input":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]",
     "value":"%70 = phi i64 [ %78, %73 ], [ 0, %26 ]"}]}],
 "read_value":
 ["%75 = load i32, i32* %74, align 4, !tbaa !6"],
 "successor":"%80 = zext i32 %71 to i64"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0, int in1)
{
  int t0 = in0->_0;
  in0->_0 = /* missing closure */?in1:t0;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%110 = phi i32 [ 0, %103 ], [ %120, %114 ]",
 "body":{"begin":"%115 = and i64 %112, %107",
         "end":"br label %109",
         "precursor":"br i1 %113, label %121, label %114",
         "successor":"%110 = phi i32 [ 0, %103 ], [ %120, %114 ]"},
 "comparison":"%113 = icmp eq i32 %110, %108",
 "end":"br i1 %113, label %121, label %114",
 "increment":"%120 = add i32 %110, 1",
 "iter_begin":"i32 0",
 "iter_end":"%108 = load i32, i32* %86, align 8, !tbaa !24",
 "iter_step":"i32 1",
 "iterator":"%110 = phi i32 [ 0, %103 ], [ %120, %114 ]",
 "kernel":{"constants":
           [{"use":"%115 = and i64 %112, %107",
             "value":"%107 = load i64, i64* %104, align 8, !tbaa !2"}],
           "input":
           ["%112 = phi i64 [ 1, %103 ], [ %119, %114 ]"],
           "origin":
           ["br i1 %113, label %121, label %114"],
           "output":"%119 = shl i64 %112, 1",
           "restrictions":
           [{"use":"%120 = add i32 %110, 1",
             "value":"%110 = phi i32 [ 0, %103 ], [ %120, %114 ]"},
            {"use":"%118 = add i32 %111, %117",
             "value":"%111 = phi i32 [ 0, %103 ], [ %118, %114 ]"},
            {"use":"%115 = and i64 %112, %107",
             "value":"%112 = phi i64 [ 1, %103 ], [ %119, %114 ]"},
            {"use":"%119 = shl i64 %112, 1",
             "value":"%112 = phi i64 [ 1, %103 ], [ %119, %114 ]"}]},
 "old_value":"%112 = phi i64 [ 1, %103 ], [ %119, %114 ]",
 "precursor":"br label %109",
 "successor":"%122 = getelementptr inbounds %struct.tupleones, %struct.tupleones* %83, i64 %101, i32 0"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0)
{
  in0->_0 = /* missing closure */;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION PartitionCube
BEGIN LOOP
BEGIN scalar
{"begin":"%54 = phi i64 [ 0, %47 ], [ %63, %57 ]",
 "body":{"begin":"%58 = getelementptr i32, i32* %19, i64 %55",
         "end":"br label %53",
         "precursor":"br i1 %56, label %65, label %57",
         "successor":"%54 = phi i64 [ 0, %47 ], [ %63, %57 ]"},
 "comparison":"%56 = icmp eq i64 %55, %52",
 "end":"br i1 %56, label %65, label %57",
 "increment":"%64 = add nuw nsw i64 %55, 1",
 "iter_begin":"i64 0",
 "iter_end":"%52 = zext i32 %44 to i64",
 "iter_step":"i64 1",
 "iterator":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]",
 "kernel":{"constants":
           [{"use":"%58 = getelementptr i32, i32* %19, i64 %55",
             "value":"%19 = getelementptr [64 x i32], [64 x i32]* %2, i64 0, i64 0"}],
           "input":
           ["%59 = load i32, i32* %58, align 4, !tbaa !6",
            "%54 = phi i64 [ 0, %47 ], [ %63, %57 ]"],
           "origin":
           ["br i1 %56, label %65, label %57"],
           "output":"%63 = or i64 %62, %54",
           "restrictions":
           [{"use":"%63 = or i64 %62, %54",
             "value":"%54 = phi i64 [ 0, %47 ], [ %63, %57 ]"},
            {"use":"%58 = getelementptr i32, i32* %19, i64 %55",
             "value":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]"},
            {"use":"%64 = add nuw nsw i64 %55, 1",
             "value":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]"}]},
 "old_value":"%54 = phi i64 [ 0, %47 ], [ %63, %57 ]",
 "precursor":"br label %53",
 "read":
 [{"address":"%58 = getelementptr i32, i32* %19, i64 %55",
   "base_pointer":"%19 = getelementptr [64 x i32], [64 x i32]* %2, i64 0, i64 0",
   "index_add":
   [{"input":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]",
     "value":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]"}],
   "input_index":
   ["%55 = phi i64 [ 0, %47 ], [ %64, %57 ]"],
   "offset_add":{"input":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]",
                 "value":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]"},
   "output_index":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]",
   "stride_mul":
   [{"input":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]",
     "value":"%55 = phi i64 [ 0, %47 ], [ %64, %57 ]"}]}],
 "read_value":
 ["%59 = load i32, i32* %58, align 4, !tbaa !6"],
 "successor":"%66 = ashr exact i64 %51, 32"}
END scalar
BEGIN OPERATOR
void op(struct { long _0; }* in0, int in1)
{
  in0->_0 = /* missing closure */||in0->_0;
}
END LOOP
END FUNCTION TRANSFORMATION

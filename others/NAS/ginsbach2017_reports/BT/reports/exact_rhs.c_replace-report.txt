BEGIN FUNCTION TRANSFORMATION exact_rhs
BEGIN LOOP
BEGIN stencil
{"begin":"%18 = add i64 %13, %15",
 "body":{"begin":"%30 = add i64 %25, %27",
         "end":"br label %26",
         "precursor":"br i1 %28, label %33, label %29",
         "successor":"%27 = phi i64 [ %32, %29 ], [ 0, %23 ]"},
 "end":"br label %14",
 "iterator":
 ["%15 = phi i64 [ %36, %35 ], [ 0, %12 ]",
  "%21 = phi i64 [ %34, %33 ], [ 0, %17 ]",
  "%27 = phi i64 [ %32, %29 ], [ 0, %23 ]"],
 "kernel":{"constants":
           [{"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %30",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "origin":
           ["br i1 %28, label %33, label %29"],
           "output":"double 0.000000e+00",
           "restrictions":
           [{"use":"%30 = add i64 %25, %27",
             "value":"%25 = mul i64 %24, 5"},
            {"use":"%30 = add i64 %25, %27",
             "value":"%27 = phi i64 [ %32, %29 ], [ 0, %23 ]"},
            {"use":"%32 = add nuw nsw i64 %27, 1",
             "value":"%27 = phi i64 [ %32, %29 ], [ 0, %23 ]"}]},
 "loop":
 [{"begin":"%15 = phi i64 [ %36, %35 ], [ 0, %12 ]",
   "body":{"begin":"%18 = add i64 %13, %15",
           "end":"br label %14",
           "precursor":"br i1 %16, label %17, label %37",
           "successor":"%15 = phi i64 [ %36, %35 ], [ 0, %12 ]"},
   "comparison":"%16 = icmp slt i64 %15, %7",
   "end":"br i1 %16, label %17, label %37",
   "increment":"%36 = add nuw nsw i64 %15, 1",
   "iter_begin":"i64 0",
   "iter_end":"%7 = sext i32 %4 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %14",
   "successor":"%38 = add nuw nsw i64 %10, 1"},
  {"begin":"%21 = phi i64 [ %34, %33 ], [ 0, %17 ]",
   "body":{"begin":"%24 = add i64 %19, %21",
           "end":"br label %20",
           "precursor":"br i1 %22, label %23, label %35",
           "successor":"%21 = phi i64 [ %34, %33 ], [ 0, %17 ]"},
   "comparison":"%22 = icmp slt i64 %21, %6",
   "end":"br i1 %22, label %23, label %35",
   "increment":"%34 = add nuw nsw i64 %21, 1",
   "iter_begin":"i64 0",
   "iter_end":"%6 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "iterator":"%21 = phi i64 [ %34, %33 ], [ 0, %17 ]",
   "post_sese":{"begin":"%36 = add nuw nsw i64 %15, 1",
                "end":"br label %14",
                "precursor":"br i1 %22, label %23, label %35",
                "successor":"%15 = phi i64 [ %36, %35 ], [ 0, %12 ]"},
   "pre_sese":{"begin":"%18 = add i64 %13, %15",
               "end":"br label %20",
               "precursor":"br i1 %16, label %17, label %37",
               "successor":"%21 = phi i64 [ %34, %33 ], [ 0, %17 ]"},
   "precursor":"br label %20",
   "successor":"%36 = add nuw nsw i64 %15, 1"},
  {"begin":"%27 = phi i64 [ %32, %29 ], [ 0, %23 ]",
   "body":{"begin":"%30 = add i64 %25, %27",
           "end":"br label %26",
           "precursor":"br i1 %28, label %33, label %29",
           "successor":"%27 = phi i64 [ %32, %29 ], [ 0, %23 ]"},
   "comparison":"%28 = icmp eq i64 %27, 5",
   "end":"br i1 %28, label %33, label %29",
   "increment":"%32 = add nuw nsw i64 %27, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%27 = phi i64 [ %32, %29 ], [ 0, %23 ]",
   "post_sese":{"begin":"%34 = add nuw nsw i64 %21, 1",
                "end":"br label %20",
                "precursor":"br i1 %28, label %33, label %29",
                "successor":"%21 = phi i64 [ %34, %33 ], [ 0, %17 ]"},
   "pre_sese":{"begin":"%24 = add i64 %19, %21",
               "end":"br label %26",
               "precursor":"br i1 %22, label %23, label %35",
               "successor":"%27 = phi i64 [ %32, %29 ], [ 0, %23 ]"},
   "precursor":"br label %26",
   "successor":"%34 = add nuw nsw i64 %21, 1"}],
 "precursor":"br i1 %16, label %17, label %37",
 "successor":"%15 = phi i64 [ %36, %35 ], [ 0, %12 ]",
 "write":{"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %30",
          "base_index":"%13 = mul i64 %10, 65",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%13 = mul i64 %10, 65",
            "input":"%15 = phi i64 [ %36, %35 ], [ 0, %12 ]",
            "value":"%18 = add i64 %13, %15"},
           {"addend":"%21 = phi i64 [ %34, %33 ], [ 0, %17 ]",
            "input":"%19 = mul i64 %18, 65",
            "value":"%24 = add i64 %19, %21"},
           {"addend":"%27 = phi i64 [ %32, %29 ], [ 0, %23 ]",
            "input":"%25 = mul i64 %24, 5",
            "value":"%30 = add i64 %25, %27"}],
          "input_index":
          ["%15 = phi i64 [ %36, %35 ], [ 0, %12 ]",
           "%21 = phi i64 [ %34, %33 ], [ 0, %17 ]",
           "%27 = phi i64 [ %32, %29 ], [ 0, %23 ]"],
          "offset_add":{"input":"%30 = add i64 %25, %27",
                        "value":"%30 = add i64 %25, %27"},
          "output_index":"%30 = add i64 %25, %27",
          "store":"store double 0.000000e+00, double* %31, align 8, !tbaa !6",
          "stride_mul":
          [{"input":"%18 = add i64 %13, %15",
            "multiplier":"i64 65",
            "value":"%19 = mul i64 %18, 65"},
           {"input":"%24 = add i64 %19, %21",
            "multiplier":"i64 5",
            "value":"%25 = mul i64 %24, 5"},
           {"input":"%30 = add i64 %25, %27",
            "value":"%30 = add i64 %25, %27"}]}}
END stencil
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%1438 = add i64 %1433, %1435",
 "body":{"begin":"%1450 = add i64 %1445, %1447",
         "end":"br label %1446",
         "precursor":"br i1 %1448, label %1455, label %1449",
         "successor":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"},
 "end":"br label %1434",
 "iterator":
 ["%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]",
  "%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]",
  "%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"],
 "kernel":{"constants":
           [{"use":"%1451 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1450",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%1452 = load double, double* %1451, align 8, !tbaa !6"],
           "origin":
           ["br i1 %1448, label %1455, label %1449"],
           "output":"%1453 = fsub double -0.000000e+00, %1452",
           "restrictions":
           [{"use":"%1450 = add i64 %1445, %1447",
             "value":"%1445 = mul i64 %1444, 5"},
            {"use":"%1450 = add i64 %1445, %1447",
             "value":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"},
            {"use":"%1454 = add nuw nsw i64 %1447, 1",
             "value":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"}]},
 "loop":
 [{"begin":"%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]",
   "body":{"begin":"%1438 = add i64 %1433, %1435",
           "end":"br label %1434",
           "precursor":"br i1 %1436, label %1459, label %1437",
           "successor":"%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]"},
   "comparison":"%1436 = icmp sgt i64 %1435, %961",
   "end":"br i1 %1436, label %1459, label %1437",
   "increment":"%1458 = add nuw nsw i64 %1435, 1",
   "iter_begin":"i64 1",
   "iter_end":"%961 = sext i32 %960 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %1434",
   "successor":"%1460 = add nuw nsw i64 %1430, 1"},
  {"begin":"%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]",
   "body":{"begin":"%1444 = add i64 %1439, %1441",
           "end":"br label %1440",
           "precursor":"br i1 %1442, label %1457, label %1443",
           "successor":"%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]"},
   "comparison":"%1442 = icmp sgt i64 %1441, %1427",
   "end":"br i1 %1442, label %1457, label %1443",
   "increment":"%1456 = add nuw nsw i64 %1441, 1",
   "iter_begin":"i64 1",
   "iter_end":"%1427 = sext i32 %1426 to i64",
   "iter_step":"i64 1",
   "iterator":"%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]",
   "post_sese":{"begin":"%1458 = add nuw nsw i64 %1435, 1",
                "end":"br label %1434",
                "precursor":"br i1 %1442, label %1457, label %1443",
                "successor":"%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]"},
   "pre_sese":{"begin":"%1438 = add i64 %1433, %1435",
               "end":"br label %1440",
               "precursor":"br i1 %1436, label %1459, label %1437",
               "successor":"%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]"},
   "precursor":"br label %1440",
   "successor":"%1458 = add nuw nsw i64 %1435, 1"},
  {"begin":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]",
   "body":{"begin":"%1450 = add i64 %1445, %1447",
           "end":"br label %1446",
           "precursor":"br i1 %1448, label %1455, label %1449",
           "successor":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"},
   "comparison":"%1448 = icmp eq i64 %1447, 5",
   "end":"br i1 %1448, label %1455, label %1449",
   "increment":"%1454 = add nuw nsw i64 %1447, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]",
   "post_sese":{"begin":"%1456 = add nuw nsw i64 %1441, 1",
                "end":"br label %1440",
                "precursor":"br i1 %1448, label %1455, label %1449",
                "successor":"%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]"},
   "pre_sese":{"begin":"%1444 = add i64 %1439, %1441",
               "end":"br label %1446",
               "precursor":"br i1 %1442, label %1457, label %1443",
               "successor":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"},
   "precursor":"br label %1446",
   "successor":"%1456 = add nuw nsw i64 %1441, 1"}],
 "precursor":"br i1 %1436, label %1459, label %1437",
 "reads":
 [{"address":"%1451 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1450",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]",
     "value":"%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]"},
    {"input":"%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]",
     "value":"%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]"},
    {"input":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]",
     "value":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"}],
   "input_index":
   ["%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]",
    "%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]",
    "%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"],
   "read":{"address":"%1451 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1450",
           "base_index":"%1433 = mul i64 %1430, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%1433 = mul i64 %1430, 65",
             "input":"%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]",
             "value":"%1438 = add i64 %1433, %1435"},
            {"addend":"%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]",
             "input":"%1439 = mul i64 %1438, 65",
             "value":"%1444 = add i64 %1439, %1441"},
            {"addend":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]",
             "input":"%1445 = mul i64 %1444, 5",
             "value":"%1450 = add i64 %1445, %1447"}],
           "input_index":
           ["%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]",
            "%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]",
            "%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"],
           "offset_add":{"input":"%1450 = add i64 %1445, %1447",
                         "value":"%1450 = add i64 %1445, %1447"},
           "output_index":"%1450 = add i64 %1445, %1447",
           "stride_mul":
           [{"input":"%1438 = add i64 %1433, %1435",
             "multiplier":"i64 65",
             "value":"%1439 = mul i64 %1438, 65"},
            {"input":"%1444 = add i64 %1439, %1441",
             "multiplier":"i64 5",
             "value":"%1445 = mul i64 %1444, 5"},
            {"input":"%1450 = add i64 %1445, %1447",
             "value":"%1450 = add i64 %1445, %1447"}]}}],
 "successor":"%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]",
 "write":{"address":"%1451 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1450",
          "base_index":"%1433 = mul i64 %1430, 65",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @forcing, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%1433 = mul i64 %1430, 65",
            "input":"%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]",
            "value":"%1438 = add i64 %1433, %1435"},
           {"addend":"%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]",
            "input":"%1439 = mul i64 %1438, 65",
            "value":"%1444 = add i64 %1439, %1441"},
           {"addend":"%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]",
            "input":"%1445 = mul i64 %1444, 5",
            "value":"%1450 = add i64 %1445, %1447"}],
          "input_index":
          ["%1435 = phi i64 [ %1458, %1457 ], [ 1, %1432 ]",
           "%1441 = phi i64 [ %1456, %1455 ], [ 1, %1437 ]",
           "%1447 = phi i64 [ %1454, %1449 ], [ 0, %1443 ]"],
          "offset_add":{"input":"%1450 = add i64 %1445, %1447",
                        "value":"%1450 = add i64 %1445, %1447"},
          "output_index":"%1450 = add i64 %1445, %1447",
          "store":"store double %1453, double* %1451, align 8, !tbaa !6",
          "stride_mul":
          [{"input":"%1438 = add i64 %1433, %1435",
            "multiplier":"i64 65",
            "value":"%1439 = mul i64 %1438, 65"},
           {"input":"%1444 = add i64 %1439, %1441",
            "multiplier":"i64 5",
            "value":"%1445 = mul i64 %1444, 5"},
           {"input":"%1450 = add i64 %1445, %1447",
            "value":"%1450 = add i64 %1445, %1447"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

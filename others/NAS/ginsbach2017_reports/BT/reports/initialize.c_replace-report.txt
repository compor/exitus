BEGIN FUNCTION TRANSFORMATION initialize
BEGIN LOOP
BEGIN stencil
{"begin":"%20 = add i64 %15, %17",
 "body":{"begin":"%32 = add i64 %27, %29",
         "end":"br label %28",
         "precursor":"br i1 %30, label %35, label %31",
         "successor":"%29 = phi i64 [ %34, %31 ], [ 0, %25 ]"},
 "end":"br label %16",
 "iterator":
 ["%17 = phi i64 [ %38, %37 ], [ 0, %14 ]",
  "%23 = phi i64 [ %36, %35 ], [ 0, %19 ]",
  "%29 = phi i64 [ %34, %31 ], [ 0, %25 ]"],
 "kernel":{"constants":
           [{"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "origin":
           ["br i1 %30, label %35, label %31"],
           "output":"double 1.000000e+00",
           "restrictions":
           [{"use":"%32 = add i64 %27, %29",
             "value":"%27 = mul i64 %26, 5"},
            {"use":"%32 = add i64 %27, %29",
             "value":"%29 = phi i64 [ %34, %31 ], [ 0, %25 ]"},
            {"use":"%34 = add nuw nsw i64 %29, 1",
             "value":"%29 = phi i64 [ %34, %31 ], [ 0, %25 ]"}]},
 "loop":
 [{"begin":"%17 = phi i64 [ %38, %37 ], [ 0, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %19, label %39",
           "successor":"%17 = phi i64 [ %38, %37 ], [ 0, %14 ]"},
   "comparison":"%18 = icmp slt i64 %17, %9",
   "end":"br i1 %18, label %19, label %39",
   "increment":"%38 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 0",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %16",
   "successor":"%40 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %36, %35 ], [ 0, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %25, label %37",
           "successor":"%23 = phi i64 [ %36, %35 ], [ 0, %19 ]"},
   "comparison":"%24 = icmp slt i64 %23, %8",
   "end":"br i1 %24, label %25, label %37",
   "increment":"%36 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 0",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %36, %35 ], [ 0, %19 ]",
   "post_sese":{"begin":"%38 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %25, label %37",
                "successor":"%17 = phi i64 [ %38, %37 ], [ 0, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %19, label %39",
               "successor":"%23 = phi i64 [ %36, %35 ], [ 0, %19 ]"},
   "precursor":"br label %22",
   "successor":"%38 = add nuw nsw i64 %17, 1"},
  {"begin":"%29 = phi i64 [ %34, %31 ], [ 0, %25 ]",
   "body":{"begin":"%32 = add i64 %27, %29",
           "end":"br label %28",
           "precursor":"br i1 %30, label %35, label %31",
           "successor":"%29 = phi i64 [ %34, %31 ], [ 0, %25 ]"},
   "comparison":"%30 = icmp eq i64 %29, 5",
   "end":"br i1 %30, label %35, label %31",
   "increment":"%34 = add nuw nsw i64 %29, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%29 = phi i64 [ %34, %31 ], [ 0, %25 ]",
   "post_sese":{"begin":"%36 = add nuw nsw i64 %23, 1",
                "end":"br label %22",
                "precursor":"br i1 %30, label %35, label %31",
                "successor":"%23 = phi i64 [ %36, %35 ], [ 0, %19 ]"},
   "pre_sese":{"begin":"%26 = add i64 %21, %23",
               "end":"br label %28",
               "precursor":"br i1 %24, label %25, label %37",
               "successor":"%29 = phi i64 [ %34, %31 ], [ 0, %25 ]"},
   "precursor":"br label %28",
   "successor":"%36 = add nuw nsw i64 %23, 1"}],
 "precursor":"br i1 %18, label %19, label %39",
 "successor":"%17 = phi i64 [ %38, %37 ], [ 0, %14 ]",
 "write":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
          "base_index":"%15 = mul i64 %12, 65",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%15 = mul i64 %12, 65",
            "input":"%17 = phi i64 [ %38, %37 ], [ 0, %14 ]",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %36, %35 ], [ 0, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"},
           {"addend":"%29 = phi i64 [ %34, %31 ], [ 0, %25 ]",
            "input":"%27 = mul i64 %26, 5",
            "value":"%32 = add i64 %27, %29"}],
          "input_index":
          ["%17 = phi i64 [ %38, %37 ], [ 0, %14 ]",
           "%23 = phi i64 [ %36, %35 ], [ 0, %19 ]",
           "%29 = phi i64 [ %34, %31 ], [ 0, %25 ]"],
          "offset_add":{"input":"%32 = add i64 %27, %29",
                        "value":"%32 = add i64 %27, %29"},
          "output_index":"%32 = add i64 %27, %29",
          "store":"store double 1.000000e+00, double* %33, align 8, !tbaa !6",
          "stride_mul":
          [{"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "multiplier":"i64 5",
            "value":"%27 = mul i64 %26, 5"},
           {"input":"%32 = add i64 %27, %29",
            "value":"%32 = add i64 %27, %29"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

BEGIN FUNCTION TRANSFORMATION compute_rhs
BEGIN LOOP
BEGIN stencil
{"begin":"%15 = mul i64 %12, 65",
 "body":{"begin":"%26 = add i64 %21, %23",
         "end":"br label %22",
         "precursor":"br i1 %24, label %25, label %58",
         "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
 "end":"br label %11",
 "iterator":
 ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
  "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
  "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
 "kernel":{"constants":
           [{"use":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%46 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%54 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%29 = load double, double* %28, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%39 = load double, double* %38, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %24, label %25, label %58"],
           "output":"%30 = fdiv double 1.000000e+00, %29",
           "restrictions":
           [{"use":"%26 = add i64 %21, %23",
             "value":"%21 = mul i64 %20, 65"},
            {"use":"%26 = add i64 %21, %23",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
            {"use":"%57 = add nuw nsw i64 %23, 1",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}]},
 "loop":
 [{"begin":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
   "body":{"begin":"%15 = mul i64 %12, 65",
           "end":"br label %11",
           "precursor":"br i1 %13, label %14, label %62",
           "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "comparison":"%13 = icmp slt i64 %12, %10",
   "end":"br i1 %13, label %14, label %62",
   "increment":"%61 = add nuw nsw i64 %12, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %11",
   "successor":"%63 = phi i64 [ %95, %94 ], [ 0, %11 ]"},
  {"begin":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %19, label %60",
           "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "comparison":"%18 = icmp slt i64 %17, %9",
   "end":"br i1 %18, label %19, label %60",
   "increment":"%59 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 0",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "post_sese":{"begin":"%61 = add nuw nsw i64 %12, 1",
                "end":"br label %11",
                "precursor":"br i1 %18, label %19, label %60",
                "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "pre_sese":{"begin":"%15 = mul i64 %12, 65",
               "end":"br label %16",
               "precursor":"br i1 %13, label %14, label %62",
               "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "precursor":"br label %16",
   "successor":"%61 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %25, label %58",
           "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "comparison":"%24 = icmp slt i64 %23, %8",
   "end":"br i1 %24, label %25, label %58",
   "increment":"%57 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 0",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "post_sese":{"begin":"%59 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %25, label %58",
                "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %19, label %60",
               "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "precursor":"br label %22",
   "successor":"%59 = add nuw nsw i64 %17, 1"}],
 "precursor":"br i1 %13, label %14, label %62",
 "reads":
 [{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"input":"%27 = mul i64 %26, 5",
                         "value":"%27 = mul i64 %26, 5"},
           "output_index":"%27 = mul i64 %26, 5",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%32 = add i64 %27, 1"},
           "output_index":"%32 = add i64 %27, 1",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%37 = add i64 %27, 2"},
           "output_index":"%37 = add i64 %27, 2",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%42 = add i64 %27, 3"},
           "output_index":"%42 = add i64 %27, 3",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}}],
 "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
 "write":{"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %26",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
           {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "input":"%15 = mul i64 %12, 65",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"}],
          "input_index":
          ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
           "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
           "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
          "offset_add":{"input":"%26 = add i64 %21, %23",
                        "value":"%26 = add i64 %21, %23"},
          "output_index":"%26 = add i64 %21, %23",
          "store":"store double %30, double* %31, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "multiplier":"i64 65",
            "value":"%15 = mul i64 %12, 65"},
           {"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "value":"%26 = add i64 %21, %23"}]}}
END stencil
BEGIN stencil
{"begin":"%15 = mul i64 %12, 65",
 "body":{"begin":"%26 = add i64 %21, %23",
         "end":"br label %22",
         "precursor":"br i1 %24, label %25, label %58",
         "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
 "end":"br label %11",
 "iterator":
 ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
  "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
  "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
 "kernel":{"constants":
           [{"use":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%46 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%54 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%29 = load double, double* %28, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%39 = load double, double* %38, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %24, label %25, label %58"],
           "output":"%35 = fmul double %30, %34",
           "restrictions":
           [{"use":"%26 = add i64 %21, %23",
             "value":"%21 = mul i64 %20, 65"},
            {"use":"%26 = add i64 %21, %23",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
            {"use":"%57 = add nuw nsw i64 %23, 1",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}]},
 "loop":
 [{"begin":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
   "body":{"begin":"%15 = mul i64 %12, 65",
           "end":"br label %11",
           "precursor":"br i1 %13, label %14, label %62",
           "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "comparison":"%13 = icmp slt i64 %12, %10",
   "end":"br i1 %13, label %14, label %62",
   "increment":"%61 = add nuw nsw i64 %12, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %11",
   "successor":"%63 = phi i64 [ %95, %94 ], [ 0, %11 ]"},
  {"begin":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %19, label %60",
           "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "comparison":"%18 = icmp slt i64 %17, %9",
   "end":"br i1 %18, label %19, label %60",
   "increment":"%59 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 0",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "post_sese":{"begin":"%61 = add nuw nsw i64 %12, 1",
                "end":"br label %11",
                "precursor":"br i1 %18, label %19, label %60",
                "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "pre_sese":{"begin":"%15 = mul i64 %12, 65",
               "end":"br label %16",
               "precursor":"br i1 %13, label %14, label %62",
               "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "precursor":"br label %16",
   "successor":"%61 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %25, label %58",
           "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "comparison":"%24 = icmp slt i64 %23, %8",
   "end":"br i1 %24, label %25, label %58",
   "increment":"%57 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 0",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "post_sese":{"begin":"%59 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %25, label %58",
                "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %19, label %60",
               "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "precursor":"br label %22",
   "successor":"%59 = add nuw nsw i64 %17, 1"}],
 "precursor":"br i1 %13, label %14, label %62",
 "reads":
 [{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"input":"%27 = mul i64 %26, 5",
                         "value":"%27 = mul i64 %26, 5"},
           "output_index":"%27 = mul i64 %26, 5",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%32 = add i64 %27, 1"},
           "output_index":"%32 = add i64 %27, 1",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%37 = add i64 %27, 2"},
           "output_index":"%37 = add i64 %27, 2",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%42 = add i64 %27, 3"},
           "output_index":"%42 = add i64 %27, 3",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}}],
 "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
 "write":{"address":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %26",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
           {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "input":"%15 = mul i64 %12, 65",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"}],
          "input_index":
          ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
           "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
           "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
          "offset_add":{"input":"%26 = add i64 %21, %23",
                        "value":"%26 = add i64 %21, %23"},
          "output_index":"%26 = add i64 %21, %23",
          "store":"store double %35, double* %36, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "multiplier":"i64 65",
            "value":"%15 = mul i64 %12, 65"},
           {"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "value":"%26 = add i64 %21, %23"}]}}
END stencil
BEGIN stencil
{"begin":"%15 = mul i64 %12, 65",
 "body":{"begin":"%26 = add i64 %21, %23",
         "end":"br label %22",
         "precursor":"br i1 %24, label %25, label %58",
         "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
 "end":"br label %11",
 "iterator":
 ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
  "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
  "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
 "kernel":{"constants":
           [{"use":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%46 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%54 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%29 = load double, double* %28, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%39 = load double, double* %38, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %24, label %25, label %58"],
           "output":"%40 = fmul double %30, %39",
           "restrictions":
           [{"use":"%26 = add i64 %21, %23",
             "value":"%21 = mul i64 %20, 65"},
            {"use":"%26 = add i64 %21, %23",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
            {"use":"%57 = add nuw nsw i64 %23, 1",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}]},
 "loop":
 [{"begin":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
   "body":{"begin":"%15 = mul i64 %12, 65",
           "end":"br label %11",
           "precursor":"br i1 %13, label %14, label %62",
           "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "comparison":"%13 = icmp slt i64 %12, %10",
   "end":"br i1 %13, label %14, label %62",
   "increment":"%61 = add nuw nsw i64 %12, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %11",
   "successor":"%63 = phi i64 [ %95, %94 ], [ 0, %11 ]"},
  {"begin":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %19, label %60",
           "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "comparison":"%18 = icmp slt i64 %17, %9",
   "end":"br i1 %18, label %19, label %60",
   "increment":"%59 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 0",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "post_sese":{"begin":"%61 = add nuw nsw i64 %12, 1",
                "end":"br label %11",
                "precursor":"br i1 %18, label %19, label %60",
                "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "pre_sese":{"begin":"%15 = mul i64 %12, 65",
               "end":"br label %16",
               "precursor":"br i1 %13, label %14, label %62",
               "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "precursor":"br label %16",
   "successor":"%61 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %25, label %58",
           "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "comparison":"%24 = icmp slt i64 %23, %8",
   "end":"br i1 %24, label %25, label %58",
   "increment":"%57 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 0",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "post_sese":{"begin":"%59 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %25, label %58",
                "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %19, label %60",
               "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "precursor":"br label %22",
   "successor":"%59 = add nuw nsw i64 %17, 1"}],
 "precursor":"br i1 %13, label %14, label %62",
 "reads":
 [{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"input":"%27 = mul i64 %26, 5",
                         "value":"%27 = mul i64 %26, 5"},
           "output_index":"%27 = mul i64 %26, 5",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%32 = add i64 %27, 1"},
           "output_index":"%32 = add i64 %27, 1",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%37 = add i64 %27, 2"},
           "output_index":"%37 = add i64 %27, 2",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%42 = add i64 %27, 3"},
           "output_index":"%42 = add i64 %27, 3",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}}],
 "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
 "write":{"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %26",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
           {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "input":"%15 = mul i64 %12, 65",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"}],
          "input_index":
          ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
           "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
           "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
          "offset_add":{"input":"%26 = add i64 %21, %23",
                        "value":"%26 = add i64 %21, %23"},
          "output_index":"%26 = add i64 %21, %23",
          "store":"store double %40, double* %41, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "multiplier":"i64 65",
            "value":"%15 = mul i64 %12, 65"},
           {"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "value":"%26 = add i64 %21, %23"}]}}
END stencil
BEGIN stencil
{"begin":"%15 = mul i64 %12, 65",
 "body":{"begin":"%26 = add i64 %21, %23",
         "end":"br label %22",
         "precursor":"br i1 %24, label %25, label %58",
         "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
 "end":"br label %11",
 "iterator":
 ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
  "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
  "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
 "kernel":{"constants":
           [{"use":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%46 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%54 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%29 = load double, double* %28, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%39 = load double, double* %38, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %24, label %25, label %58"],
           "output":"%45 = fmul double %30, %44",
           "restrictions":
           [{"use":"%26 = add i64 %21, %23",
             "value":"%21 = mul i64 %20, 65"},
            {"use":"%26 = add i64 %21, %23",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
            {"use":"%57 = add nuw nsw i64 %23, 1",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}]},
 "loop":
 [{"begin":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
   "body":{"begin":"%15 = mul i64 %12, 65",
           "end":"br label %11",
           "precursor":"br i1 %13, label %14, label %62",
           "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "comparison":"%13 = icmp slt i64 %12, %10",
   "end":"br i1 %13, label %14, label %62",
   "increment":"%61 = add nuw nsw i64 %12, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %11",
   "successor":"%63 = phi i64 [ %95, %94 ], [ 0, %11 ]"},
  {"begin":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %19, label %60",
           "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "comparison":"%18 = icmp slt i64 %17, %9",
   "end":"br i1 %18, label %19, label %60",
   "increment":"%59 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 0",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "post_sese":{"begin":"%61 = add nuw nsw i64 %12, 1",
                "end":"br label %11",
                "precursor":"br i1 %18, label %19, label %60",
                "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "pre_sese":{"begin":"%15 = mul i64 %12, 65",
               "end":"br label %16",
               "precursor":"br i1 %13, label %14, label %62",
               "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "precursor":"br label %16",
   "successor":"%61 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %25, label %58",
           "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "comparison":"%24 = icmp slt i64 %23, %8",
   "end":"br i1 %24, label %25, label %58",
   "increment":"%57 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 0",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "post_sese":{"begin":"%59 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %25, label %58",
                "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %19, label %60",
               "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "precursor":"br label %22",
   "successor":"%59 = add nuw nsw i64 %17, 1"}],
 "precursor":"br i1 %13, label %14, label %62",
 "reads":
 [{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"input":"%27 = mul i64 %26, 5",
                         "value":"%27 = mul i64 %26, 5"},
           "output_index":"%27 = mul i64 %26, 5",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%32 = add i64 %27, 1"},
           "output_index":"%32 = add i64 %27, 1",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%37 = add i64 %27, 2"},
           "output_index":"%37 = add i64 %27, 2",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%42 = add i64 %27, 3"},
           "output_index":"%42 = add i64 %27, 3",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}}],
 "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
 "write":{"address":"%46 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %26",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
           {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "input":"%15 = mul i64 %12, 65",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"}],
          "input_index":
          ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
           "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
           "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
          "offset_add":{"input":"%26 = add i64 %21, %23",
                        "value":"%26 = add i64 %21, %23"},
          "output_index":"%26 = add i64 %21, %23",
          "store":"store double %45, double* %46, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "multiplier":"i64 65",
            "value":"%15 = mul i64 %12, 65"},
           {"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "value":"%26 = add i64 %21, %23"}]}}
END stencil
BEGIN stencil
{"begin":"%15 = mul i64 %12, 65",
 "body":{"begin":"%26 = add i64 %21, %23",
         "end":"br label %22",
         "precursor":"br i1 %24, label %25, label %58",
         "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
 "end":"br label %11",
 "iterator":
 ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
  "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
  "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
 "kernel":{"constants":
           [{"use":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%46 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%54 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%29 = load double, double* %28, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%39 = load double, double* %38, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %24, label %25, label %58"],
           "output":"%53 = fmul double %30, %52",
           "restrictions":
           [{"use":"%26 = add i64 %21, %23",
             "value":"%21 = mul i64 %20, 65"},
            {"use":"%26 = add i64 %21, %23",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
            {"use":"%57 = add nuw nsw i64 %23, 1",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}]},
 "loop":
 [{"begin":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
   "body":{"begin":"%15 = mul i64 %12, 65",
           "end":"br label %11",
           "precursor":"br i1 %13, label %14, label %62",
           "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "comparison":"%13 = icmp slt i64 %12, %10",
   "end":"br i1 %13, label %14, label %62",
   "increment":"%61 = add nuw nsw i64 %12, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %11",
   "successor":"%63 = phi i64 [ %95, %94 ], [ 0, %11 ]"},
  {"begin":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %19, label %60",
           "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "comparison":"%18 = icmp slt i64 %17, %9",
   "end":"br i1 %18, label %19, label %60",
   "increment":"%59 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 0",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "post_sese":{"begin":"%61 = add nuw nsw i64 %12, 1",
                "end":"br label %11",
                "precursor":"br i1 %18, label %19, label %60",
                "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "pre_sese":{"begin":"%15 = mul i64 %12, 65",
               "end":"br label %16",
               "precursor":"br i1 %13, label %14, label %62",
               "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "precursor":"br label %16",
   "successor":"%61 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %25, label %58",
           "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "comparison":"%24 = icmp slt i64 %23, %8",
   "end":"br i1 %24, label %25, label %58",
   "increment":"%57 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 0",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "post_sese":{"begin":"%59 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %25, label %58",
                "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %19, label %60",
               "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "precursor":"br label %22",
   "successor":"%59 = add nuw nsw i64 %17, 1"}],
 "precursor":"br i1 %13, label %14, label %62",
 "reads":
 [{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"input":"%27 = mul i64 %26, 5",
                         "value":"%27 = mul i64 %26, 5"},
           "output_index":"%27 = mul i64 %26, 5",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%32 = add i64 %27, 1"},
           "output_index":"%32 = add i64 %27, 1",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%37 = add i64 %27, 2"},
           "output_index":"%37 = add i64 %27, 2",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%42 = add i64 %27, 3"},
           "output_index":"%42 = add i64 %27, 3",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}}],
 "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
 "write":{"address":"%54 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0), i64 %26",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
           {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "input":"%15 = mul i64 %12, 65",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"}],
          "input_index":
          ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
           "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
           "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
          "offset_add":{"input":"%26 = add i64 %21, %23",
                        "value":"%26 = add i64 %21, %23"},
          "output_index":"%26 = add i64 %21, %23",
          "store":"store double %53, double* %54, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "multiplier":"i64 65",
            "value":"%15 = mul i64 %12, 65"},
           {"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "value":"%26 = add i64 %21, %23"}]}}
END stencil
BEGIN stencil
{"begin":"%15 = mul i64 %12, 65",
 "body":{"begin":"%26 = add i64 %21, %23",
         "end":"br label %22",
         "precursor":"br i1 %24, label %25, label %58",
         "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
 "end":"br label %11",
 "iterator":
 ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
  "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
  "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
 "kernel":{"constants":
           [{"use":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%46 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%54 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @square, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %26",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%29 = load double, double* %28, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%39 = load double, double* %38, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %24, label %25, label %58"],
           "output":"%55 = fmul double %30, %53",
           "restrictions":
           [{"use":"%26 = add i64 %21, %23",
             "value":"%21 = mul i64 %20, 65"},
            {"use":"%26 = add i64 %21, %23",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
            {"use":"%57 = add nuw nsw i64 %23, 1",
             "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}]},
 "loop":
 [{"begin":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
   "body":{"begin":"%15 = mul i64 %12, 65",
           "end":"br label %11",
           "precursor":"br i1 %13, label %14, label %62",
           "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "comparison":"%13 = icmp slt i64 %12, %10",
   "end":"br i1 %13, label %14, label %62",
   "increment":"%61 = add nuw nsw i64 %12, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %11",
   "successor":"%63 = phi i64 [ %95, %94 ], [ 0, %11 ]"},
  {"begin":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %19, label %60",
           "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "comparison":"%18 = icmp slt i64 %17, %9",
   "end":"br i1 %18, label %19, label %60",
   "increment":"%59 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 0",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
   "post_sese":{"begin":"%61 = add nuw nsw i64 %12, 1",
                "end":"br label %11",
                "precursor":"br i1 %18, label %19, label %60",
                "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
   "pre_sese":{"begin":"%15 = mul i64 %12, 65",
               "end":"br label %16",
               "precursor":"br i1 %13, label %14, label %62",
               "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "precursor":"br label %16",
   "successor":"%61 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %25, label %58",
           "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "comparison":"%24 = icmp slt i64 %23, %8",
   "end":"br i1 %24, label %25, label %58",
   "increment":"%57 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 0",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
   "post_sese":{"begin":"%59 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %25, label %58",
                "successor":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %19, label %60",
               "successor":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"},
   "precursor":"br label %22",
   "successor":"%59 = add nuw nsw i64 %17, 1"}],
 "precursor":"br i1 %13, label %14, label %62",
 "reads":
 [{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"input":"%27 = mul i64 %26, 5",
                         "value":"%27 = mul i64 %26, 5"},
           "output_index":"%27 = mul i64 %26, 5",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%32 = add i64 %27, 1"},
           "output_index":"%32 = add i64 %27, 1",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %37",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%37 = add i64 %27, 2"},
           "output_index":"%37 = add i64 %27, 2",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
     "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
    {"input":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
     "value":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]"},
    {"input":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
     "value":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"}],
   "input_index":
   ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
    "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
    "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
            {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
             "input":"%15 = mul i64 %12, 65",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"}],
           "input_index":
           ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%27 = mul i64 %26, 5",
                         "value":"%42 = add i64 %27, 3"},
           "output_index":"%42 = add i64 %27, 3",
           "stride_mul":
           [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
             "multiplier":"i64 65",
             "value":"%15 = mul i64 %12, 65"},
            {"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"}]}}],
 "successor":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
 "write":{"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %26",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "value":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]"},
           {"addend":"%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
            "input":"%15 = mul i64 %12, 65",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %57, %25 ], [ 0, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"}],
          "input_index":
          ["%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
           "%17 = phi i64 [ %59, %58 ], [ 0, %14 ]",
           "%23 = phi i64 [ %57, %25 ], [ 0, %19 ]"],
          "offset_add":{"input":"%26 = add i64 %21, %23",
                        "value":"%26 = add i64 %21, %23"},
          "output_index":"%26 = add i64 %21, %23",
          "store":"store double %55, double* %56, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%12 = phi i64 [ %61, %60 ], [ 0, %4 ]",
            "multiplier":"i64 65",
            "value":"%15 = mul i64 %12, 65"},
           {"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "value":"%26 = add i64 %21, %23"}]}}
END stencil
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%408 = add i64 %138, %405",
 "body":{"begin":"%432 = add i64 %419, %429",
         "end":"br label %428",
         "precursor":"br i1 %430, label %410, label %431",
         "successor":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"},
 "end":"br label %404",
 "iterator":
 ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
  "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
  "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
 "kernel":{"constants":
           [{"use":"%436 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %435",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%439 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %438",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%443 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %432",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%448 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %447",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%453 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %452",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%433 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %432",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%456 = fmul double %124, %455",
             "value":"%124 = load double, double* @dssp, align 8"}],
           "input":
           ["%434 = load double, double* %433, align 8, !tbaa !7",
            "%437 = load double, double* %436, align 8, !tbaa !7",
            "%440 = load double, double* %439, align 8, !tbaa !7",
            "%444 = load double, double* %443, align 8, !tbaa !7",
            "%449 = load double, double* %448, align 8, !tbaa !7",
            "%454 = load double, double* %453, align 8, !tbaa !7"],
           "origin":
           ["br i1 %430, label %410, label %431"],
           "output":"%457 = fsub double %434, %456",
           "restrictions":
           [{"use":"%432 = add i64 %419, %429",
             "value":"%419 = mul i64 %418, 5"},
            {"use":"%435 = add i64 %421, %429",
             "value":"%421 = mul i64 %420, 5"},
            {"use":"%438 = add i64 %423, %429",
             "value":"%423 = mul i64 %422, 5"},
            {"use":"%447 = add i64 %425, %429",
             "value":"%425 = mul i64 %424, 5"},
            {"use":"%452 = add i64 %427, %429",
             "value":"%427 = mul i64 %426, 5"},
            {"use":"%432 = add i64 %419, %429",
             "value":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"},
            {"use":"%435 = add i64 %421, %429",
             "value":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"},
            {"use":"%438 = add i64 %423, %429",
             "value":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"}]},
 "loop":
 [{"begin":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
   "body":{"begin":"%408 = add i64 %138, %405",
           "end":"br label %404",
           "precursor":"br i1 %406, label %461, label %407",
           "successor":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]"},
   "comparison":"%406 = icmp sgt i64 %405, %132",
   "end":"br i1 %406, label %461, label %407",
   "increment":"%460 = add nuw nsw i64 %405, 1",
   "iter_begin":"i64 1",
   "iter_end":"%132 = sext i32 %108 to i64",
   "iter_step":"i64 1",
   "precursor":"br i1 %340, label %404, label %341",
   "successor":"%462 = phi i64 [ %525, %524 ], [ 1, %404 ]"},
  {"begin":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
   "body":{"begin":"%414 = add nsw i64 %411, -2",
           "end":"br i1 %430, label %410, label %431",
           "precursor":"br i1 %412, label %459, label %413",
           "successor":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]"},
   "comparison":"%412 = icmp sgt i64 %411, %130",
   "end":"br i1 %412, label %459, label %413",
   "increment":"%416 = add nuw nsw i64 %411, 1",
   "iter_begin":"i64 3",
   "iter_end":"%130 = sext i32 %125 to i64",
   "iter_step":"i64 1",
   "iterator":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
   "post_sese":{"begin":"%460 = add nuw nsw i64 %405, 1",
                "end":"br label %404",
                "precursor":"br i1 %412, label %459, label %413",
                "successor":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]"},
   "pre_sese":{"begin":"%408 = add i64 %138, %405",
               "end":"br label %410",
               "precursor":"br i1 %406, label %461, label %407",
               "successor":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]"},
   "precursor":"br label %410",
   "successor":"%460 = add nuw nsw i64 %405, 1"},
  {"begin":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
   "body":{"begin":"%432 = add i64 %419, %429",
           "end":"br label %428",
           "precursor":"br i1 %430, label %410, label %431",
           "successor":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"},
   "comparison":"%430 = icmp eq i64 %429, 5",
   "end":"br i1 %430, label %410, label %431",
   "increment":"%458 = add nuw nsw i64 %429, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
   "post_sese":{"begin":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
                "end":"br i1 %430, label %410, label %431",
                "precursor":"br i1 %430, label %410, label %431",
                "successor":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]"},
   "pre_sese":{"begin":"%414 = add nsw i64 %411, -2",
               "end":"br label %428",
               "precursor":"br i1 %412, label %459, label %413",
               "successor":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"},
   "precursor":"br label %428",
   "successor":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]"}],
 "precursor":"br i1 %406, label %461, label %407",
 "reads":
 [{"address":"%433 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %432",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
     "value":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]"},
    {"input":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
     "value":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]"},
    {"input":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
     "value":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"}],
   "input_index":
   ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
    "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
    "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
   "read":{"address":"%433 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %432",
           "base_index":"%138 = mul i64 %135, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%138 = mul i64 %135, 65",
             "input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
             "value":"%408 = add i64 %138, %405"},
            {"addend":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
             "input":"%409 = mul i64 %408, 65",
             "value":"%418 = add i64 %409, %411"},
            {"addend":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
             "input":"%419 = mul i64 %418, 5",
             "value":"%432 = add i64 %419, %429"}],
           "input_index":
           ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
            "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
            "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
           "offset_add":{"input":"%432 = add i64 %419, %429",
                         "value":"%432 = add i64 %419, %429"},
           "output_index":"%432 = add i64 %419, %429",
           "stride_mul":
           [{"input":"%408 = add i64 %138, %405",
             "multiplier":"i64 65",
             "value":"%409 = mul i64 %408, 65"},
            {"input":"%418 = add i64 %409, %411",
             "multiplier":"i64 5",
             "value":"%419 = mul i64 %418, 5"},
            {"input":"%432 = add i64 %419, %429",
             "value":"%432 = add i64 %419, %429"}]}},
  {"address":"%436 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %435",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
     "value":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]"},
    {"addend":"i64 -2",
     "input":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
     "value":"%414 = add nsw i64 %411, -2"},
    {"input":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
     "value":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"}],
   "input_index":
   ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
    "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
    "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
   "read":{"address":"%436 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %435",
           "base_index":"%138 = mul i64 %135, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%138 = mul i64 %135, 65",
             "input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
             "value":"%408 = add i64 %138, %405"},
            {"addend":"%414 = add nsw i64 %411, -2",
             "input":"%409 = mul i64 %408, 65",
             "value":"%420 = add i64 %409, %414"},
            {"addend":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
             "input":"%421 = mul i64 %420, 5",
             "value":"%435 = add i64 %421, %429"}],
           "input_index":
           ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
            "%414 = add nsw i64 %411, -2",
            "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
           "offset_add":{"input":"%435 = add i64 %421, %429",
                         "value":"%435 = add i64 %421, %429"},
           "output_index":"%435 = add i64 %421, %429",
           "stride_mul":
           [{"input":"%408 = add i64 %138, %405",
             "multiplier":"i64 65",
             "value":"%409 = mul i64 %408, 65"},
            {"input":"%420 = add i64 %409, %414",
             "multiplier":"i64 5",
             "value":"%421 = mul i64 %420, 5"},
            {"input":"%435 = add i64 %421, %429",
             "value":"%435 = add i64 %421, %429"}]}},
  {"address":"%439 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %438",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
     "value":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]"},
    {"addend":"i64 -1",
     "input":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
     "value":"%415 = add nsw i64 %411, -1"},
    {"input":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
     "value":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"}],
   "input_index":
   ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
    "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
    "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
   "read":{"address":"%439 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %438",
           "base_index":"%138 = mul i64 %135, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%138 = mul i64 %135, 65",
             "input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
             "value":"%408 = add i64 %138, %405"},
            {"addend":"%415 = add nsw i64 %411, -1",
             "input":"%409 = mul i64 %408, 65",
             "value":"%422 = add i64 %409, %415"},
            {"addend":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
             "input":"%423 = mul i64 %422, 5",
             "value":"%438 = add i64 %423, %429"}],
           "input_index":
           ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
            "%415 = add nsw i64 %411, -1",
            "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
           "offset_add":{"input":"%438 = add i64 %423, %429",
                         "value":"%438 = add i64 %423, %429"},
           "output_index":"%438 = add i64 %423, %429",
           "stride_mul":
           [{"input":"%408 = add i64 %138, %405",
             "multiplier":"i64 65",
             "value":"%409 = mul i64 %408, 65"},
            {"input":"%422 = add i64 %409, %415",
             "multiplier":"i64 5",
             "value":"%423 = mul i64 %422, 5"},
            {"input":"%438 = add i64 %423, %429",
             "value":"%438 = add i64 %423, %429"}]}},
  {"address":"%443 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %432",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
     "value":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]"},
    {"input":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
     "value":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]"},
    {"input":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
     "value":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"}],
   "input_index":
   ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
    "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
    "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
   "read":{"address":"%443 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %432",
           "base_index":"%138 = mul i64 %135, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%138 = mul i64 %135, 65",
             "input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
             "value":"%408 = add i64 %138, %405"},
            {"addend":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
             "input":"%409 = mul i64 %408, 65",
             "value":"%418 = add i64 %409, %411"},
            {"addend":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
             "input":"%419 = mul i64 %418, 5",
             "value":"%432 = add i64 %419, %429"}],
           "input_index":
           ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
            "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
            "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
           "offset_add":{"input":"%432 = add i64 %419, %429",
                         "value":"%432 = add i64 %419, %429"},
           "output_index":"%432 = add i64 %419, %429",
           "stride_mul":
           [{"input":"%408 = add i64 %138, %405",
             "multiplier":"i64 65",
             "value":"%409 = mul i64 %408, 65"},
            {"input":"%418 = add i64 %409, %411",
             "multiplier":"i64 5",
             "value":"%419 = mul i64 %418, 5"},
            {"input":"%432 = add i64 %419, %429",
             "value":"%432 = add i64 %419, %429"}]}},
  {"address":"%448 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %447",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
     "value":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]"},
    {"addend":"i64 1",
     "input":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
     "value":"%416 = add nuw nsw i64 %411, 1"},
    {"input":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
     "value":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"}],
   "input_index":
   ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
    "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
    "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
   "read":{"address":"%448 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %447",
           "base_index":"%138 = mul i64 %135, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%138 = mul i64 %135, 65",
             "input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
             "value":"%408 = add i64 %138, %405"},
            {"addend":"%416 = add nuw nsw i64 %411, 1",
             "input":"%409 = mul i64 %408, 65",
             "value":"%424 = add i64 %409, %416"},
            {"addend":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
             "input":"%425 = mul i64 %424, 5",
             "value":"%447 = add i64 %425, %429"}],
           "input_index":
           ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
            "%416 = add nuw nsw i64 %411, 1",
            "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
           "offset_add":{"input":"%447 = add i64 %425, %429",
                         "value":"%447 = add i64 %425, %429"},
           "output_index":"%447 = add i64 %425, %429",
           "stride_mul":
           [{"input":"%408 = add i64 %138, %405",
             "multiplier":"i64 65",
             "value":"%409 = mul i64 %408, 65"},
            {"input":"%424 = add i64 %409, %416",
             "multiplier":"i64 5",
             "value":"%425 = mul i64 %424, 5"},
            {"input":"%447 = add i64 %425, %429",
             "value":"%447 = add i64 %425, %429"}]}},
  {"address":"%453 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %452",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
     "value":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]"},
    {"addend":"i64 2",
     "input":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
     "value":"%417 = add nuw nsw i64 %411, 2"},
    {"input":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
     "value":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"}],
   "input_index":
   ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
    "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
    "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
   "read":{"address":"%453 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %452",
           "base_index":"%138 = mul i64 %135, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%138 = mul i64 %135, 65",
             "input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
             "value":"%408 = add i64 %138, %405"},
            {"addend":"%417 = add nuw nsw i64 %411, 2",
             "input":"%409 = mul i64 %408, 65",
             "value":"%426 = add i64 %409, %417"},
            {"addend":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
             "input":"%427 = mul i64 %426, 5",
             "value":"%452 = add i64 %427, %429"}],
           "input_index":
           ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
            "%417 = add nuw nsw i64 %411, 2",
            "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
           "offset_add":{"input":"%452 = add i64 %427, %429",
                         "value":"%452 = add i64 %427, %429"},
           "output_index":"%452 = add i64 %427, %429",
           "stride_mul":
           [{"input":"%408 = add i64 %138, %405",
             "multiplier":"i64 65",
             "value":"%409 = mul i64 %408, 65"},
            {"input":"%426 = add i64 %409, %417",
             "multiplier":"i64 5",
             "value":"%427 = mul i64 %426, 5"},
            {"input":"%452 = add i64 %427, %429",
             "value":"%452 = add i64 %427, %429"}]}}],
 "successor":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
 "write":{"address":"%433 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %432",
          "base_index":"%138 = mul i64 %135, 65",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%138 = mul i64 %135, 65",
            "input":"%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
            "value":"%408 = add i64 %138, %405"},
           {"addend":"%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
            "input":"%409 = mul i64 %408, 65",
            "value":"%418 = add i64 %409, %411"},
           {"addend":"%429 = phi i64 [ %458, %431 ], [ 0, %413 ]",
            "input":"%419 = mul i64 %418, 5",
            "value":"%432 = add i64 %419, %429"}],
          "input_index":
          ["%405 = phi i64 [ %460, %459 ], [ 1, %338 ]",
           "%411 = phi i64 [ 3, %407 ], [ %416, %428 ]",
           "%429 = phi i64 [ %458, %431 ], [ 0, %413 ]"],
          "offset_add":{"input":"%432 = add i64 %419, %429",
                        "value":"%432 = add i64 %419, %429"},
          "output_index":"%432 = add i64 %419, %429",
          "store":"store double %457, double* %433, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%408 = add i64 %138, %405",
            "multiplier":"i64 65",
            "value":"%409 = mul i64 %408, 65"},
           {"input":"%418 = add i64 %409, %411",
            "multiplier":"i64 5",
            "value":"%419 = mul i64 %418, 5"},
           {"input":"%432 = add i64 %419, %429",
            "value":"%432 = add i64 %419, %429"}]}}
END stencil
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%862 = add nsw i64 %859, -2",
 "body":{"begin":"%894 = add i64 %881, %891",
         "end":"br label %890",
         "precursor":"br i1 %892, label %921, label %893",
         "successor":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"},
 "end":"br i1 %878, label %858, label %879",
 "iterator":
 ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
  "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
  "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
 "kernel":{"constants":
           [{"use":"%898 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %897",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%901 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %900",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%905 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %894",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%910 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %909",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%915 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %914",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%895 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %894",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%918 = fmul double %556, %917",
             "value":"%556 = load double, double* @dssp, align 8"}],
           "input":
           ["%896 = load double, double* %895, align 8, !tbaa !7",
            "%899 = load double, double* %898, align 8, !tbaa !7",
            "%902 = load double, double* %901, align 8, !tbaa !7",
            "%906 = load double, double* %905, align 8, !tbaa !7",
            "%911 = load double, double* %910, align 8, !tbaa !7",
            "%916 = load double, double* %915, align 8, !tbaa !7"],
           "origin":
           ["br i1 %892, label %921, label %893"],
           "output":"%919 = fsub double %896, %918",
           "restrictions":
           [{"use":"%894 = add i64 %881, %891",
             "value":"%881 = mul i64 %880, 5"},
            {"use":"%897 = add i64 %883, %891",
             "value":"%883 = mul i64 %882, 5"},
            {"use":"%900 = add i64 %885, %891",
             "value":"%885 = mul i64 %884, 5"},
            {"use":"%909 = add i64 %887, %891",
             "value":"%887 = mul i64 %886, 5"},
            {"use":"%914 = add i64 %889, %891",
             "value":"%889 = mul i64 %888, 5"},
            {"use":"%894 = add i64 %881, %891",
             "value":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"},
            {"use":"%897 = add i64 %883, %891",
             "value":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"},
            {"use":"%900 = add i64 %885, %891",
             "value":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"}]},
 "loop":
 [{"begin":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
   "body":{"begin":"%862 = add nsw i64 %859, -2",
           "end":"br i1 %878, label %858, label %879",
           "precursor":"br i1 %860, label %923, label %861",
           "successor":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]"},
   "comparison":"%860 = icmp sgt i64 %859, %561",
   "end":"br i1 %860, label %923, label %861",
   "increment":"%864 = add nuw nsw i64 %859, 1",
   "iter_begin":"i64 3",
   "iter_end":"%561 = sext i32 %560 to i64",
   "iter_step":"i64 1",
   "precursor":"br i1 %819, label %858, label %820",
   "successor":"%924 = add i64 %570, %563"},
  {"begin":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
   "body":{"begin":"%880 = add i64 %867, %877",
           "end":"br label %876",
           "precursor":"br i1 %878, label %858, label %879",
           "successor":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]"},
   "comparison":"%878 = icmp sgt i64 %877, %557",
   "end":"br i1 %878, label %858, label %879",
   "increment":"%922 = add nuw nsw i64 %877, 1",
   "iter_begin":"i64 1",
   "iter_end":"%557 = sext i32 %541 to i64",
   "iter_step":"i64 1",
   "iterator":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
   "post_sese":{"begin":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
                "end":"br i1 %878, label %858, label %879",
                "precursor":"br i1 %878, label %858, label %879",
                "successor":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]"},
   "pre_sese":{"begin":"%862 = add nsw i64 %859, -2",
               "end":"br label %876",
               "precursor":"br i1 %860, label %923, label %861",
               "successor":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]"},
   "precursor":"br label %876",
   "successor":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]"},
  {"begin":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
   "body":{"begin":"%894 = add i64 %881, %891",
           "end":"br label %890",
           "precursor":"br i1 %892, label %921, label %893",
           "successor":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"},
   "comparison":"%892 = icmp eq i64 %891, 5",
   "end":"br i1 %892, label %921, label %893",
   "increment":"%920 = add nuw nsw i64 %891, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
   "post_sese":{"begin":"%922 = add nuw nsw i64 %877, 1",
                "end":"br label %876",
                "precursor":"br i1 %892, label %921, label %893",
                "successor":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]"},
   "pre_sese":{"begin":"%880 = add i64 %867, %877",
               "end":"br label %890",
               "precursor":"br i1 %878, label %858, label %879",
               "successor":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"},
   "precursor":"br label %890",
   "successor":"%922 = add nuw nsw i64 %877, 1"}],
 "precursor":"br i1 %860, label %923, label %861",
 "reads":
 [{"address":"%895 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %894",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
     "value":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]"},
    {"input":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
     "value":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]"},
    {"input":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
     "value":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"}],
   "input_index":
   ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
    "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
    "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
   "read":{"address":"%895 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %894",
           "base_index":"%570 = mul i64 %567, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%570 = mul i64 %567, 65",
             "input":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
             "value":"%866 = add i64 %570, %859"},
            {"addend":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
             "input":"%867 = mul i64 %866, 65",
             "value":"%880 = add i64 %867, %877"},
            {"addend":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
             "input":"%881 = mul i64 %880, 5",
             "value":"%894 = add i64 %881, %891"}],
           "input_index":
           ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
            "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
            "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
           "offset_add":{"input":"%894 = add i64 %881, %891",
                         "value":"%894 = add i64 %881, %891"},
           "output_index":"%894 = add i64 %881, %891",
           "stride_mul":
           [{"input":"%866 = add i64 %570, %859",
             "multiplier":"i64 65",
             "value":"%867 = mul i64 %866, 65"},
            {"input":"%880 = add i64 %867, %877",
             "multiplier":"i64 5",
             "value":"%881 = mul i64 %880, 5"},
            {"input":"%894 = add i64 %881, %891",
             "value":"%894 = add i64 %881, %891"}]}},
  {"address":"%898 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %897",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 -2",
     "input":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
     "value":"%862 = add nsw i64 %859, -2"},
    {"input":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
     "value":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]"},
    {"input":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
     "value":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"}],
   "input_index":
   ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
    "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
    "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
   "read":{"address":"%898 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %897",
           "base_index":"%570 = mul i64 %567, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%570 = mul i64 %567, 65",
             "input":"%862 = add nsw i64 %859, -2",
             "value":"%868 = add i64 %570, %862"},
            {"addend":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
             "input":"%869 = mul i64 %868, 65",
             "value":"%882 = add i64 %869, %877"},
            {"addend":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
             "input":"%883 = mul i64 %882, 5",
             "value":"%897 = add i64 %883, %891"}],
           "input_index":
           ["%862 = add nsw i64 %859, -2",
            "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
            "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
           "offset_add":{"input":"%897 = add i64 %883, %891",
                         "value":"%897 = add i64 %883, %891"},
           "output_index":"%897 = add i64 %883, %891",
           "stride_mul":
           [{"input":"%868 = add i64 %570, %862",
             "multiplier":"i64 65",
             "value":"%869 = mul i64 %868, 65"},
            {"input":"%882 = add i64 %869, %877",
             "multiplier":"i64 5",
             "value":"%883 = mul i64 %882, 5"},
            {"input":"%897 = add i64 %883, %891",
             "value":"%897 = add i64 %883, %891"}]}},
  {"address":"%901 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %900",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 -1",
     "input":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
     "value":"%863 = add nsw i64 %859, -1"},
    {"input":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
     "value":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]"},
    {"input":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
     "value":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"}],
   "input_index":
   ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
    "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
    "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
   "read":{"address":"%901 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %900",
           "base_index":"%570 = mul i64 %567, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%570 = mul i64 %567, 65",
             "input":"%863 = add nsw i64 %859, -1",
             "value":"%870 = add i64 %570, %863"},
            {"addend":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
             "input":"%871 = mul i64 %870, 65",
             "value":"%884 = add i64 %871, %877"},
            {"addend":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
             "input":"%885 = mul i64 %884, 5",
             "value":"%900 = add i64 %885, %891"}],
           "input_index":
           ["%863 = add nsw i64 %859, -1",
            "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
            "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
           "offset_add":{"input":"%900 = add i64 %885, %891",
                         "value":"%900 = add i64 %885, %891"},
           "output_index":"%900 = add i64 %885, %891",
           "stride_mul":
           [{"input":"%870 = add i64 %570, %863",
             "multiplier":"i64 65",
             "value":"%871 = mul i64 %870, 65"},
            {"input":"%884 = add i64 %871, %877",
             "multiplier":"i64 5",
             "value":"%885 = mul i64 %884, 5"},
            {"input":"%900 = add i64 %885, %891",
             "value":"%900 = add i64 %885, %891"}]}},
  {"address":"%905 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %894",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
     "value":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]"},
    {"input":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
     "value":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]"},
    {"input":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
     "value":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"}],
   "input_index":
   ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
    "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
    "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
   "read":{"address":"%905 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %894",
           "base_index":"%570 = mul i64 %567, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%570 = mul i64 %567, 65",
             "input":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
             "value":"%866 = add i64 %570, %859"},
            {"addend":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
             "input":"%867 = mul i64 %866, 65",
             "value":"%880 = add i64 %867, %877"},
            {"addend":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
             "input":"%881 = mul i64 %880, 5",
             "value":"%894 = add i64 %881, %891"}],
           "input_index":
           ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
            "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
            "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
           "offset_add":{"input":"%894 = add i64 %881, %891",
                         "value":"%894 = add i64 %881, %891"},
           "output_index":"%894 = add i64 %881, %891",
           "stride_mul":
           [{"input":"%866 = add i64 %570, %859",
             "multiplier":"i64 65",
             "value":"%867 = mul i64 %866, 65"},
            {"input":"%880 = add i64 %867, %877",
             "multiplier":"i64 5",
             "value":"%881 = mul i64 %880, 5"},
            {"input":"%894 = add i64 %881, %891",
             "value":"%894 = add i64 %881, %891"}]}},
  {"address":"%910 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %909",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 1",
     "input":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
     "value":"%864 = add nuw nsw i64 %859, 1"},
    {"input":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
     "value":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]"},
    {"input":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
     "value":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"}],
   "input_index":
   ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
    "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
    "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
   "read":{"address":"%910 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %909",
           "base_index":"%570 = mul i64 %567, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%570 = mul i64 %567, 65",
             "input":"%864 = add nuw nsw i64 %859, 1",
             "value":"%872 = add i64 %570, %864"},
            {"addend":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
             "input":"%873 = mul i64 %872, 65",
             "value":"%886 = add i64 %873, %877"},
            {"addend":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
             "input":"%887 = mul i64 %886, 5",
             "value":"%909 = add i64 %887, %891"}],
           "input_index":
           ["%864 = add nuw nsw i64 %859, 1",
            "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
            "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
           "offset_add":{"input":"%909 = add i64 %887, %891",
                         "value":"%909 = add i64 %887, %891"},
           "output_index":"%909 = add i64 %887, %891",
           "stride_mul":
           [{"input":"%872 = add i64 %570, %864",
             "multiplier":"i64 65",
             "value":"%873 = mul i64 %872, 65"},
            {"input":"%886 = add i64 %873, %877",
             "multiplier":"i64 5",
             "value":"%887 = mul i64 %886, 5"},
            {"input":"%909 = add i64 %887, %891",
             "value":"%909 = add i64 %887, %891"}]}},
  {"address":"%915 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %914",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 2",
     "input":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
     "value":"%865 = add nuw nsw i64 %859, 2"},
    {"input":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
     "value":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]"},
    {"input":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
     "value":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"}],
   "input_index":
   ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
    "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
    "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
   "read":{"address":"%915 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %914",
           "base_index":"%570 = mul i64 %567, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%570 = mul i64 %567, 65",
             "input":"%865 = add nuw nsw i64 %859, 2",
             "value":"%874 = add i64 %570, %865"},
            {"addend":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
             "input":"%875 = mul i64 %874, 65",
             "value":"%888 = add i64 %875, %877"},
            {"addend":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
             "input":"%889 = mul i64 %888, 5",
             "value":"%914 = add i64 %889, %891"}],
           "input_index":
           ["%865 = add nuw nsw i64 %859, 2",
            "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
            "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
           "offset_add":{"input":"%914 = add i64 %889, %891",
                         "value":"%914 = add i64 %889, %891"},
           "output_index":"%914 = add i64 %889, %891",
           "stride_mul":
           [{"input":"%874 = add i64 %570, %865",
             "multiplier":"i64 65",
             "value":"%875 = mul i64 %874, 65"},
            {"input":"%888 = add i64 %875, %877",
             "multiplier":"i64 5",
             "value":"%889 = mul i64 %888, 5"},
            {"input":"%914 = add i64 %889, %891",
             "value":"%914 = add i64 %889, %891"}]}}],
 "successor":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
 "write":{"address":"%895 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %894",
          "base_index":"%570 = mul i64 %567, 65",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%570 = mul i64 %567, 65",
            "input":"%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
            "value":"%866 = add i64 %570, %859"},
           {"addend":"%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
            "input":"%867 = mul i64 %866, 65",
            "value":"%880 = add i64 %867, %877"},
           {"addend":"%891 = phi i64 [ %920, %893 ], [ 0, %879 ]",
            "input":"%881 = mul i64 %880, 5",
            "value":"%894 = add i64 %881, %891"}],
          "input_index":
          ["%859 = phi i64 [ 3, %817 ], [ %864, %876 ]",
           "%877 = phi i64 [ %922, %921 ], [ 1, %861 ]",
           "%891 = phi i64 [ %920, %893 ], [ 0, %879 ]"],
          "offset_add":{"input":"%894 = add i64 %881, %891",
                        "value":"%894 = add i64 %881, %891"},
          "output_index":"%894 = add i64 %881, %891",
          "store":"store double %919, double* %895, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%866 = add i64 %570, %859",
            "multiplier":"i64 65",
            "value":"%867 = mul i64 %866, 65"},
           {"input":"%880 = add i64 %867, %877",
            "multiplier":"i64 5",
            "value":"%881 = mul i64 %880, 5"},
           {"input":"%894 = add i64 %881, %891",
            "value":"%894 = add i64 %881, %891"}]}}
END stencil
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%1263 = add i64 65, %1260",
 "body":{"begin":"%1283 = add i64 %1274, %1280",
         "end":"br label %1279",
         "precursor":"br i1 %1281, label %1301, label %1282",
         "successor":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"},
 "end":"br label %1259",
 "iterator":
 ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
  "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
  "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
 "kernel":{"constants":
           [{"use":"%1286 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%1290 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1289",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%1295 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1294",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%1284 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%1298 = fmul double %1256, %1297",
             "value":"%1256 = load double, double* @dssp, align 8"}],
           "input":
           ["%1285 = load double, double* %1284, align 8, !tbaa !7",
            "%1285 = load double, double* %1284, align 8, !tbaa !7",
            "%1287 = load double, double* %1286, align 8, !tbaa !7",
            "%1287 = load double, double* %1286, align 8, !tbaa !7",
            "%1291 = load double, double* %1290, align 8, !tbaa !7",
            "%1291 = load double, double* %1290, align 8, !tbaa !7",
            "%1296 = load double, double* %1295, align 8, !tbaa !7",
            "%1296 = load double, double* %1295, align 8, !tbaa !7"],
           "origin":
           ["br i1 %1281, label %1301, label %1282"],
           "output":"%1299 = fsub double %1285, %1298",
           "restrictions":
           [{"use":"%1283 = add i64 %1274, %1280",
             "value":"%1274 = mul i64 %1273, 5"},
            {"use":"%1289 = add i64 %1276, %1280",
             "value":"%1276 = mul i64 %1275, 5"},
            {"use":"%1294 = add i64 %1278, %1280",
             "value":"%1278 = mul i64 %1277, 5"},
            {"use":"%1283 = add i64 %1274, %1280",
             "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"},
            {"use":"%1289 = add i64 %1276, %1280",
             "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"},
            {"use":"%1294 = add i64 %1278, %1280",
             "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"},
            {"use":"%1300 = add nuw nsw i64 %1280, 1",
             "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"}]},
 "loop":
 [{"begin":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
   "body":{"begin":"%1263 = add i64 65, %1260",
           "end":"br label %1259",
           "precursor":"br i1 %1261, label %1305, label %1262",
           "successor":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]"},
   "comparison":"%1261 = icmp sgt i64 %1260, %1258",
   "end":"br i1 %1261, label %1305, label %1262",
   "increment":"%1304 = add nuw nsw i64 %1260, 1",
   "iter_begin":"i64 1",
   "iter_end":"%1258 = sext i32 %1253 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %1259",
   "successor":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]"},
  {"begin":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
   "body":{"begin":"%1273 = add i64 %1264, %1270",
           "end":"br label %1269",
           "precursor":"br i1 %1271, label %1303, label %1272",
           "successor":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
   "comparison":"%1271 = icmp sgt i64 %1270, %1257",
   "end":"br i1 %1271, label %1303, label %1272",
   "increment":"%1302 = add nuw nsw i64 %1270, 1",
   "iter_begin":"i64 1",
   "iter_end":"%1257 = sext i32 %1255 to i64",
   "iter_step":"i64 1",
   "iterator":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
   "post_sese":{"begin":"%1304 = add nuw nsw i64 %1260, 1",
                "end":"br label %1259",
                "precursor":"br i1 %1271, label %1303, label %1272",
                "successor":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]"},
   "pre_sese":{"begin":"%1263 = add i64 65, %1260",
               "end":"br label %1269",
               "precursor":"br i1 %1261, label %1305, label %1262",
               "successor":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
   "precursor":"br label %1269",
   "successor":"%1304 = add nuw nsw i64 %1260, 1"},
  {"begin":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
   "body":{"begin":"%1283 = add i64 %1274, %1280",
           "end":"br label %1279",
           "precursor":"br i1 %1281, label %1301, label %1282",
           "successor":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"},
   "comparison":"%1281 = icmp eq i64 %1280, 5",
   "end":"br i1 %1281, label %1301, label %1282",
   "increment":"%1300 = add nuw nsw i64 %1280, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
   "post_sese":{"begin":"%1302 = add nuw nsw i64 %1270, 1",
                "end":"br label %1269",
                "precursor":"br i1 %1281, label %1301, label %1282",
                "successor":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
   "pre_sese":{"begin":"%1273 = add i64 %1264, %1270",
               "end":"br label %1279",
               "precursor":"br i1 %1271, label %1303, label %1272",
               "successor":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"},
   "precursor":"br label %1279",
   "successor":"%1302 = add nuw nsw i64 %1270, 1"}],
 "precursor":"br i1 %1261, label %1305, label %1262",
 "reads":
 [{"address":"%1284 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
     "value":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]"},
    {"input":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
     "value":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
    {"input":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
     "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"}],
   "input_index":
   ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
    "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
    "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
   "read":{"address":"%1284 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
           "base_index":"i64 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"i64 65",
             "input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
             "value":"%1263 = add i64 65, %1260"},
            {"addend":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
             "input":"%1264 = mul i64 %1263, 65",
             "value":"%1273 = add i64 %1264, %1270"},
            {"addend":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
             "input":"%1274 = mul i64 %1273, 5",
             "value":"%1283 = add i64 %1274, %1280"}],
           "input_index":
           ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
            "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
            "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
           "offset_add":{"input":"%1283 = add i64 %1274, %1280",
                         "value":"%1283 = add i64 %1274, %1280"},
           "output_index":"%1283 = add i64 %1274, %1280",
           "stride_mul":
           [{"input":"%1263 = add i64 65, %1260",
             "multiplier":"i64 65",
             "value":"%1264 = mul i64 %1263, 65"},
            {"input":"%1273 = add i64 %1264, %1270",
             "multiplier":"i64 5",
             "value":"%1274 = mul i64 %1273, 5"},
            {"input":"%1283 = add i64 %1274, %1280",
             "value":"%1283 = add i64 %1274, %1280"}]}},
  {"address":"%1284 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 65",
     "input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
     "value":"%1263 = add i64 65, %1260"},
    {"input":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
     "value":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
    {"input":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
     "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"}],
   "input_index":
   ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
    "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
    "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
   "read":{"address":"%1284 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%1263 = add i64 65, %1260",
             "value":"%1263 = add i64 65, %1260"},
            {"addend":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
             "input":"%1264 = mul i64 %1263, 65",
             "value":"%1273 = add i64 %1264, %1270"},
            {"addend":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
             "input":"%1274 = mul i64 %1273, 5",
             "value":"%1283 = add i64 %1274, %1280"}],
           "input_index":
           ["%1263 = add i64 65, %1260",
            "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
            "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
           "offset_add":{"input":"%1283 = add i64 %1274, %1280",
                         "value":"%1283 = add i64 %1274, %1280"},
           "output_index":"%1283 = add i64 %1274, %1280",
           "stride_mul":
           [{"input":"%1263 = add i64 65, %1260",
             "multiplier":"i64 65",
             "value":"%1264 = mul i64 %1263, 65"},
            {"input":"%1273 = add i64 %1264, %1270",
             "multiplier":"i64 5",
             "value":"%1274 = mul i64 %1273, 5"},
            {"input":"%1283 = add i64 %1274, %1280",
             "value":"%1283 = add i64 %1274, %1280"}]}},
  {"address":"%1286 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
     "value":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]"},
    {"input":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
     "value":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
    {"input":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
     "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"}],
   "input_index":
   ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
    "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
    "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
   "read":{"address":"%1286 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
           "base_index":"i64 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"i64 65",
             "input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
             "value":"%1263 = add i64 65, %1260"},
            {"addend":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
             "input":"%1264 = mul i64 %1263, 65",
             "value":"%1273 = add i64 %1264, %1270"},
            {"addend":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
             "input":"%1274 = mul i64 %1273, 5",
             "value":"%1283 = add i64 %1274, %1280"}],
           "input_index":
           ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
            "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
            "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
           "offset_add":{"input":"%1283 = add i64 %1274, %1280",
                         "value":"%1283 = add i64 %1274, %1280"},
           "output_index":"%1283 = add i64 %1274, %1280",
           "stride_mul":
           [{"input":"%1263 = add i64 65, %1260",
             "multiplier":"i64 65",
             "value":"%1264 = mul i64 %1263, 65"},
            {"input":"%1273 = add i64 %1264, %1270",
             "multiplier":"i64 5",
             "value":"%1274 = mul i64 %1273, 5"},
            {"input":"%1283 = add i64 %1274, %1280",
             "value":"%1283 = add i64 %1274, %1280"}]}},
  {"address":"%1286 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 65",
     "input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
     "value":"%1263 = add i64 65, %1260"},
    {"input":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
     "value":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
    {"input":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
     "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"}],
   "input_index":
   ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
    "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
    "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
   "read":{"address":"%1286 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%1263 = add i64 65, %1260",
             "value":"%1263 = add i64 65, %1260"},
            {"addend":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
             "input":"%1264 = mul i64 %1263, 65",
             "value":"%1273 = add i64 %1264, %1270"},
            {"addend":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
             "input":"%1274 = mul i64 %1273, 5",
             "value":"%1283 = add i64 %1274, %1280"}],
           "input_index":
           ["%1263 = add i64 65, %1260",
            "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
            "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
           "offset_add":{"input":"%1283 = add i64 %1274, %1280",
                         "value":"%1283 = add i64 %1274, %1280"},
           "output_index":"%1283 = add i64 %1274, %1280",
           "stride_mul":
           [{"input":"%1263 = add i64 65, %1260",
             "multiplier":"i64 65",
             "value":"%1264 = mul i64 %1263, 65"},
            {"input":"%1273 = add i64 %1264, %1270",
             "multiplier":"i64 5",
             "value":"%1274 = mul i64 %1273, 5"},
            {"input":"%1283 = add i64 %1274, %1280",
             "value":"%1283 = add i64 %1274, %1280"}]}},
  {"address":"%1290 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1289",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
     "value":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]"},
    {"input":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
     "value":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
    {"input":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
     "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"}],
   "input_index":
   ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
    "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
    "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
   "read":{"address":"%1290 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1289",
           "base_index":"i64 130",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"i64 130",
             "input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
             "value":"%1265 = add i64 130, %1260"},
            {"addend":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
             "input":"%1266 = mul i64 %1265, 65",
             "value":"%1275 = add i64 %1266, %1270"},
            {"addend":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
             "input":"%1276 = mul i64 %1275, 5",
             "value":"%1289 = add i64 %1276, %1280"}],
           "input_index":
           ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
            "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
            "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
           "offset_add":{"input":"%1289 = add i64 %1276, %1280",
                         "value":"%1289 = add i64 %1276, %1280"},
           "output_index":"%1289 = add i64 %1276, %1280",
           "stride_mul":
           [{"input":"%1265 = add i64 130, %1260",
             "multiplier":"i64 65",
             "value":"%1266 = mul i64 %1265, 65"},
            {"input":"%1275 = add i64 %1266, %1270",
             "multiplier":"i64 5",
             "value":"%1276 = mul i64 %1275, 5"},
            {"input":"%1289 = add i64 %1276, %1280",
             "value":"%1289 = add i64 %1276, %1280"}]}},
  {"address":"%1290 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1289",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 130",
     "input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
     "value":"%1265 = add i64 130, %1260"},
    {"input":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
     "value":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
    {"input":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
     "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"}],
   "input_index":
   ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
    "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
    "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
   "read":{"address":"%1290 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1289",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%1265 = add i64 130, %1260",
             "value":"%1265 = add i64 130, %1260"},
            {"addend":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
             "input":"%1266 = mul i64 %1265, 65",
             "value":"%1275 = add i64 %1266, %1270"},
            {"addend":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
             "input":"%1276 = mul i64 %1275, 5",
             "value":"%1289 = add i64 %1276, %1280"}],
           "input_index":
           ["%1265 = add i64 130, %1260",
            "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
            "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
           "offset_add":{"input":"%1289 = add i64 %1276, %1280",
                         "value":"%1289 = add i64 %1276, %1280"},
           "output_index":"%1289 = add i64 %1276, %1280",
           "stride_mul":
           [{"input":"%1265 = add i64 130, %1260",
             "multiplier":"i64 65",
             "value":"%1266 = mul i64 %1265, 65"},
            {"input":"%1275 = add i64 %1266, %1270",
             "multiplier":"i64 5",
             "value":"%1276 = mul i64 %1275, 5"},
            {"input":"%1289 = add i64 %1276, %1280",
             "value":"%1289 = add i64 %1276, %1280"}]}},
  {"address":"%1295 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1294",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
     "value":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]"},
    {"input":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
     "value":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
    {"input":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
     "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"}],
   "input_index":
   ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
    "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
    "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
   "read":{"address":"%1295 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1294",
           "base_index":"i64 195",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"i64 195",
             "input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
             "value":"%1267 = add i64 195, %1260"},
            {"addend":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
             "input":"%1268 = mul i64 %1267, 65",
             "value":"%1277 = add i64 %1268, %1270"},
            {"addend":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
             "input":"%1278 = mul i64 %1277, 5",
             "value":"%1294 = add i64 %1278, %1280"}],
           "input_index":
           ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
            "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
            "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
           "offset_add":{"input":"%1294 = add i64 %1278, %1280",
                         "value":"%1294 = add i64 %1278, %1280"},
           "output_index":"%1294 = add i64 %1278, %1280",
           "stride_mul":
           [{"input":"%1267 = add i64 195, %1260",
             "multiplier":"i64 65",
             "value":"%1268 = mul i64 %1267, 65"},
            {"input":"%1277 = add i64 %1268, %1270",
             "multiplier":"i64 5",
             "value":"%1278 = mul i64 %1277, 5"},
            {"input":"%1294 = add i64 %1278, %1280",
             "value":"%1294 = add i64 %1278, %1280"}]}},
  {"address":"%1295 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1294",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 195",
     "input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
     "value":"%1267 = add i64 195, %1260"},
    {"input":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
     "value":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]"},
    {"input":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
     "value":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"}],
   "input_index":
   ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
    "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
    "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
   "read":{"address":"%1295 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1294",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%1267 = add i64 195, %1260",
             "value":"%1267 = add i64 195, %1260"},
            {"addend":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
             "input":"%1268 = mul i64 %1267, 65",
             "value":"%1277 = add i64 %1268, %1270"},
            {"addend":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
             "input":"%1278 = mul i64 %1277, 5",
             "value":"%1294 = add i64 %1278, %1280"}],
           "input_index":
           ["%1267 = add i64 195, %1260",
            "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
            "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
           "offset_add":{"input":"%1294 = add i64 %1278, %1280",
                         "value":"%1294 = add i64 %1278, %1280"},
           "output_index":"%1294 = add i64 %1278, %1280",
           "stride_mul":
           [{"input":"%1267 = add i64 195, %1260",
             "multiplier":"i64 65",
             "value":"%1268 = mul i64 %1267, 65"},
            {"input":"%1277 = add i64 %1268, %1270",
             "multiplier":"i64 5",
             "value":"%1278 = mul i64 %1277, 5"},
            {"input":"%1294 = add i64 %1278, %1280",
             "value":"%1294 = add i64 %1278, %1280"}]}}],
 "successor":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
 "write":{"address":"%1284 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1283",
          "base_index":"i64 65",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"i64 65",
            "input":"%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
            "value":"%1263 = add i64 65, %1260"},
           {"addend":"%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
            "input":"%1264 = mul i64 %1263, 65",
            "value":"%1273 = add i64 %1264, %1270"},
           {"addend":"%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]",
            "input":"%1274 = mul i64 %1273, 5",
            "value":"%1283 = add i64 %1274, %1280"}],
          "input_index":
          ["%1260 = phi i64 [ %1304, %1303 ], [ 1, %1251 ]",
           "%1270 = phi i64 [ %1302, %1301 ], [ 1, %1262 ]",
           "%1280 = phi i64 [ %1300, %1282 ], [ 0, %1272 ]"],
          "offset_add":{"input":"%1283 = add i64 %1274, %1280",
                        "value":"%1283 = add i64 %1274, %1280"},
          "output_index":"%1283 = add i64 %1274, %1280",
          "store":"store double %1299, double* %1284, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%1263 = add i64 65, %1260",
            "multiplier":"i64 65",
            "value":"%1264 = mul i64 %1263, 65"},
           {"input":"%1273 = add i64 %1264, %1270",
            "multiplier":"i64 5",
            "value":"%1274 = mul i64 %1273, 5"},
           {"input":"%1283 = add i64 %1274, %1280",
            "value":"%1283 = add i64 %1274, %1280"}]}}
END stencil
END LOOP
BEGIN LOOP
BEGIN stencil
{"begin":"%1309 = add i64 130, %1306",
 "body":{"begin":"%1333 = add i64 %1322, %1330",
         "end":"br label %1329",
         "precursor":"br i1 %1331, label %1356, label %1332",
         "successor":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"},
 "end":"br label %1305",
 "iterator":
 ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
  "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
  "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
 "kernel":{"constants":
           [{"use":"%1337 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1336",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%1340 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%1345 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1344",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%1350 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1349",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%1334 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%1353 = fmul double %1256, %1352",
             "value":"%1256 = load double, double* @dssp, align 8"}],
           "input":
           ["%1335 = load double, double* %1334, align 8, !tbaa !7",
            "%1335 = load double, double* %1334, align 8, !tbaa !7",
            "%1338 = load double, double* %1337, align 8, !tbaa !7",
            "%1338 = load double, double* %1337, align 8, !tbaa !7",
            "%1341 = load double, double* %1340, align 8, !tbaa !7",
            "%1341 = load double, double* %1340, align 8, !tbaa !7",
            "%1346 = load double, double* %1345, align 8, !tbaa !7",
            "%1346 = load double, double* %1345, align 8, !tbaa !7",
            "%1351 = load double, double* %1350, align 8, !tbaa !7",
            "%1351 = load double, double* %1350, align 8, !tbaa !7"],
           "origin":
           ["br i1 %1331, label %1356, label %1332"],
           "output":"%1354 = fsub double %1335, %1353",
           "restrictions":
           [{"use":"%1333 = add i64 %1322, %1330",
             "value":"%1322 = mul i64 %1321, 5"},
            {"use":"%1336 = add i64 %1324, %1330",
             "value":"%1324 = mul i64 %1323, 5"},
            {"use":"%1344 = add i64 %1326, %1330",
             "value":"%1326 = mul i64 %1325, 5"},
            {"use":"%1349 = add i64 %1328, %1330",
             "value":"%1328 = mul i64 %1327, 5"},
            {"use":"%1333 = add i64 %1322, %1330",
             "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"},
            {"use":"%1336 = add i64 %1324, %1330",
             "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"},
            {"use":"%1344 = add i64 %1326, %1330",
             "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"},
            {"use":"%1349 = add i64 %1328, %1330",
             "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}]},
 "loop":
 [{"begin":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
   "body":{"begin":"%1309 = add i64 130, %1306",
           "end":"br label %1305",
           "precursor":"br i1 %1307, label %1360, label %1308",
           "successor":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]"},
   "comparison":"%1307 = icmp sgt i64 %1306, %1258",
   "end":"br i1 %1307, label %1360, label %1308",
   "increment":"%1359 = add nuw nsw i64 %1306, 1",
   "iter_begin":"i64 1",
   "iter_end":"%1258 = sext i32 %1253 to i64",
   "iter_step":"i64 1",
   "precursor":"br i1 %1261, label %1305, label %1262",
   "successor":"%1361 = add nsw i32 %1017, -4"},
  {"begin":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
   "body":{"begin":"%1321 = add i64 %1310, %1318",
           "end":"br label %1317",
           "precursor":"br i1 %1319, label %1358, label %1320",
           "successor":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
   "comparison":"%1319 = icmp sgt i64 %1318, %1257",
   "end":"br i1 %1319, label %1358, label %1320",
   "increment":"%1357 = add nuw nsw i64 %1318, 1",
   "iter_begin":"i64 1",
   "iter_end":"%1257 = sext i32 %1255 to i64",
   "iter_step":"i64 1",
   "iterator":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
   "post_sese":{"begin":"%1359 = add nuw nsw i64 %1306, 1",
                "end":"br label %1305",
                "precursor":"br i1 %1319, label %1358, label %1320",
                "successor":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]"},
   "pre_sese":{"begin":"%1309 = add i64 130, %1306",
               "end":"br label %1317",
               "precursor":"br i1 %1307, label %1360, label %1308",
               "successor":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
   "precursor":"br label %1317",
   "successor":"%1359 = add nuw nsw i64 %1306, 1"},
  {"begin":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
   "body":{"begin":"%1333 = add i64 %1322, %1330",
           "end":"br label %1329",
           "precursor":"br i1 %1331, label %1356, label %1332",
           "successor":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"},
   "comparison":"%1331 = icmp eq i64 %1330, 5",
   "end":"br i1 %1331, label %1356, label %1332",
   "increment":"%1355 = add nuw nsw i64 %1330, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
   "post_sese":{"begin":"%1357 = add nuw nsw i64 %1318, 1",
                "end":"br label %1317",
                "precursor":"br i1 %1331, label %1356, label %1332",
                "successor":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
   "pre_sese":{"begin":"%1321 = add i64 %1310, %1318",
               "end":"br label %1329",
               "precursor":"br i1 %1319, label %1358, label %1320",
               "successor":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"},
   "precursor":"br label %1329",
   "successor":"%1357 = add nuw nsw i64 %1318, 1"}],
 "precursor":"br i1 %1307, label %1360, label %1308",
 "reads":
 [{"address":"%1334 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1334 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
           "base_index":"i64 130",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"i64 130",
             "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
             "value":"%1309 = add i64 130, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1310 = mul i64 %1309, 65",
             "value":"%1321 = add i64 %1310, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1322 = mul i64 %1321, 5",
             "value":"%1333 = add i64 %1322, %1330"}],
           "input_index":
           ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1333 = add i64 %1322, %1330",
                         "value":"%1333 = add i64 %1322, %1330"},
           "output_index":"%1333 = add i64 %1322, %1330",
           "stride_mul":
           [{"input":"%1309 = add i64 130, %1306",
             "multiplier":"i64 65",
             "value":"%1310 = mul i64 %1309, 65"},
            {"input":"%1321 = add i64 %1310, %1318",
             "multiplier":"i64 5",
             "value":"%1322 = mul i64 %1321, 5"},
            {"input":"%1333 = add i64 %1322, %1330",
             "value":"%1333 = add i64 %1322, %1330"}]}},
  {"address":"%1334 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 130",
     "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1309 = add i64 130, %1306"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1334 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%1309 = add i64 130, %1306",
             "value":"%1309 = add i64 130, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1310 = mul i64 %1309, 65",
             "value":"%1321 = add i64 %1310, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1322 = mul i64 %1321, 5",
             "value":"%1333 = add i64 %1322, %1330"}],
           "input_index":
           ["%1309 = add i64 130, %1306",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1333 = add i64 %1322, %1330",
                         "value":"%1333 = add i64 %1322, %1330"},
           "output_index":"%1333 = add i64 %1322, %1330",
           "stride_mul":
           [{"input":"%1309 = add i64 130, %1306",
             "multiplier":"i64 65",
             "value":"%1310 = mul i64 %1309, 65"},
            {"input":"%1321 = add i64 %1310, %1318",
             "multiplier":"i64 5",
             "value":"%1322 = mul i64 %1321, 5"},
            {"input":"%1333 = add i64 %1322, %1330",
             "value":"%1333 = add i64 %1322, %1330"}]}},
  {"address":"%1337 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1336",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1337 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1336",
           "base_index":"i64 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"i64 65",
             "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
             "value":"%1311 = add i64 65, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1312 = mul i64 %1311, 65",
             "value":"%1323 = add i64 %1312, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1324 = mul i64 %1323, 5",
             "value":"%1336 = add i64 %1324, %1330"}],
           "input_index":
           ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1336 = add i64 %1324, %1330",
                         "value":"%1336 = add i64 %1324, %1330"},
           "output_index":"%1336 = add i64 %1324, %1330",
           "stride_mul":
           [{"input":"%1311 = add i64 65, %1306",
             "multiplier":"i64 65",
             "value":"%1312 = mul i64 %1311, 65"},
            {"input":"%1323 = add i64 %1312, %1318",
             "multiplier":"i64 5",
             "value":"%1324 = mul i64 %1323, 5"},
            {"input":"%1336 = add i64 %1324, %1330",
             "value":"%1336 = add i64 %1324, %1330"}]}},
  {"address":"%1337 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1336",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 65",
     "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1311 = add i64 65, %1306"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1337 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1336",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%1311 = add i64 65, %1306",
             "value":"%1311 = add i64 65, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1312 = mul i64 %1311, 65",
             "value":"%1323 = add i64 %1312, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1324 = mul i64 %1323, 5",
             "value":"%1336 = add i64 %1324, %1330"}],
           "input_index":
           ["%1311 = add i64 65, %1306",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1336 = add i64 %1324, %1330",
                         "value":"%1336 = add i64 %1324, %1330"},
           "output_index":"%1336 = add i64 %1324, %1330",
           "stride_mul":
           [{"input":"%1311 = add i64 65, %1306",
             "multiplier":"i64 65",
             "value":"%1312 = mul i64 %1311, 65"},
            {"input":"%1323 = add i64 %1312, %1318",
             "multiplier":"i64 5",
             "value":"%1324 = mul i64 %1323, 5"},
            {"input":"%1336 = add i64 %1324, %1330",
             "value":"%1336 = add i64 %1324, %1330"}]}},
  {"address":"%1340 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1340 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
           "base_index":"i64 130",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"i64 130",
             "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
             "value":"%1309 = add i64 130, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1310 = mul i64 %1309, 65",
             "value":"%1321 = add i64 %1310, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1322 = mul i64 %1321, 5",
             "value":"%1333 = add i64 %1322, %1330"}],
           "input_index":
           ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1333 = add i64 %1322, %1330",
                         "value":"%1333 = add i64 %1322, %1330"},
           "output_index":"%1333 = add i64 %1322, %1330",
           "stride_mul":
           [{"input":"%1309 = add i64 130, %1306",
             "multiplier":"i64 65",
             "value":"%1310 = mul i64 %1309, 65"},
            {"input":"%1321 = add i64 %1310, %1318",
             "multiplier":"i64 5",
             "value":"%1322 = mul i64 %1321, 5"},
            {"input":"%1333 = add i64 %1322, %1330",
             "value":"%1333 = add i64 %1322, %1330"}]}},
  {"address":"%1340 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 130",
     "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1309 = add i64 130, %1306"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1340 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%1309 = add i64 130, %1306",
             "value":"%1309 = add i64 130, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1310 = mul i64 %1309, 65",
             "value":"%1321 = add i64 %1310, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1322 = mul i64 %1321, 5",
             "value":"%1333 = add i64 %1322, %1330"}],
           "input_index":
           ["%1309 = add i64 130, %1306",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1333 = add i64 %1322, %1330",
                         "value":"%1333 = add i64 %1322, %1330"},
           "output_index":"%1333 = add i64 %1322, %1330",
           "stride_mul":
           [{"input":"%1309 = add i64 130, %1306",
             "multiplier":"i64 65",
             "value":"%1310 = mul i64 %1309, 65"},
            {"input":"%1321 = add i64 %1310, %1318",
             "multiplier":"i64 5",
             "value":"%1322 = mul i64 %1321, 5"},
            {"input":"%1333 = add i64 %1322, %1330",
             "value":"%1333 = add i64 %1322, %1330"}]}},
  {"address":"%1345 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1344",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1345 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1344",
           "base_index":"i64 195",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"i64 195",
             "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
             "value":"%1313 = add i64 195, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1314 = mul i64 %1313, 65",
             "value":"%1325 = add i64 %1314, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1326 = mul i64 %1325, 5",
             "value":"%1344 = add i64 %1326, %1330"}],
           "input_index":
           ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1344 = add i64 %1326, %1330",
                         "value":"%1344 = add i64 %1326, %1330"},
           "output_index":"%1344 = add i64 %1326, %1330",
           "stride_mul":
           [{"input":"%1313 = add i64 195, %1306",
             "multiplier":"i64 65",
             "value":"%1314 = mul i64 %1313, 65"},
            {"input":"%1325 = add i64 %1314, %1318",
             "multiplier":"i64 5",
             "value":"%1326 = mul i64 %1325, 5"},
            {"input":"%1344 = add i64 %1326, %1330",
             "value":"%1344 = add i64 %1326, %1330"}]}},
  {"address":"%1345 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1344",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 195",
     "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1313 = add i64 195, %1306"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1345 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1344",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%1313 = add i64 195, %1306",
             "value":"%1313 = add i64 195, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1314 = mul i64 %1313, 65",
             "value":"%1325 = add i64 %1314, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1326 = mul i64 %1325, 5",
             "value":"%1344 = add i64 %1326, %1330"}],
           "input_index":
           ["%1313 = add i64 195, %1306",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1344 = add i64 %1326, %1330",
                         "value":"%1344 = add i64 %1326, %1330"},
           "output_index":"%1344 = add i64 %1326, %1330",
           "stride_mul":
           [{"input":"%1313 = add i64 195, %1306",
             "multiplier":"i64 65",
             "value":"%1314 = mul i64 %1313, 65"},
            {"input":"%1325 = add i64 %1314, %1318",
             "multiplier":"i64 5",
             "value":"%1326 = mul i64 %1325, 5"},
            {"input":"%1344 = add i64 %1326, %1330",
             "value":"%1344 = add i64 %1326, %1330"}]}},
  {"address":"%1350 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1349",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1350 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1349",
           "base_index":"i64 260",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"i64 260",
             "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
             "value":"%1315 = add i64 260, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1316 = mul i64 %1315, 65",
             "value":"%1327 = add i64 %1316, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1328 = mul i64 %1327, 5",
             "value":"%1349 = add i64 %1328, %1330"}],
           "input_index":
           ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1349 = add i64 %1328, %1330",
                         "value":"%1349 = add i64 %1328, %1330"},
           "output_index":"%1349 = add i64 %1328, %1330",
           "stride_mul":
           [{"input":"%1315 = add i64 260, %1306",
             "multiplier":"i64 65",
             "value":"%1316 = mul i64 %1315, 65"},
            {"input":"%1327 = add i64 %1316, %1318",
             "multiplier":"i64 5",
             "value":"%1328 = mul i64 %1327, 5"},
            {"input":"%1349 = add i64 %1328, %1330",
             "value":"%1349 = add i64 %1328, %1330"}]}},
  {"address":"%1350 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1349",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"addend":"i64 260",
     "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
     "value":"%1315 = add i64 260, %1306"},
    {"input":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
     "value":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]"},
    {"input":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
     "value":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"}],
   "input_index":
   ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
    "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
    "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
   "read":{"address":"%1350 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1349",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%1315 = add i64 260, %1306",
             "value":"%1315 = add i64 260, %1306"},
            {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
             "input":"%1316 = mul i64 %1315, 65",
             "value":"%1327 = add i64 %1316, %1318"},
            {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
             "input":"%1328 = mul i64 %1327, 5",
             "value":"%1349 = add i64 %1328, %1330"}],
           "input_index":
           ["%1315 = add i64 260, %1306",
            "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
           "offset_add":{"input":"%1349 = add i64 %1328, %1330",
                         "value":"%1349 = add i64 %1328, %1330"},
           "output_index":"%1349 = add i64 %1328, %1330",
           "stride_mul":
           [{"input":"%1315 = add i64 260, %1306",
             "multiplier":"i64 65",
             "value":"%1316 = mul i64 %1315, 65"},
            {"input":"%1327 = add i64 %1316, %1318",
             "multiplier":"i64 5",
             "value":"%1328 = mul i64 %1327, 5"},
            {"input":"%1349 = add i64 %1328, %1330",
             "value":"%1349 = add i64 %1328, %1330"}]}}],
 "successor":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
 "write":{"address":"%1334 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %1333",
          "base_index":"i64 130",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"i64 130",
            "input":"%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
            "value":"%1309 = add i64 130, %1306"},
           {"addend":"%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
            "input":"%1310 = mul i64 %1309, 65",
            "value":"%1321 = add i64 %1310, %1318"},
           {"addend":"%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]",
            "input":"%1322 = mul i64 %1321, 5",
            "value":"%1333 = add i64 %1322, %1330"}],
          "input_index":
          ["%1306 = phi i64 [ %1359, %1358 ], [ 1, %1259 ]",
           "%1318 = phi i64 [ %1357, %1356 ], [ 1, %1308 ]",
           "%1330 = phi i64 [ %1355, %1332 ], [ 0, %1320 ]"],
          "offset_add":{"input":"%1333 = add i64 %1322, %1330",
                        "value":"%1333 = add i64 %1322, %1330"},
          "output_index":"%1333 = add i64 %1322, %1330",
          "store":"store double %1354, double* %1334, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%1309 = add i64 130, %1306",
            "multiplier":"i64 65",
            "value":"%1310 = mul i64 %1309, 65"},
           {"input":"%1321 = add i64 %1310, %1318",
            "multiplier":"i64 5",
            "value":"%1322 = mul i64 %1321, 5"},
           {"input":"%1333 = add i64 %1322, %1330",
            "value":"%1333 = add i64 %1322, %1330"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

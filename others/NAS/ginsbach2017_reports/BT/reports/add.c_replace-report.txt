BEGIN FUNCTION TRANSFORMATION add
BEGIN LOOP
BEGIN AXPY
{"begin":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
 "body":{"begin":"%35 = add i64 %30, %32",
         "end":"br label %31",
         "precursor":"br i1 %33, label %42, label %34",
         "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
 "comparison":"%33 = icmp eq i64 %32, 5",
 "dst":{"address":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}],
        "input_index":
        ["%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"addend":"%30 = mul i64 %29, 5",
                      "input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "store":"store double %40, double* %36, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}]},
 "end":"br i1 %33, label %42, label %34",
 "increment":"%41 = add nuw nsw i64 %32, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
 "precursor":"br label %31",
 "src":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}],
        "input_index":
        ["%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"addend":"%30 = mul i64 %29, 5",
                      "input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "stride_mul":
        [{"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}],
        "value":"%39 = load double, double* %38, align 8, !tbaa !7"},
 "successor":"%43 = add nuw nsw i64 %26, 1",
 "sum":{"addend":"%39 = load double, double* %38, align 8, !tbaa !7",
        "input":"%37 = load double, double* %36, align 8, !tbaa !7",
        "value":"%40 = fadd double %37, %39"}}
END AXPY
BEGIN AXPY
{"begin":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
 "body":{"begin":"%35 = add i64 %30, %32",
         "end":"br label %31",
         "precursor":"br i1 %33, label %42, label %34",
         "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
 "comparison":"%33 = icmp eq i64 %32, 5",
 "dst":{"address":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_index":"%30 = mul i64 %29, 5",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%30 = mul i64 %29, 5",
          "input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%35 = add i64 %30, %32"}],
        "input_index":
        ["%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"input":"%35 = add i64 %30, %32",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "store":"store double %40, double* %36, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%35 = add i64 %30, %32",
          "value":"%35 = add i64 %30, %32"}]},
 "end":"br i1 %33, label %42, label %34",
 "increment":"%41 = add nuw nsw i64 %32, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
 "precursor":"br label %31",
 "src":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}],
        "input_index":
        ["%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"addend":"%30 = mul i64 %29, 5",
                      "input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "stride_mul":
        [{"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}],
        "value":"%39 = load double, double* %38, align 8, !tbaa !7"},
 "successor":"%43 = add nuw nsw i64 %26, 1",
 "sum":{"addend":"%39 = load double, double* %38, align 8, !tbaa !7",
        "input":"%37 = load double, double* %36, align 8, !tbaa !7",
        "value":"%40 = fadd double %37, %39"}}
END AXPY
BEGIN AXPY
{"begin":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
 "body":{"begin":"%35 = add i64 %30, %32",
         "end":"br label %31",
         "precursor":"br i1 %33, label %42, label %34",
         "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
 "comparison":"%33 = icmp eq i64 %32, 5",
 "dst":{"address":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}],
        "input_index":
        ["%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"addend":"%30 = mul i64 %29, 5",
                      "input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "store":"store double %40, double* %36, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}]},
 "end":"br i1 %33, label %42, label %34",
 "increment":"%41 = add nuw nsw i64 %32, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
 "precursor":"br label %31",
 "src":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_index":"%30 = mul i64 %29, 5",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%30 = mul i64 %29, 5",
          "input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%35 = add i64 %30, %32"}],
        "input_index":
        ["%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"input":"%35 = add i64 %30, %32",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "stride_mul":
        [{"input":"%35 = add i64 %30, %32",
          "value":"%35 = add i64 %30, %32"}],
        "value":"%39 = load double, double* %38, align 8, !tbaa !7"},
 "successor":"%43 = add nuw nsw i64 %26, 1",
 "sum":{"addend":"%39 = load double, double* %38, align 8, !tbaa !7",
        "input":"%37 = load double, double* %36, align 8, !tbaa !7",
        "value":"%40 = fadd double %37, %39"}}
END AXPY
BEGIN AXPY
{"begin":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
 "body":{"begin":"%35 = add i64 %30, %32",
         "end":"br label %31",
         "precursor":"br i1 %33, label %42, label %34",
         "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
 "comparison":"%33 = icmp eq i64 %32, 5",
 "dst":{"address":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_index":"%30 = mul i64 %29, 5",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%30 = mul i64 %29, 5",
          "input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%35 = add i64 %30, %32"}],
        "input_index":
        ["%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"input":"%35 = add i64 %30, %32",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "store":"store double %40, double* %36, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%35 = add i64 %30, %32",
          "value":"%35 = add i64 %30, %32"}]},
 "end":"br i1 %33, label %42, label %34",
 "increment":"%41 = add nuw nsw i64 %32, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
 "precursor":"br label %31",
 "src":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_index":"%30 = mul i64 %29, 5",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%30 = mul i64 %29, 5",
          "input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "value":"%35 = add i64 %30, %32"}],
        "input_index":
        ["%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"input":"%35 = add i64 %30, %32",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "stride_mul":
        [{"input":"%35 = add i64 %30, %32",
          "value":"%35 = add i64 %30, %32"}],
        "value":"%39 = load double, double* %38, align 8, !tbaa !7"},
 "successor":"%43 = add nuw nsw i64 %26, 1",
 "sum":{"addend":"%39 = load double, double* %38, align 8, !tbaa !7",
        "input":"%37 = load double, double* %36, align 8, !tbaa !7",
        "value":"%40 = fadd double %37, %39"}}
END AXPY
BEGIN AXPYn
{"begin":"%18 = mul i64 %15, 65",
 "body":{"begin":"%35 = add i64 %30, %32",
         "end":"br label %31",
         "precursor":"br i1 %33, label %42, label %34",
         "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
 "dst":{"address":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
          "value":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]"},
         {"addend":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
          "input":"%18 = mul i64 %15, 65",
          "value":"%23 = add i64 %18, %20"},
         {"addend":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
          "input":"%24 = mul i64 %23, 65",
          "value":"%29 = add i64 %24, %26"},
         {"addend":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "input":"%30 = mul i64 %29, 5",
          "value":"%35 = add i64 %30, %32"}],
        "input":
        ["%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
         "%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
         "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
         "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "input_index":
        ["%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
         "%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
         "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
         "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"input":"%35 = add i64 %30, %32",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "store":"store double %40, double* %36, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
          "multiplier":"i64 65",
          "value":"%18 = mul i64 %15, 65"},
         {"input":"%23 = add i64 %18, %20",
          "multiplier":"i64 65",
          "value":"%24 = mul i64 %23, 65"},
         {"input":"%29 = add i64 %24, %26",
          "multiplier":"i64 5",
          "value":"%30 = mul i64 %29, 5"},
         {"input":"%35 = add i64 %30, %32",
          "value":"%35 = add i64 %30, %32"}]},
 "end":"br label %14",
 "iterator":
 ["%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
  "%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
  "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
  "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
 "loop":
 [{"begin":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
   "body":{"begin":"%18 = mul i64 %15, 65",
           "end":"br label %14",
           "precursor":"br i1 %16, label %48, label %17",
           "successor":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]"},
   "comparison":"%16 = icmp sgt i64 %15, %13",
   "end":"br i1 %16, label %48, label %17",
   "increment":"%47 = add nuw nsw i64 %15, 1",
   "iter_begin":"i64 1",
   "iter_end":"%13 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %14",
   "successor":"%49 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
   "body":{"begin":"%23 = add i64 %18, %20",
           "end":"br label %19",
           "precursor":"br i1 %21, label %46, label %22",
           "successor":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]"},
   "comparison":"%21 = icmp sgt i64 %20, %12",
   "end":"br i1 %21, label %46, label %22",
   "increment":"%45 = add nuw nsw i64 %20, 1",
   "iter_begin":"i64 1",
   "iter_end":"%12 = sext i32 %8 to i64",
   "iter_step":"i64 1",
   "iterator":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
   "post_sese":{"begin":"%47 = add nuw nsw i64 %15, 1",
                "end":"br label %14",
                "precursor":"br i1 %21, label %46, label %22",
                "successor":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%18 = mul i64 %15, 65",
               "end":"br label %19",
               "precursor":"br i1 %16, label %48, label %17",
               "successor":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]"},
   "precursor":"br label %19",
   "successor":"%47 = add nuw nsw i64 %15, 1"},
  {"begin":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
   "body":{"begin":"%29 = add i64 %24, %26",
           "end":"br label %25",
           "precursor":"br i1 %27, label %44, label %28",
           "successor":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]"},
   "comparison":"%27 = icmp sgt i64 %26, %11",
   "end":"br i1 %27, label %44, label %28",
   "increment":"%43 = add nuw nsw i64 %26, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %10 to i64",
   "iter_step":"i64 1",
   "iterator":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
   "post_sese":{"begin":"%45 = add nuw nsw i64 %20, 1",
                "end":"br label %19",
                "precursor":"br i1 %27, label %44, label %28",
                "successor":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]"},
   "pre_sese":{"begin":"%23 = add i64 %18, %20",
               "end":"br label %25",
               "precursor":"br i1 %21, label %46, label %22",
               "successor":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]"},
   "precursor":"br label %25",
   "successor":"%45 = add nuw nsw i64 %20, 1"},
  {"begin":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
   "body":{"begin":"%35 = add i64 %30, %32",
           "end":"br label %31",
           "precursor":"br i1 %33, label %42, label %34",
           "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
   "comparison":"%33 = icmp eq i64 %32, 5",
   "end":"br i1 %33, label %42, label %34",
   "increment":"%41 = add nuw nsw i64 %32, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
   "post_sese":{"begin":"%43 = add nuw nsw i64 %26, 1",
                "end":"br label %25",
                "precursor":"br i1 %33, label %42, label %34",
                "successor":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]"},
   "pre_sese":{"begin":"%29 = add i64 %24, %26",
               "end":"br label %31",
               "precursor":"br i1 %27, label %44, label %28",
               "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
   "precursor":"br label %31",
   "successor":"%43 = add nuw nsw i64 %26, 1"}],
 "precursor":"br i1 %16, label %48, label %17",
 "src":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
          "value":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]"},
         {"addend":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
          "input":"%18 = mul i64 %15, 65",
          "value":"%23 = add i64 %18, %20"},
         {"addend":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
          "input":"%24 = mul i64 %23, 65",
          "value":"%29 = add i64 %24, %26"},
         {"addend":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
          "input":"%30 = mul i64 %29, 5",
          "value":"%35 = add i64 %30, %32"}],
        "input":
        ["%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
         "%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
         "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
         "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "input_index":
        ["%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
         "%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
         "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
         "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
        "offset_add":{"input":"%35 = add i64 %30, %32",
                      "value":"%35 = add i64 %30, %32"},
        "output_index":"%35 = add i64 %30, %32",
        "stride_mul":
        [{"input":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
          "multiplier":"i64 65",
          "value":"%18 = mul i64 %15, 65"},
         {"input":"%23 = add i64 %18, %20",
          "multiplier":"i64 65",
          "value":"%24 = mul i64 %23, 65"},
         {"input":"%29 = add i64 %24, %26",
          "multiplier":"i64 5",
          "value":"%30 = mul i64 %29, 5"},
         {"input":"%35 = add i64 %30, %32",
          "value":"%35 = add i64 %30, %32"}],
        "value":"%39 = load double, double* %38, align 8, !tbaa !7"},
 "successor":"%15 = phi i64 [ %47, %46 ], [ 1, %4 ]",
 "sum":{"addend":"%39 = load double, double* %38, align 8, !tbaa !7",
        "input":"%37 = load double, double* %36, align 8, !tbaa !7",
        "value":"%40 = fadd double %37, %39"}}
END AXPYn
BEGIN stencil
{"begin":"%23 = add i64 %18, %20",
 "body":{"begin":"%35 = add i64 %30, %32",
         "end":"br label %31",
         "precursor":"br i1 %33, label %42, label %34",
         "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
 "end":"br label %19",
 "iterator":
 ["%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
  "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
  "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
 "kernel":{"constants":
           [{"use":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%37 = load double, double* %36, align 8, !tbaa !7",
            "%39 = load double, double* %38, align 8, !tbaa !7"],
           "origin":
           ["br i1 %33, label %42, label %34"],
           "output":"%40 = fadd double %37, %39",
           "restrictions":
           [{"use":"%35 = add i64 %30, %32",
             "value":"%30 = mul i64 %29, 5"},
            {"use":"%35 = add i64 %30, %32",
             "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
            {"use":"%41 = add nuw nsw i64 %32, 1",
             "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}]},
 "loop":
 [{"begin":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
   "body":{"begin":"%23 = add i64 %18, %20",
           "end":"br label %19",
           "precursor":"br i1 %21, label %46, label %22",
           "successor":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]"},
   "comparison":"%21 = icmp sgt i64 %20, %12",
   "end":"br i1 %21, label %46, label %22",
   "increment":"%45 = add nuw nsw i64 %20, 1",
   "iter_begin":"i64 1",
   "iter_end":"%12 = sext i32 %8 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %19",
   "successor":"%47 = add nuw nsw i64 %15, 1"},
  {"begin":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
   "body":{"begin":"%29 = add i64 %24, %26",
           "end":"br label %25",
           "precursor":"br i1 %27, label %44, label %28",
           "successor":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]"},
   "comparison":"%27 = icmp sgt i64 %26, %11",
   "end":"br i1 %27, label %44, label %28",
   "increment":"%43 = add nuw nsw i64 %26, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %10 to i64",
   "iter_step":"i64 1",
   "iterator":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
   "post_sese":{"begin":"%45 = add nuw nsw i64 %20, 1",
                "end":"br label %19",
                "precursor":"br i1 %27, label %44, label %28",
                "successor":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]"},
   "pre_sese":{"begin":"%23 = add i64 %18, %20",
               "end":"br label %25",
               "precursor":"br i1 %21, label %46, label %22",
               "successor":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]"},
   "precursor":"br label %25",
   "successor":"%45 = add nuw nsw i64 %20, 1"},
  {"begin":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
   "body":{"begin":"%35 = add i64 %30, %32",
           "end":"br label %31",
           "precursor":"br i1 %33, label %42, label %34",
           "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
   "comparison":"%33 = icmp eq i64 %32, 5",
   "end":"br i1 %33, label %42, label %34",
   "increment":"%41 = add nuw nsw i64 %32, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
   "post_sese":{"begin":"%43 = add nuw nsw i64 %26, 1",
                "end":"br label %25",
                "precursor":"br i1 %33, label %42, label %34",
                "successor":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]"},
   "pre_sese":{"begin":"%29 = add i64 %24, %26",
               "end":"br label %31",
               "precursor":"br i1 %27, label %44, label %28",
               "successor":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"},
   "precursor":"br label %31",
   "successor":"%43 = add nuw nsw i64 %26, 1"}],
 "precursor":"br i1 %21, label %46, label %22",
 "reads":
 [{"address":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
     "value":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]"},
    {"input":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
     "value":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]"},
    {"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
     "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}],
   "input_index":
   ["%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
    "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
    "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
   "read":{"address":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
           "base_index":"%18 = mul i64 %15, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%18 = mul i64 %15, 65",
             "input":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
             "value":"%23 = add i64 %18, %20"},
            {"addend":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
             "input":"%24 = mul i64 %23, 65",
             "value":"%29 = add i64 %24, %26"},
            {"addend":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
             "input":"%30 = mul i64 %29, 5",
             "value":"%35 = add i64 %30, %32"}],
           "input_index":
           ["%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
            "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
            "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
           "offset_add":{"input":"%35 = add i64 %30, %32",
                         "value":"%35 = add i64 %30, %32"},
           "output_index":"%35 = add i64 %30, %32",
           "stride_mul":
           [{"input":"%23 = add i64 %18, %20",
             "multiplier":"i64 65",
             "value":"%24 = mul i64 %23, 65"},
            {"input":"%29 = add i64 %24, %26",
             "multiplier":"i64 5",
             "value":"%30 = mul i64 %29, 5"},
            {"input":"%35 = add i64 %30, %32",
             "value":"%35 = add i64 %30, %32"}]}},
  {"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
     "value":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]"},
    {"input":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
     "value":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]"},
    {"input":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
     "value":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"}],
   "input_index":
   ["%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
    "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
    "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
   "read":{"address":"%38 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
           "base_index":"%18 = mul i64 %15, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%18 = mul i64 %15, 65",
             "input":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
             "value":"%23 = add i64 %18, %20"},
            {"addend":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
             "input":"%24 = mul i64 %23, 65",
             "value":"%29 = add i64 %24, %26"},
            {"addend":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
             "input":"%30 = mul i64 %29, 5",
             "value":"%35 = add i64 %30, %32"}],
           "input_index":
           ["%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
            "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
            "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
           "offset_add":{"input":"%35 = add i64 %30, %32",
                         "value":"%35 = add i64 %30, %32"},
           "output_index":"%35 = add i64 %30, %32",
           "stride_mul":
           [{"input":"%23 = add i64 %18, %20",
             "multiplier":"i64 65",
             "value":"%24 = mul i64 %23, 65"},
            {"input":"%29 = add i64 %24, %26",
             "multiplier":"i64 5",
             "value":"%30 = mul i64 %29, 5"},
            {"input":"%35 = add i64 %30, %32",
             "value":"%35 = add i64 %30, %32"}]}}],
 "successor":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
 "write":{"address":"%36 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %35",
          "base_index":"%18 = mul i64 %15, 65",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%18 = mul i64 %15, 65",
            "input":"%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
            "value":"%23 = add i64 %18, %20"},
           {"addend":"%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
            "input":"%24 = mul i64 %23, 65",
            "value":"%29 = add i64 %24, %26"},
           {"addend":"%32 = phi i64 [ %41, %34 ], [ 0, %28 ]",
            "input":"%30 = mul i64 %29, 5",
            "value":"%35 = add i64 %30, %32"}],
          "input_index":
          ["%20 = phi i64 [ %45, %44 ], [ 1, %17 ]",
           "%26 = phi i64 [ %43, %42 ], [ 1, %22 ]",
           "%32 = phi i64 [ %41, %34 ], [ 0, %28 ]"],
          "offset_add":{"input":"%35 = add i64 %30, %32",
                        "value":"%35 = add i64 %30, %32"},
          "output_index":"%35 = add i64 %30, %32",
          "store":"store double %40, double* %36, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%23 = add i64 %18, %20",
            "multiplier":"i64 65",
            "value":"%24 = mul i64 %23, 65"},
           {"input":"%29 = add i64 %24, %26",
            "multiplier":"i64 5",
            "value":"%30 = mul i64 %29, 5"},
           {"input":"%35 = add i64 %30, %32",
            "value":"%35 = add i64 %30, %32"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

BEGIN FUNCTION TRANSFORMATION diffusion
BEGIN LOOP
BEGIN scalar
{"begin":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
 "body":{"begin":"%38 = add i64 %32, %34",
         "end":"br label %33",
         "precursor":"br i1 %36, label %51, label %37",
         "successor":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"},
 "comparison":"%36 = icmp eq i64 %34, 5",
 "end":"br i1 %36, label %51, label %37",
 "increment":"%50 = add nuw nsw i64 %34, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
 "kernel":{"constants":
           [{"use":"%39 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%44 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%46 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%38 = add i64 %32, %34",
             "value":"%32 = mul i64 %31, 5"}],
           "input":
           ["%40 = load double, double* %39, align 8, !tbaa !7",
            "%40 = load double, double* %39, align 8, !tbaa !7",
            "%42 = load double, double* %41, align 8, !tbaa !7",
            "%42 = load double, double* %41, align 8, !tbaa !7",
            "%47 = load double, double* %46, align 8, !tbaa !7",
            "%47 = load double, double* %46, align 8, !tbaa !7",
            "%35 = phi double [ %49, %37 ], [ %28, %30 ]"],
           "origin":
           ["br i1 %36, label %51, label %37"],
           "output":"%49 = fadd double %35, %48",
           "restrictions":
           [{"use":"%38 = add i64 %32, %34",
             "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"},
            {"use":"%50 = add nuw nsw i64 %34, 1",
             "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"},
            {"use":"%49 = fadd double %35, %48",
             "value":"%35 = phi double [ %49, %37 ], [ %28, %30 ]"}]},
 "old_value":"%35 = phi double [ %49, %37 ], [ %28, %30 ]",
 "precursor":"br label %33",
 "read":
 [{"address":"%39 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"}],
   "input_index":
   ["%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
   "offset_add":{"addend":"%32 = mul i64 %31, 5",
                 "input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
                 "value":"%38 = add i64 %32, %34"},
   "output_index":"%38 = add i64 %32, %34",
   "stride_mul":
   [{"input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"}]},
  {"address":"%39 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
   "base_index":"%32 = mul i64 %31, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%32 = mul i64 %31, 5",
     "input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%38 = add i64 %32, %34"}],
   "input_index":
   ["%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
   "offset_add":{"input":"%38 = add i64 %32, %34",
                 "value":"%38 = add i64 %32, %34"},
   "output_index":"%38 = add i64 %32, %34",
   "stride_mul":
   [{"input":"%38 = add i64 %32, %34",
     "value":"%38 = add i64 %32, %34"}]},
  {"address":"%41 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"}],
   "input_index":
   ["%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
   "offset_add":{"addend":"%32 = mul i64 %31, 5",
                 "input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
                 "value":"%38 = add i64 %32, %34"},
   "output_index":"%38 = add i64 %32, %34",
   "stride_mul":
   [{"input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"}]},
  {"address":"%41 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
   "base_index":"%32 = mul i64 %31, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%32 = mul i64 %31, 5",
     "input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%38 = add i64 %32, %34"}],
   "input_index":
   ["%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
   "offset_add":{"input":"%38 = add i64 %32, %34",
                 "value":"%38 = add i64 %32, %34"},
   "output_index":"%38 = add i64 %32, %34",
   "stride_mul":
   [{"input":"%38 = add i64 %32, %34",
     "value":"%38 = add i64 %32, %34"}]},
  {"address":"%46 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"}],
   "input_index":
   ["%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
   "offset_add":{"addend":"%32 = mul i64 %31, 5",
                 "input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
                 "value":"%38 = add i64 %32, %34"},
   "output_index":"%38 = add i64 %32, %34",
   "stride_mul":
   [{"input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"}]},
  {"address":"%46 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
   "base_index":"%32 = mul i64 %31, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%32 = mul i64 %31, 5",
     "input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%38 = add i64 %32, %34"}],
   "input_index":
   ["%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
   "offset_add":{"input":"%38 = add i64 %32, %34",
                 "value":"%38 = add i64 %32, %34"},
   "output_index":"%38 = add i64 %32, %34",
   "stride_mul":
   [{"input":"%38 = add i64 %32, %34",
     "value":"%38 = add i64 %32, %34"}]}],
 "read_value":
 ["%40 = load double, double* %39, align 8, !tbaa !7",
  "%40 = load double, double* %39, align 8, !tbaa !7",
  "%42 = load double, double* %41, align 8, !tbaa !7",
  "%42 = load double, double* %41, align 8, !tbaa !7",
  "%47 = load double, double* %46, align 8, !tbaa !7",
  "%47 = load double, double* %46, align 8, !tbaa !7"],
 "successor":"%52 = add nuw nsw i64 %27, 1"}
END scalar
BEGIN stencil
{"begin":"%24 = add i64 %18, %20",
 "body":{"begin":"%38 = add i64 %32, %34",
         "end":"br label %33",
         "precursor":"br i1 %36, label %51, label %37",
         "successor":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"},
 "end":"br label %19",
 "iterator":
 ["%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
  "%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
  "%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
 "kernel":{"constants":
           [{"use":"%39 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%44 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%46 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%40 = load double, double* %39, align 8, !tbaa !7",
            "%42 = load double, double* %41, align 8, !tbaa !7",
            "%47 = load double, double* %46, align 8, !tbaa !7"],
           "origin":
           ["br i1 %36, label %51, label %37"],
           "output":"%43 = fmul double %40, %42",
           "restrictions":
           [{"use":"%38 = add i64 %32, %34",
             "value":"%32 = mul i64 %31, 5"},
            {"use":"%38 = add i64 %32, %34",
             "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"},
            {"use":"%50 = add nuw nsw i64 %34, 1",
             "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"},
            {"use":"%49 = fadd double %35, %48",
             "value":"%35 = phi double [ %49, %37 ], [ %28, %30 ]"}]},
 "loop":
 [{"begin":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
   "body":{"begin":"%24 = add i64 %18, %20",
           "end":"br label %19",
           "precursor":"br i1 %22, label %55, label %23",
           "successor":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]"},
   "comparison":"%22 = icmp eq i64 %20, 5",
   "end":"br i1 %22, label %55, label %23",
   "increment":"%54 = add nuw nsw i64 %20, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "precursor":"br label %19",
   "successor":"%56 = add nuw nsw i64 %14, 1"},
  {"begin":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
   "body":{"begin":"%31 = add i64 %25, %27",
           "end":"br label %26",
           "precursor":"br i1 %29, label %53, label %30",
           "successor":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]"},
   "comparison":"%29 = icmp eq i64 %27, 5",
   "end":"br i1 %29, label %53, label %30",
   "increment":"%52 = add nuw nsw i64 %27, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
   "post_sese":{"begin":"%54 = add nuw nsw i64 %20, 1",
                "end":"br label %19",
                "precursor":"br i1 %29, label %53, label %30",
                "successor":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]"},
   "pre_sese":{"begin":"%24 = add i64 %18, %20",
               "end":"br label %26",
               "precursor":"br i1 %22, label %55, label %23",
               "successor":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]"},
   "precursor":"br label %26",
   "successor":"%54 = add nuw nsw i64 %20, 1"},
  {"begin":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
   "body":{"begin":"%38 = add i64 %32, %34",
           "end":"br label %33",
           "precursor":"br i1 %36, label %51, label %37",
           "successor":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"},
   "comparison":"%36 = icmp eq i64 %34, 5",
   "end":"br i1 %36, label %51, label %37",
   "increment":"%50 = add nuw nsw i64 %34, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
   "post_sese":{"begin":"%52 = add nuw nsw i64 %27, 1",
                "end":"br label %26",
                "precursor":"br i1 %36, label %51, label %37",
                "successor":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]"},
   "pre_sese":{"begin":"%31 = add i64 %25, %27",
               "end":"br label %33",
               "precursor":"br i1 %29, label %53, label %30",
               "successor":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"},
   "precursor":"br label %33",
   "successor":"%52 = add nuw nsw i64 %27, 1"}],
 "precursor":"br i1 %22, label %55, label %23",
 "reads":
 [{"address":"%39 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
     "value":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]"},
    {"input":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
     "value":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]"},
    {"input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"}],
   "input_index":
   ["%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
    "%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
    "%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
   "read":{"address":"%39 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
           "base_index":"%18 = mul i64 %14, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%18 = mul i64 %14, 5",
             "input":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
             "value":"%24 = add i64 %18, %20"},
            {"addend":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
             "input":"%25 = mul i64 %24, 5",
             "value":"%31 = add i64 %25, %27"},
            {"addend":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
             "input":"%32 = mul i64 %31, 5",
             "value":"%38 = add i64 %32, %34"}],
           "input_index":
           ["%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
            "%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
            "%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
           "offset_add":{"input":"%38 = add i64 %32, %34",
                         "value":"%38 = add i64 %32, %34"},
           "output_index":"%38 = add i64 %32, %34",
           "stride_mul":
           [{"input":"%24 = add i64 %18, %20",
             "multiplier":"i64 5",
             "value":"%25 = mul i64 %24, 5"},
            {"input":"%31 = add i64 %25, %27",
             "multiplier":"i64 5",
             "value":"%32 = mul i64 %31, 5"},
            {"input":"%38 = add i64 %32, %34",
             "value":"%38 = add i64 %32, %34"}]}},
  {"address":"%41 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
     "value":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]"},
    {"input":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
     "value":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]"},
    {"input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"}],
   "input_index":
   ["%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
    "%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
    "%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
   "read":{"address":"%41 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
           "base_index":"%18 = mul i64 %14, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%18 = mul i64 %14, 5",
             "input":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
             "value":"%24 = add i64 %18, %20"},
            {"addend":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
             "input":"%25 = mul i64 %24, 5",
             "value":"%31 = add i64 %25, %27"},
            {"addend":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
             "input":"%32 = mul i64 %31, 5",
             "value":"%38 = add i64 %32, %34"}],
           "input_index":
           ["%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
            "%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
            "%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
           "offset_add":{"input":"%38 = add i64 %32, %34",
                         "value":"%38 = add i64 %32, %34"},
           "output_index":"%38 = add i64 %32, %34",
           "stride_mul":
           [{"input":"%24 = add i64 %18, %20",
             "multiplier":"i64 5",
             "value":"%25 = mul i64 %24, 5"},
            {"input":"%31 = add i64 %25, %27",
             "multiplier":"i64 5",
             "value":"%32 = mul i64 %31, 5"},
            {"input":"%38 = add i64 %32, %34",
             "value":"%38 = add i64 %32, %34"}]}},
  {"address":"%46 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
     "value":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]"},
    {"input":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
     "value":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]"},
    {"input":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
     "value":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"}],
   "input_index":
   ["%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
    "%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
    "%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
   "read":{"address":"%46 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
           "base_index":"%18 = mul i64 %14, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%18 = mul i64 %14, 5",
             "input":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
             "value":"%24 = add i64 %18, %20"},
            {"addend":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
             "input":"%25 = mul i64 %24, 5",
             "value":"%31 = add i64 %25, %27"},
            {"addend":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
             "input":"%32 = mul i64 %31, 5",
             "value":"%38 = add i64 %32, %34"}],
           "input_index":
           ["%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
            "%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
            "%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
           "offset_add":{"input":"%38 = add i64 %32, %34",
                         "value":"%38 = add i64 %32, %34"},
           "output_index":"%38 = add i64 %32, %34",
           "stride_mul":
           [{"input":"%24 = add i64 %18, %20",
             "multiplier":"i64 5",
             "value":"%25 = mul i64 %24, 5"},
            {"input":"%31 = add i64 %25, %27",
             "multiplier":"i64 5",
             "value":"%32 = mul i64 %31, 5"},
            {"input":"%38 = add i64 %32, %34",
             "value":"%38 = add i64 %32, %34"}]}}],
 "successor":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
 "write":{"address":"%44 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %38",
          "base_index":"%18 = mul i64 %14, 5",
          "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%18 = mul i64 %14, 5",
            "input":"%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
            "value":"%24 = add i64 %18, %20"},
           {"addend":"%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
            "input":"%25 = mul i64 %24, 5",
            "value":"%31 = add i64 %25, %27"},
           {"addend":"%34 = phi i64 [ %50, %37 ], [ 0, %30 ]",
            "input":"%32 = mul i64 %31, 5",
            "value":"%38 = add i64 %32, %34"}],
          "input_index":
          ["%20 = phi i64 [ %54, %53 ], [ 0, %17 ]",
           "%27 = phi i64 [ %52, %51 ], [ 0, %23 ]",
           "%34 = phi i64 [ %50, %37 ], [ 0, %30 ]"],
          "offset_add":{"input":"%38 = add i64 %32, %34",
                        "value":"%38 = add i64 %32, %34"},
          "output_index":"%38 = add i64 %32, %34",
          "store":"store double %43, double* %44, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%24 = add i64 %18, %20",
            "multiplier":"i64 5",
            "value":"%25 = mul i64 %24, 5"},
           {"input":"%31 = add i64 %25, %27",
            "multiplier":"i64 5",
            "value":"%32 = mul i64 %31, 5"},
           {"input":"%38 = add i64 %32, %34",
            "value":"%38 = add i64 %32, %34"}]}}
END stencil
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2, double in3)
{
  in0->_0 += in2*(in1*in2)*in3;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
 "body":{"begin":"%65 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0), i64 %61",
         "end":"br label %60",
         "precursor":"br i1 %63, label %64, label %74",
         "successor":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"},
 "comparison":"%63 = icmp slt i64 %61, %59",
 "end":"br i1 %63, label %64, label %74",
 "increment":"%73 = add nuw nsw i64 %61, 1",
 "iter_begin":"i64 0",
 "iter_end":"%59 = sext i32 %58 to i64",
 "iter_step":"i64 1",
 "iterator":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
 "kernel":{"constants":
           [{"use":"%65 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0), i64 %61",
             "value":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0)"},
            {"use":"%67 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0), i64 %61",
             "value":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0)"},
            {"use":"%70 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @pmorx, i64 0, i64 0), i64 %61",
             "value":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @pmorx, i64 0, i64 0)"}],
           "input":
           ["%66 = load double, double* %65, align 8, !tbaa !7",
            "%68 = load double, double* %67, align 8, !tbaa !7",
            "%62 = phi double [ %72, %64 ], [ %15, %57 ]"],
           "origin":
           ["br i1 %63, label %64, label %74"],
           "output":"%72 = fadd double %62, %71",
           "restrictions":
           [{"use":"%65 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0), i64 %61",
             "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"},
            {"use":"%67 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0), i64 %61",
             "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"},
            {"use":"%70 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @pmorx, i64 0, i64 0), i64 %61",
             "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"},
            {"use":"%73 = add nuw nsw i64 %61, 1",
             "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"},
            {"use":"%72 = fadd double %62, %71",
             "value":"%62 = phi double [ %72, %64 ], [ %15, %57 ]"}]},
 "old_value":"%62 = phi double [ %72, %64 ], [ %15, %57 ]",
 "precursor":"br label %60",
 "read":
 [{"address":"%65 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0), i64 %61",
   "base_pointer":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0)",
   "index_add":
   [{"input":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
     "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"}],
   "input_index":
   ["%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"],
   "offset_add":{"input":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
                 "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"},
   "output_index":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
   "stride_mul":
   [{"input":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
     "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"}]},
  {"address":"%67 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0), i64 %61",
   "base_pointer":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0)",
   "index_add":
   [{"input":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
     "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"}],
   "input_index":
   ["%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"],
   "offset_add":{"input":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
                 "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"},
   "output_index":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
   "stride_mul":
   [{"input":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]",
     "value":"%61 = phi i64 [ %73, %64 ], [ 0, %57 ]"}]}],
 "read_value":
 ["%66 = load double, double* %65, align 8, !tbaa !7",
  "%68 = load double, double* %67, align 8, !tbaa !7"],
 "successor":"%75 = phi double [ %150, %268 ], [ %62, %60 ]"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in2*(in1*in2);
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
 "body":{"begin":"%109 = add i64 %103, %105",
         "end":"br label %104",
         "precursor":"br i1 %107, label %122, label %108",
         "successor":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"},
 "comparison":"%107 = icmp eq i64 %105, 5",
 "end":"br i1 %107, label %122, label %108",
 "increment":"%121 = add nuw nsw i64 %105, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
 "kernel":{"constants":
           [{"use":"%110 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%112 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%117 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%115 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%109 = add i64 %103, %105",
             "value":"%103 = mul i64 %102, 5"}],
           "input":
           ["%111 = load double, double* %110, align 8, !tbaa !7",
            "%111 = load double, double* %110, align 8, !tbaa !7",
            "%113 = load double, double* %112, align 8, !tbaa !7",
            "%113 = load double, double* %112, align 8, !tbaa !7",
            "%118 = load double, double* %117, align 8, !tbaa !7",
            "%118 = load double, double* %117, align 8, !tbaa !7",
            "%106 = phi double [ %120, %108 ], [ %99, %101 ]"],
           "origin":
           ["br i1 %107, label %122, label %108"],
           "output":"%120 = fadd double %106, %119",
           "restrictions":
           [{"use":"%109 = add i64 %103, %105",
             "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"},
            {"use":"%121 = add nuw nsw i64 %105, 1",
             "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"},
            {"use":"%120 = fadd double %106, %119",
             "value":"%106 = phi double [ %120, %108 ], [ %99, %101 ]"}]},
 "old_value":"%106 = phi double [ %120, %108 ], [ %99, %101 ]",
 "precursor":"br label %104",
 "read":
 [{"address":"%110 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"}],
   "input_index":
   ["%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
   "offset_add":{"addend":"%103 = mul i64 %102, 5",
                 "input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
                 "value":"%109 = add i64 %103, %105"},
   "output_index":"%109 = add i64 %103, %105",
   "stride_mul":
   [{"input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"}]},
  {"address":"%110 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
   "base_index":"%103 = mul i64 %102, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%103 = mul i64 %102, 5",
     "input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%109 = add i64 %103, %105"}],
   "input_index":
   ["%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
   "offset_add":{"input":"%109 = add i64 %103, %105",
                 "value":"%109 = add i64 %103, %105"},
   "output_index":"%109 = add i64 %103, %105",
   "stride_mul":
   [{"input":"%109 = add i64 %103, %105",
     "value":"%109 = add i64 %103, %105"}]},
  {"address":"%112 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"}],
   "input_index":
   ["%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
   "offset_add":{"addend":"%103 = mul i64 %102, 5",
                 "input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
                 "value":"%109 = add i64 %103, %105"},
   "output_index":"%109 = add i64 %103, %105",
   "stride_mul":
   [{"input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"}]},
  {"address":"%112 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
   "base_index":"%103 = mul i64 %102, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%103 = mul i64 %102, 5",
     "input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%109 = add i64 %103, %105"}],
   "input_index":
   ["%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
   "offset_add":{"input":"%109 = add i64 %103, %105",
                 "value":"%109 = add i64 %103, %105"},
   "output_index":"%109 = add i64 %103, %105",
   "stride_mul":
   [{"input":"%109 = add i64 %103, %105",
     "value":"%109 = add i64 %103, %105"}]},
  {"address":"%117 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"}],
   "input_index":
   ["%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
   "offset_add":{"addend":"%103 = mul i64 %102, 5",
                 "input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
                 "value":"%109 = add i64 %103, %105"},
   "output_index":"%109 = add i64 %103, %105",
   "stride_mul":
   [{"input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"}]},
  {"address":"%117 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
   "base_index":"%103 = mul i64 %102, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%103 = mul i64 %102, 5",
     "input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%109 = add i64 %103, %105"}],
   "input_index":
   ["%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
   "offset_add":{"input":"%109 = add i64 %103, %105",
                 "value":"%109 = add i64 %103, %105"},
   "output_index":"%109 = add i64 %103, %105",
   "stride_mul":
   [{"input":"%109 = add i64 %103, %105",
     "value":"%109 = add i64 %103, %105"}]}],
 "read_value":
 ["%111 = load double, double* %110, align 8, !tbaa !7",
  "%111 = load double, double* %110, align 8, !tbaa !7",
  "%113 = load double, double* %112, align 8, !tbaa !7",
  "%113 = load double, double* %112, align 8, !tbaa !7",
  "%118 = load double, double* %117, align 8, !tbaa !7",
  "%118 = load double, double* %117, align 8, !tbaa !7"],
 "successor":"%123 = add nuw nsw i64 %98, 1"}
END scalar
BEGIN stencil
{"begin":"%95 = add i64 %89, %91",
 "body":{"begin":"%109 = add i64 %103, %105",
         "end":"br label %104",
         "precursor":"br i1 %107, label %122, label %108",
         "successor":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"},
 "end":"br label %90",
 "iterator":
 ["%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
  "%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
  "%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
 "kernel":{"constants":
           [{"use":"%110 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%112 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%117 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%115 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%111 = load double, double* %110, align 8, !tbaa !7",
            "%113 = load double, double* %112, align 8, !tbaa !7",
            "%118 = load double, double* %117, align 8, !tbaa !7"],
           "origin":
           ["br i1 %107, label %122, label %108"],
           "output":"%114 = fmul double %111, %113",
           "restrictions":
           [{"use":"%109 = add i64 %103, %105",
             "value":"%103 = mul i64 %102, 5"},
            {"use":"%109 = add i64 %103, %105",
             "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"},
            {"use":"%121 = add nuw nsw i64 %105, 1",
             "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"},
            {"use":"%120 = fadd double %106, %119",
             "value":"%106 = phi double [ %120, %108 ], [ %99, %101 ]"}]},
 "loop":
 [{"begin":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
   "body":{"begin":"%95 = add i64 %89, %91",
           "end":"br label %90",
           "precursor":"br i1 %93, label %126, label %94",
           "successor":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]"},
   "comparison":"%93 = icmp eq i64 %91, 5",
   "end":"br i1 %93, label %126, label %94",
   "increment":"%125 = add nuw nsw i64 %91, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "precursor":"br label %90",
   "successor":"%127 = add nuw nsw i64 %85, 1"},
  {"begin":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
   "body":{"begin":"%102 = add i64 %96, %98",
           "end":"br label %97",
           "precursor":"br i1 %100, label %124, label %101",
           "successor":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]"},
   "comparison":"%100 = icmp eq i64 %98, 5",
   "end":"br i1 %100, label %124, label %101",
   "increment":"%123 = add nuw nsw i64 %98, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
   "post_sese":{"begin":"%125 = add nuw nsw i64 %91, 1",
                "end":"br label %90",
                "precursor":"br i1 %100, label %124, label %101",
                "successor":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]"},
   "pre_sese":{"begin":"%95 = add i64 %89, %91",
               "end":"br label %97",
               "precursor":"br i1 %93, label %126, label %94",
               "successor":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]"},
   "precursor":"br label %97",
   "successor":"%125 = add nuw nsw i64 %91, 1"},
  {"begin":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
   "body":{"begin":"%109 = add i64 %103, %105",
           "end":"br label %104",
           "precursor":"br i1 %107, label %122, label %108",
           "successor":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"},
   "comparison":"%107 = icmp eq i64 %105, 5",
   "end":"br i1 %107, label %122, label %108",
   "increment":"%121 = add nuw nsw i64 %105, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
   "post_sese":{"begin":"%123 = add nuw nsw i64 %98, 1",
                "end":"br label %97",
                "precursor":"br i1 %107, label %122, label %108",
                "successor":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]"},
   "pre_sese":{"begin":"%102 = add i64 %96, %98",
               "end":"br label %104",
               "precursor":"br i1 %100, label %124, label %101",
               "successor":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"},
   "precursor":"br label %104",
   "successor":"%123 = add nuw nsw i64 %98, 1"}],
 "precursor":"br i1 %93, label %126, label %94",
 "reads":
 [{"address":"%110 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
     "value":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]"},
    {"input":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
     "value":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]"},
    {"input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"}],
   "input_index":
   ["%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
    "%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
    "%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
   "read":{"address":"%110 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
           "base_index":"%89 = mul i64 %85, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @dpcelm, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%89 = mul i64 %85, 5",
             "input":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
             "value":"%95 = add i64 %89, %91"},
            {"addend":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
             "input":"%96 = mul i64 %95, 5",
             "value":"%102 = add i64 %96, %98"},
            {"addend":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
             "input":"%103 = mul i64 %102, 5",
             "value":"%109 = add i64 %103, %105"}],
           "input_index":
           ["%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
            "%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
            "%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
           "offset_add":{"input":"%109 = add i64 %103, %105",
                         "value":"%109 = add i64 %103, %105"},
           "output_index":"%109 = add i64 %103, %105",
           "stride_mul":
           [{"input":"%95 = add i64 %89, %91",
             "multiplier":"i64 5",
             "value":"%96 = mul i64 %95, 5"},
            {"input":"%102 = add i64 %96, %98",
             "multiplier":"i64 5",
             "value":"%103 = mul i64 %102, 5"},
            {"input":"%109 = add i64 %103, %105",
             "value":"%109 = add i64 %103, %105"}]}},
  {"address":"%112 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
     "value":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]"},
    {"input":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
     "value":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]"},
    {"input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"}],
   "input_index":
   ["%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
    "%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
    "%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
   "read":{"address":"%112 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
           "base_index":"%89 = mul i64 %85, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%89 = mul i64 %85, 5",
             "input":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
             "value":"%95 = add i64 %89, %91"},
            {"addend":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
             "input":"%96 = mul i64 %95, 5",
             "value":"%102 = add i64 %96, %98"},
            {"addend":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
             "input":"%103 = mul i64 %102, 5",
             "value":"%109 = add i64 %103, %105"}],
           "input_index":
           ["%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
            "%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
            "%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
           "offset_add":{"input":"%109 = add i64 %103, %105",
                         "value":"%109 = add i64 %103, %105"},
           "output_index":"%109 = add i64 %103, %105",
           "stride_mul":
           [{"input":"%95 = add i64 %89, %91",
             "multiplier":"i64 5",
             "value":"%96 = mul i64 %95, 5"},
            {"input":"%102 = add i64 %96, %98",
             "multiplier":"i64 5",
             "value":"%103 = mul i64 %102, 5"},
            {"input":"%109 = add i64 %103, %105",
             "value":"%109 = add i64 %103, %105"}]}},
  {"address":"%117 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
     "value":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]"},
    {"input":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
     "value":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]"},
    {"input":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
     "value":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"}],
   "input_index":
   ["%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
    "%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
    "%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
   "read":{"address":"%117 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
           "base_index":"%89 = mul i64 %85, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%89 = mul i64 %85, 5",
             "input":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
             "value":"%95 = add i64 %89, %91"},
            {"addend":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
             "input":"%96 = mul i64 %95, 5",
             "value":"%102 = add i64 %96, %98"},
            {"addend":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
             "input":"%103 = mul i64 %102, 5",
             "value":"%109 = add i64 %103, %105"}],
           "input_index":
           ["%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
            "%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
            "%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
           "offset_add":{"input":"%109 = add i64 %103, %105",
                         "value":"%109 = add i64 %103, %105"},
           "output_index":"%109 = add i64 %103, %105",
           "stride_mul":
           [{"input":"%95 = add i64 %89, %91",
             "multiplier":"i64 5",
             "value":"%96 = mul i64 %95, 5"},
            {"input":"%102 = add i64 %96, %98",
             "multiplier":"i64 5",
             "value":"%103 = mul i64 %102, 5"},
            {"input":"%109 = add i64 %103, %105",
             "value":"%109 = add i64 %103, %105"}]}}],
 "successor":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
 "write":{"address":"%115 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %109",
          "base_index":"%89 = mul i64 %85, 5",
          "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%89 = mul i64 %85, 5",
            "input":"%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
            "value":"%95 = add i64 %89, %91"},
           {"addend":"%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
            "input":"%96 = mul i64 %95, 5",
            "value":"%102 = add i64 %96, %98"},
           {"addend":"%105 = phi i64 [ %121, %108 ], [ 0, %101 ]",
            "input":"%103 = mul i64 %102, 5",
            "value":"%109 = add i64 %103, %105"}],
          "input_index":
          ["%91 = phi i64 [ %125, %124 ], [ 0, %88 ]",
           "%98 = phi i64 [ %123, %122 ], [ 0, %94 ]",
           "%105 = phi i64 [ %121, %108 ], [ 0, %101 ]"],
          "offset_add":{"input":"%109 = add i64 %103, %105",
                        "value":"%109 = add i64 %103, %105"},
          "output_index":"%109 = add i64 %103, %105",
          "store":"store double %114, double* %115, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%95 = add i64 %89, %91",
            "multiplier":"i64 5",
            "value":"%96 = mul i64 %95, 5"},
           {"input":"%102 = add i64 %96, %98",
            "multiplier":"i64 5",
            "value":"%103 = mul i64 %102, 5"},
           {"input":"%109 = add i64 %103, %105",
            "value":"%109 = add i64 %103, %105"}]}}
END stencil
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2, double in3)
{
  in0->_0 += in2*(in1*in2)*in3;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
 "body":{"begin":"%136 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0), i64 %132",
         "end":"br label %131",
         "precursor":"br i1 %134, label %135, label %145",
         "successor":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"},
 "comparison":"%134 = icmp slt i64 %132, %130",
 "end":"br i1 %134, label %135, label %145",
 "increment":"%144 = add nuw nsw i64 %132, 1",
 "iter_begin":"i64 0",
 "iter_end":"%130 = sext i32 %129 to i64",
 "iter_step":"i64 1",
 "iterator":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
 "kernel":{"constants":
           [{"use":"%136 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0), i64 %132",
             "value":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0)"},
            {"use":"%138 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0), i64 %132",
             "value":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0)"},
            {"use":"%141 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @ppmor, i64 0, i64 0), i64 %132",
             "value":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @ppmor, i64 0, i64 0)"}],
           "input":
           ["%137 = load double, double* %136, align 8, !tbaa !7",
            "%139 = load double, double* %138, align 8, !tbaa !7",
            "%133 = phi double [ %143, %135 ], [ %86, %128 ]"],
           "origin":
           ["br i1 %134, label %135, label %145"],
           "output":"%143 = fadd double %133, %142",
           "restrictions":
           [{"use":"%136 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0), i64 %132",
             "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"},
            {"use":"%138 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0), i64 %132",
             "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"},
            {"use":"%141 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @ppmor, i64 0, i64 0), i64 %132",
             "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"},
            {"use":"%144 = add nuw nsw i64 %132, 1",
             "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"},
            {"use":"%143 = fadd double %133, %142",
             "value":"%133 = phi double [ %143, %135 ], [ %86, %128 ]"}]},
 "old_value":"%133 = phi double [ %143, %135 ], [ %86, %128 ]",
 "precursor":"br label %131",
 "read":
 [{"address":"%136 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0), i64 %132",
   "base_pointer":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @dpcmor, i64 0, i64 0)",
   "index_add":
   [{"input":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
     "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"}],
   "input_index":
   ["%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"],
   "offset_add":{"input":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
                 "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"},
   "output_index":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
   "stride_mul":
   [{"input":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
     "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"}]},
  {"address":"%138 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0), i64 %132",
   "base_pointer":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0)",
   "index_add":
   [{"input":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
     "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"}],
   "input_index":
   ["%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"],
   "offset_add":{"input":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
                 "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"},
   "output_index":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
   "stride_mul":
   [{"input":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]",
     "value":"%132 = phi i64 [ %144, %135 ], [ 0, %128 ]"}]}],
 "read_value":
 ["%137 = load double, double* %136, align 8, !tbaa !7",
  "%139 = load double, double* %138, align 8, !tbaa !7"],
 "successor":"%146 = fdiv double %133, %75"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in2*(in1*in2);
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
 "body":{"begin":"%233 = add i64 %227, %229",
         "end":"br label %228",
         "precursor":"br i1 %231, label %244, label %232",
         "successor":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"},
 "comparison":"%231 = icmp eq i64 %229, 5",
 "end":"br i1 %231, label %244, label %232",
 "increment":"%243 = add nuw nsw i64 %229, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
 "kernel":{"constants":
           [{"use":"%234 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %233",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%239 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %233",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%236 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %233",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%233 = add i64 %227, %229",
             "value":"%227 = mul i64 %226, 5"}],
           "input":
           ["%235 = load double, double* %234, align 8, !tbaa !7",
            "%235 = load double, double* %234, align 8, !tbaa !7",
            "%237 = load double, double* %236, align 8, !tbaa !7",
            "%237 = load double, double* %236, align 8, !tbaa !7",
            "%240 = load double, double* %239, align 8, !tbaa !7",
            "%240 = load double, double* %239, align 8, !tbaa !7",
            "%230 = phi double [ %242, %232 ], [ %223, %225 ]"],
           "origin":
           ["br i1 %231, label %244, label %232"],
           "output":"%242 = fadd double %230, %241",
           "restrictions":
           [{"use":"%233 = add i64 %227, %229",
             "value":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"},
            {"use":"%243 = add nuw nsw i64 %229, 1",
             "value":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"},
            {"use":"%242 = fadd double %230, %241",
             "value":"%230 = phi double [ %242, %232 ], [ %223, %225 ]"}]},
 "old_value":"%230 = phi double [ %242, %232 ], [ %223, %225 ]",
 "precursor":"br label %228",
 "read":
 [{"address":"%234 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %233",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
     "value":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"}],
   "input_index":
   ["%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"],
   "offset_add":{"addend":"%227 = mul i64 %226, 5",
                 "input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
                 "value":"%233 = add i64 %227, %229"},
   "output_index":"%233 = add i64 %227, %229",
   "stride_mul":
   [{"input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
     "value":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"}]},
  {"address":"%234 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %233",
   "base_index":"%227 = mul i64 %226, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiff, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%227 = mul i64 %226, 5",
     "input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
     "value":"%233 = add i64 %227, %229"}],
   "input_index":
   ["%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"],
   "offset_add":{"input":"%233 = add i64 %227, %229",
                 "value":"%233 = add i64 %227, %229"},
   "output_index":"%233 = add i64 %227, %229",
   "stride_mul":
   [{"input":"%233 = add i64 %227, %229",
     "value":"%233 = add i64 %227, %229"}]},
  {"address":"%236 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %233",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
     "value":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"}],
   "input_index":
   ["%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"],
   "offset_add":{"addend":"%227 = mul i64 %226, 5",
                 "input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
                 "value":"%233 = add i64 %227, %229"},
   "output_index":"%233 = add i64 %227, %229",
   "stride_mul":
   [{"input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
     "value":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"}]},
  {"address":"%236 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %233",
   "base_index":"%227 = mul i64 %226, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @pdiffp, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%227 = mul i64 %226, 5",
     "input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
     "value":"%233 = add i64 %227, %229"}],
   "input_index":
   ["%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"],
   "offset_add":{"input":"%233 = add i64 %227, %229",
                 "value":"%233 = add i64 %227, %229"},
   "output_index":"%233 = add i64 %227, %229",
   "stride_mul":
   [{"input":"%233 = add i64 %227, %229",
     "value":"%233 = add i64 %227, %229"}]},
  {"address":"%239 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %233",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
     "value":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"}],
   "input_index":
   ["%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"],
   "offset_add":{"addend":"%227 = mul i64 %226, 5",
                 "input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
                 "value":"%233 = add i64 %227, %229"},
   "output_index":"%233 = add i64 %227, %229",
   "stride_mul":
   [{"input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
     "value":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"}]},
  {"address":"%239 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %233",
   "base_index":"%227 = mul i64 %226, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @tmult, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%227 = mul i64 %226, 5",
     "input":"%229 = phi i64 [ %243, %232 ], [ 0, %225 ]",
     "value":"%233 = add i64 %227, %229"}],
   "input_index":
   ["%229 = phi i64 [ %243, %232 ], [ 0, %225 ]"],
   "offset_add":{"input":"%233 = add i64 %227, %229",
                 "value":"%233 = add i64 %227, %229"},
   "output_index":"%233 = add i64 %227, %229",
   "stride_mul":
   [{"input":"%233 = add i64 %227, %229",
     "value":"%233 = add i64 %227, %229"}]}],
 "read_value":
 ["%235 = load double, double* %234, align 8, !tbaa !7",
  "%235 = load double, double* %234, align 8, !tbaa !7",
  "%237 = load double, double* %236, align 8, !tbaa !7",
  "%237 = load double, double* %236, align 8, !tbaa !7",
  "%240 = load double, double* %239, align 8, !tbaa !7",
  "%240 = load double, double* %239, align 8, !tbaa !7"],
 "successor":"%245 = add nuw nsw i64 %222, 1"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2, double in3)
{
  in0->_0 += in1*in2*in3;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
 "body":{"begin":"%258 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @ppmor, i64 0, i64 0), i64 %254",
         "end":"br label %253",
         "precursor":"br i1 %256, label %257, label %268",
         "successor":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"},
 "comparison":"%256 = icmp slt i64 %254, %252",
 "end":"br i1 %256, label %257, label %268",
 "increment":"%267 = add nuw nsw i64 %254, 1",
 "iter_begin":"i64 0",
 "iter_end":"%252 = sext i32 %251 to i64",
 "iter_step":"i64 1",
 "iterator":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
 "kernel":{"constants":
           [{"use":"%263 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @pmorx, i64 0, i64 0), i64 %254",
             "value":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @pmorx, i64 0, i64 0)"},
            {"use":"%258 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @ppmor, i64 0, i64 0), i64 %254",
             "value":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @ppmor, i64 0, i64 0)"},
            {"use":"%260 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @tmmor, i64 0, i64 0), i64 %254",
             "value":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @tmmor, i64 0, i64 0)"}],
           "input":
           ["%259 = load double, double* %258, align 8, !tbaa !7",
            "%261 = load double, double* %260, align 8, !tbaa !7",
            "%264 = load double, double* %263, align 8, !tbaa !7",
            "%255 = phi double [ %266, %257 ], [ %210, %250 ]"],
           "origin":
           ["br i1 %256, label %257, label %268"],
           "output":"%266 = fadd double %255, %265",
           "restrictions":
           [{"use":"%258 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @ppmor, i64 0, i64 0), i64 %254",
             "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"},
            {"use":"%260 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @tmmor, i64 0, i64 0), i64 %254",
             "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"},
            {"use":"%263 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @pmorx, i64 0, i64 0), i64 %254",
             "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"},
            {"use":"%267 = add nuw nsw i64 %254, 1",
             "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"},
            {"use":"%266 = fadd double %255, %265",
             "value":"%255 = phi double [ %266, %257 ], [ %210, %250 ]"}]},
 "old_value":"%255 = phi double [ %266, %257 ], [ %210, %250 ]",
 "precursor":"br label %253",
 "read":
 [{"address":"%258 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @ppmor, i64 0, i64 0), i64 %254",
   "base_pointer":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @ppmor, i64 0, i64 0)",
   "index_add":
   [{"input":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
     "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"}],
   "input_index":
   ["%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"],
   "offset_add":{"input":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
                 "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"},
   "output_index":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
   "stride_mul":
   [{"input":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
     "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"}]},
  {"address":"%260 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @tmmor, i64 0, i64 0), i64 %254",
   "base_pointer":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @tmmor, i64 0, i64 0)",
   "index_add":
   [{"input":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
     "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"}],
   "input_index":
   ["%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"],
   "offset_add":{"input":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
                 "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"},
   "output_index":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
   "stride_mul":
   [{"input":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
     "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"}]},
  {"address":"%263 = getelementptr double, double* getelementptr inbounds ([92700 x double], [92700 x double]* @pmorx, i64 0, i64 0), i64 %254",
   "base_pointer":"double* getelementptr inbounds ([92700 x double], [92700 x double]* @pmorx, i64 0, i64 0)",
   "index_add":
   [{"input":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
     "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"}],
   "input_index":
   ["%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"],
   "offset_add":{"input":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
                 "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"},
   "output_index":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
   "stride_mul":
   [{"input":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]",
     "value":"%254 = phi i64 [ %267, %257 ], [ 0, %250 ]"}]}],
 "read_value":
 ["%259 = load double, double* %258, align 8, !tbaa !7",
  "%261 = load double, double* %260, align 8, !tbaa !7",
  "%264 = load double, double* %263, align 8, !tbaa !7"],
 "successor":"%269 = fdiv double %150, %255"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2, double in3)
{
  in0->_0 += in1*in2*in3;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION laplacian
BEGIN LOOP
BEGIN stencil
{"begin":"%141 = mul i64 %138, 5",
 "body":{"begin":"%156 = add i64 %149, %153",
         "end":"br label %152",
         "precursor":"br i1 %154, label %184, label %155",
         "successor":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"},
 "end":"br label %137",
 "iterator":
 ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
  "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
  "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
 "kernel":{"constants":
           [{"use":"%160 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g4m1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
             "value":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g4m1_s, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%165 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g5m1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
             "value":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g5m1_s, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%171 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g6m1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
             "value":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g6m1_s, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%176 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
             "value":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%157 = getelementptr double, double* %9, i64 %156",
             "value":"%9 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %4, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%179 = getelementptr double, double* %10, i64 %156",
             "value":"%10 = getelementptr [5 x [5 x double]], [5 x [5 x double]]* %1, i64 0, i64 0, i64 0"},
            {"use":"%178 = fmul double %50, %177",
             "value":"%50 = fdiv double 1.000000e+00, %8"},
            {"use":"%163 = getelementptr double, double* %51, i64 %156",
             "value":"%51 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %5, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%169 = getelementptr double, double* %93, i64 %156",
             "value":"%93 = getelementptr [5 x [5 x double]], [5 x [5 x double]]* %0, i64 0, i64 0, i64 0"}],
           "input":
           ["%158 = load double, double* %157, align 8, !tbaa !7",
            "%161 = load double, double* %160, align 8, !tbaa !7",
            "%164 = load double, double* %163, align 8, !tbaa !7",
            "%166 = load double, double* %165, align 8, !tbaa !7",
            "%170 = load double, double* %169, align 8, !tbaa !7",
            "%172 = load double, double* %171, align 8, !tbaa !7",
            "%177 = load double, double* %176, align 8, !tbaa !7",
            "%180 = load double, double* %179, align 8, !tbaa !7"],
           "origin":
           ["br i1 %154, label %184, label %155"],
           "output":"%182 = fadd double %175, %181",
           "restrictions":
           [{"use":"%156 = add i64 %149, %153",
             "value":"%149 = mul i64 %148, 5"},
            {"use":"%159 = add i64 %151, %153",
             "value":"%151 = mul i64 %150, 5"},
            {"use":"%156 = add i64 %149, %153",
             "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"},
            {"use":"%159 = add i64 %151, %153",
             "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"},
            {"use":"%183 = add nuw nsw i64 %153, 1",
             "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"}]},
 "loop":
 [{"begin":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
   "body":{"begin":"%141 = mul i64 %138, 5",
           "end":"br label %137",
           "precursor":"br i1 %139, label %188, label %140",
           "successor":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
   "comparison":"%139 = icmp eq i64 %138, 5",
   "end":"br i1 %139, label %188, label %140",
   "increment":"%187 = add nuw nsw i64 %138, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "precursor":"br label %137",
   "successor":"call void @llvm.lifetime.end.p0i8(i64 1000, i8* nonnull %7) #3"},
  {"begin":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
   "body":{"begin":"%148 = add i64 %141, %145",
           "end":"br label %144",
           "precursor":"br i1 %146, label %186, label %147",
           "successor":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
   "comparison":"%146 = icmp eq i64 %145, 5",
   "end":"br i1 %146, label %186, label %147",
   "increment":"%185 = add nuw nsw i64 %145, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
   "post_sese":{"begin":"%187 = add nuw nsw i64 %138, 1",
                "end":"br label %137",
                "precursor":"br i1 %146, label %186, label %147",
                "successor":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
   "pre_sese":{"begin":"%141 = mul i64 %138, 5",
               "end":"br label %144",
               "precursor":"br i1 %139, label %188, label %140",
               "successor":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
   "precursor":"br label %144",
   "successor":"%187 = add nuw nsw i64 %138, 1"},
  {"begin":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
   "body":{"begin":"%156 = add i64 %149, %153",
           "end":"br label %152",
           "precursor":"br i1 %154, label %184, label %155",
           "successor":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"},
   "comparison":"%154 = icmp eq i64 %153, 5",
   "end":"br i1 %154, label %184, label %155",
   "increment":"%183 = add nuw nsw i64 %153, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
   "post_sese":{"begin":"%185 = add nuw nsw i64 %145, 1",
                "end":"br label %144",
                "precursor":"br i1 %154, label %184, label %155",
                "successor":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
   "pre_sese":{"begin":"%148 = add i64 %141, %145",
               "end":"br label %152",
               "precursor":"br i1 %146, label %186, label %147",
               "successor":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"},
   "precursor":"br label %152",
   "successor":"%185 = add nuw nsw i64 %145, 1"}],
 "precursor":"br i1 %139, label %188, label %140",
 "reads":
 [{"address":"%157 = getelementptr double, double* %9, i64 %156",
   "base_pointer":"%9 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %4, i64 0, i64 0, i64 0, i64 0",
   "index":
   [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
     "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
    {"input":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
     "value":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
    {"input":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
     "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"}],
   "input_index":
   ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
    "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
    "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
   "read":{"address":"%157 = getelementptr double, double* %9, i64 %156",
           "base_pointer":"%9 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %4, i64 0, i64 0, i64 0, i64 0",
           "index_add":
           [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
            {"addend":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
             "input":"%141 = mul i64 %138, 5",
             "value":"%148 = add i64 %141, %145"},
            {"addend":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
             "input":"%149 = mul i64 %148, 5",
             "value":"%156 = add i64 %149, %153"}],
           "input_index":
           ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
            "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
           "offset_add":{"input":"%156 = add i64 %149, %153",
                         "value":"%156 = add i64 %149, %153"},
           "output_index":"%156 = add i64 %149, %153",
           "stride_mul":
           [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "multiplier":"i64 5",
             "value":"%141 = mul i64 %138, 5"},
            {"input":"%148 = add i64 %141, %145",
             "multiplier":"i64 5",
             "value":"%149 = mul i64 %148, 5"},
            {"input":"%156 = add i64 %149, %153",
             "value":"%156 = add i64 %149, %153"}]}},
  {"address":"%160 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g4m1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
   "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g4m1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
     "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
    {"input":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
     "value":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
    {"input":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
     "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"}],
   "input_index":
   ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
    "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
    "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
   "read":{"address":"%160 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g4m1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
           "base_index":"%136 = mul i64 %135, 5",
           "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g4m1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%136 = mul i64 %135, 5",
             "input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "value":"%142 = add i64 %136, %138"},
            {"addend":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
             "input":"%143 = mul i64 %142, 5",
             "value":"%150 = add i64 %143, %145"},
            {"addend":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
             "input":"%151 = mul i64 %150, 5",
             "value":"%159 = add i64 %151, %153"}],
           "input_index":
           ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
            "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
           "offset_add":{"input":"%159 = add i64 %151, %153",
                         "value":"%159 = add i64 %151, %153"},
           "output_index":"%159 = add i64 %151, %153",
           "stride_mul":
           [{"input":"%142 = add i64 %136, %138",
             "multiplier":"i64 5",
             "value":"%143 = mul i64 %142, 5"},
            {"input":"%150 = add i64 %143, %145",
             "multiplier":"i64 5",
             "value":"%151 = mul i64 %150, 5"},
            {"input":"%159 = add i64 %151, %153",
             "value":"%159 = add i64 %151, %153"}]}},
  {"address":"%163 = getelementptr double, double* %51, i64 %156",
   "base_pointer":"%51 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %5, i64 0, i64 0, i64 0, i64 0",
   "index":
   [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
     "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
    {"input":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
     "value":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
    {"input":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
     "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"}],
   "input_index":
   ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
    "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
    "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
   "read":{"address":"%163 = getelementptr double, double* %51, i64 %156",
           "base_pointer":"%51 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %5, i64 0, i64 0, i64 0, i64 0",
           "index_add":
           [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
            {"addend":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
             "input":"%141 = mul i64 %138, 5",
             "value":"%148 = add i64 %141, %145"},
            {"addend":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
             "input":"%149 = mul i64 %148, 5",
             "value":"%156 = add i64 %149, %153"}],
           "input_index":
           ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
            "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
           "offset_add":{"input":"%156 = add i64 %149, %153",
                         "value":"%156 = add i64 %149, %153"},
           "output_index":"%156 = add i64 %149, %153",
           "stride_mul":
           [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "multiplier":"i64 5",
             "value":"%141 = mul i64 %138, 5"},
            {"input":"%148 = add i64 %141, %145",
             "multiplier":"i64 5",
             "value":"%149 = mul i64 %148, 5"},
            {"input":"%156 = add i64 %149, %153",
             "value":"%156 = add i64 %149, %153"}]}},
  {"address":"%165 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g5m1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
   "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g5m1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
     "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
    {"input":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
     "value":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
    {"input":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
     "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"}],
   "input_index":
   ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
    "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
    "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
   "read":{"address":"%165 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g5m1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
           "base_index":"%136 = mul i64 %135, 5",
           "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g5m1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%136 = mul i64 %135, 5",
             "input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "value":"%142 = add i64 %136, %138"},
            {"addend":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
             "input":"%143 = mul i64 %142, 5",
             "value":"%150 = add i64 %143, %145"},
            {"addend":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
             "input":"%151 = mul i64 %150, 5",
             "value":"%159 = add i64 %151, %153"}],
           "input_index":
           ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
            "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
           "offset_add":{"input":"%159 = add i64 %151, %153",
                         "value":"%159 = add i64 %151, %153"},
           "output_index":"%159 = add i64 %151, %153",
           "stride_mul":
           [{"input":"%142 = add i64 %136, %138",
             "multiplier":"i64 5",
             "value":"%143 = mul i64 %142, 5"},
            {"input":"%150 = add i64 %143, %145",
             "multiplier":"i64 5",
             "value":"%151 = mul i64 %150, 5"},
            {"input":"%159 = add i64 %151, %153",
             "value":"%159 = add i64 %151, %153"}]}},
  {"address":"%169 = getelementptr double, double* %93, i64 %156",
   "base_pointer":"%93 = getelementptr [5 x [5 x double]], [5 x [5 x double]]* %0, i64 0, i64 0, i64 0",
   "index":
   [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
     "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
    {"input":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
     "value":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
    {"input":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
     "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"}],
   "input_index":
   ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
    "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
    "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
   "read":{"address":"%169 = getelementptr double, double* %93, i64 %156",
           "base_pointer":"%93 = getelementptr [5 x [5 x double]], [5 x [5 x double]]* %0, i64 0, i64 0, i64 0",
           "index_add":
           [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
            {"addend":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
             "input":"%141 = mul i64 %138, 5",
             "value":"%148 = add i64 %141, %145"},
            {"addend":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
             "input":"%149 = mul i64 %148, 5",
             "value":"%156 = add i64 %149, %153"}],
           "input_index":
           ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
            "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
           "offset_add":{"input":"%156 = add i64 %149, %153",
                         "value":"%156 = add i64 %149, %153"},
           "output_index":"%156 = add i64 %149, %153",
           "stride_mul":
           [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "multiplier":"i64 5",
             "value":"%141 = mul i64 %138, 5"},
            {"input":"%148 = add i64 %141, %145",
             "multiplier":"i64 5",
             "value":"%149 = mul i64 %148, 5"},
            {"input":"%156 = add i64 %149, %153",
             "value":"%156 = add i64 %149, %153"}]}},
  {"address":"%171 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g6m1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
   "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g6m1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
     "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
    {"input":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
     "value":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
    {"input":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
     "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"}],
   "input_index":
   ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
    "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
    "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
   "read":{"address":"%171 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g6m1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
           "base_index":"%136 = mul i64 %135, 5",
           "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @g6m1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%136 = mul i64 %135, 5",
             "input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "value":"%142 = add i64 %136, %138"},
            {"addend":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
             "input":"%143 = mul i64 %142, 5",
             "value":"%150 = add i64 %143, %145"},
            {"addend":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
             "input":"%151 = mul i64 %150, 5",
             "value":"%159 = add i64 %151, %153"}],
           "input_index":
           ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
            "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
           "offset_add":{"input":"%159 = add i64 %151, %153",
                         "value":"%159 = add i64 %151, %153"},
           "output_index":"%159 = add i64 %151, %153",
           "stride_mul":
           [{"input":"%142 = add i64 %136, %138",
             "multiplier":"i64 5",
             "value":"%143 = mul i64 %142, 5"},
            {"input":"%150 = add i64 %143, %145",
             "multiplier":"i64 5",
             "value":"%151 = mul i64 %150, 5"},
            {"input":"%159 = add i64 %151, %153",
             "value":"%159 = add i64 %151, %153"}]}},
  {"address":"%176 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
   "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
     "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
    {"input":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
     "value":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
    {"input":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
     "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"}],
   "input_index":
   ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
    "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
    "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
   "read":{"address":"%176 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %159",
           "base_index":"%136 = mul i64 %135, 5",
           "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%136 = mul i64 %135, 5",
             "input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "value":"%142 = add i64 %136, %138"},
            {"addend":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
             "input":"%143 = mul i64 %142, 5",
             "value":"%150 = add i64 %143, %145"},
            {"addend":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
             "input":"%151 = mul i64 %150, 5",
             "value":"%159 = add i64 %151, %153"}],
           "input_index":
           ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
            "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
           "offset_add":{"input":"%159 = add i64 %151, %153",
                         "value":"%159 = add i64 %151, %153"},
           "output_index":"%159 = add i64 %151, %153",
           "stride_mul":
           [{"input":"%142 = add i64 %136, %138",
             "multiplier":"i64 5",
             "value":"%143 = mul i64 %142, 5"},
            {"input":"%150 = add i64 %143, %145",
             "multiplier":"i64 5",
             "value":"%151 = mul i64 %150, 5"},
            {"input":"%159 = add i64 %151, %153",
             "value":"%159 = add i64 %151, %153"}]}},
  {"address":"%179 = getelementptr double, double* %10, i64 %156",
   "base_pointer":"%10 = getelementptr [5 x [5 x double]], [5 x [5 x double]]* %1, i64 0, i64 0, i64 0",
   "index":
   [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
     "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
    {"input":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
     "value":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]"},
    {"input":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
     "value":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"}],
   "input_index":
   ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
    "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
    "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
   "read":{"address":"%179 = getelementptr double, double* %10, i64 %156",
           "base_pointer":"%10 = getelementptr [5 x [5 x double]], [5 x [5 x double]]* %1, i64 0, i64 0, i64 0",
           "index_add":
           [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
            {"addend":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
             "input":"%141 = mul i64 %138, 5",
             "value":"%148 = add i64 %141, %145"},
            {"addend":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
             "input":"%149 = mul i64 %148, 5",
             "value":"%156 = add i64 %149, %153"}],
           "input_index":
           ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
            "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
           "offset_add":{"input":"%156 = add i64 %149, %153",
                         "value":"%156 = add i64 %149, %153"},
           "output_index":"%156 = add i64 %149, %153",
           "stride_mul":
           [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
             "multiplier":"i64 5",
             "value":"%141 = mul i64 %138, 5"},
            {"input":"%148 = add i64 %141, %145",
             "multiplier":"i64 5",
             "value":"%149 = mul i64 %148, 5"},
            {"input":"%156 = add i64 %149, %153",
             "value":"%156 = add i64 %149, %153"}]}}],
 "successor":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
 "write":{"address":"%169 = getelementptr double, double* %93, i64 %156",
          "base_pointer":"%93 = getelementptr [5 x [5 x double]], [5 x [5 x double]]* %0, i64 0, i64 0, i64 0",
          "index_add":
          [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "value":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]"},
           {"addend":"%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
            "input":"%141 = mul i64 %138, 5",
            "value":"%148 = add i64 %141, %145"},
           {"addend":"%153 = phi i64 [ %183, %155 ], [ 0, %147 ]",
            "input":"%149 = mul i64 %148, 5",
            "value":"%156 = add i64 %149, %153"}],
          "input_index":
          ["%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
           "%145 = phi i64 [ %185, %184 ], [ 0, %140 ]",
           "%153 = phi i64 [ %183, %155 ], [ 0, %147 ]"],
          "offset_add":{"input":"%156 = add i64 %149, %153",
                        "value":"%156 = add i64 %149, %153"},
          "output_index":"%156 = add i64 %149, %153",
          "store":"store double %182, double* %169, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%138 = phi i64 [ %187, %186 ], [ 0, %134 ]",
            "multiplier":"i64 5",
            "value":"%141 = mul i64 %138, 5"},
           {"input":"%148 = add i64 %141, %145",
            "multiplier":"i64 5",
            "value":"%149 = mul i64 %148, 5"},
           {"input":"%156 = add i64 %149, %153",
            "value":"%156 = add i64 %149, %153"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

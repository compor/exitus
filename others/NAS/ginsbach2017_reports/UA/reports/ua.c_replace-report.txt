BEGIN FUNCTION TRANSFORMATION main
BEGIN LOOP
BEGIN AXPY
{"begin":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
 "body":{"begin":"%140 = add i64 %135, %137",
         "end":"br label %136",
         "precursor":"br i1 %138, label %147, label %139",
         "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
 "comparison":"%138 = icmp eq i64 %137, 5",
 "dst":{"address":"%141 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}],
        "input_index":
        ["%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"addend":"%135 = mul i64 %134, 5",
                      "input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "store":"store double %145, double* %141, align 8, !tbaa !9",
        "stride_mul":
        [{"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}]},
 "end":"br i1 %138, label %147, label %139",
 "increment":"%146 = add nuw nsw i64 %137, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
 "precursor":"br label %136",
 "src":{"address":"%143 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}],
        "input_index":
        ["%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"addend":"%135 = mul i64 %134, 5",
                      "input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "stride_mul":
        [{"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}],
        "value":"%144 = load double, double* %143, align 8, !tbaa !9"},
 "successor":"%148 = add nuw nsw i64 %131, 1",
 "sum":{"addend":"%144 = load double, double* %143, align 8, !tbaa !9",
        "input":"%142 = load double, double* %141, align 8, !tbaa !9",
        "value":"%145 = fsub double %142, %144"}}
END AXPY
BEGIN AXPY
{"begin":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
 "body":{"begin":"%140 = add i64 %135, %137",
         "end":"br label %136",
         "precursor":"br i1 %138, label %147, label %139",
         "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
 "comparison":"%138 = icmp eq i64 %137, 5",
 "dst":{"address":"%141 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_index":"%135 = mul i64 %134, 5",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%135 = mul i64 %134, 5",
          "input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%140 = add i64 %135, %137"}],
        "input_index":
        ["%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"input":"%140 = add i64 %135, %137",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "store":"store double %145, double* %141, align 8, !tbaa !9",
        "stride_mul":
        [{"input":"%140 = add i64 %135, %137",
          "value":"%140 = add i64 %135, %137"}]},
 "end":"br i1 %138, label %147, label %139",
 "increment":"%146 = add nuw nsw i64 %137, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
 "precursor":"br label %136",
 "src":{"address":"%143 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}],
        "input_index":
        ["%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"addend":"%135 = mul i64 %134, 5",
                      "input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "stride_mul":
        [{"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}],
        "value":"%144 = load double, double* %143, align 8, !tbaa !9"},
 "successor":"%148 = add nuw nsw i64 %131, 1",
 "sum":{"addend":"%144 = load double, double* %143, align 8, !tbaa !9",
        "input":"%142 = load double, double* %141, align 8, !tbaa !9",
        "value":"%145 = fsub double %142, %144"}}
END AXPY
BEGIN AXPY
{"begin":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
 "body":{"begin":"%140 = add i64 %135, %137",
         "end":"br label %136",
         "precursor":"br i1 %138, label %147, label %139",
         "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
 "comparison":"%138 = icmp eq i64 %137, 5",
 "dst":{"address":"%141 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}],
        "input_index":
        ["%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"addend":"%135 = mul i64 %134, 5",
                      "input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "store":"store double %145, double* %141, align 8, !tbaa !9",
        "stride_mul":
        [{"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}]},
 "end":"br i1 %138, label %147, label %139",
 "increment":"%146 = add nuw nsw i64 %137, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
 "precursor":"br label %136",
 "src":{"address":"%143 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_index":"%135 = mul i64 %134, 5",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%135 = mul i64 %134, 5",
          "input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%140 = add i64 %135, %137"}],
        "input_index":
        ["%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"input":"%140 = add i64 %135, %137",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "stride_mul":
        [{"input":"%140 = add i64 %135, %137",
          "value":"%140 = add i64 %135, %137"}],
        "value":"%144 = load double, double* %143, align 8, !tbaa !9"},
 "successor":"%148 = add nuw nsw i64 %131, 1",
 "sum":{"addend":"%144 = load double, double* %143, align 8, !tbaa !9",
        "input":"%142 = load double, double* %141, align 8, !tbaa !9",
        "value":"%145 = fsub double %142, %144"}}
END AXPY
BEGIN AXPY
{"begin":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
 "body":{"begin":"%140 = add i64 %135, %137",
         "end":"br label %136",
         "precursor":"br i1 %138, label %147, label %139",
         "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
 "comparison":"%138 = icmp eq i64 %137, 5",
 "dst":{"address":"%141 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_index":"%135 = mul i64 %134, 5",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%135 = mul i64 %134, 5",
          "input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%140 = add i64 %135, %137"}],
        "input_index":
        ["%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"input":"%140 = add i64 %135, %137",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "store":"store double %145, double* %141, align 8, !tbaa !9",
        "stride_mul":
        [{"input":"%140 = add i64 %135, %137",
          "value":"%140 = add i64 %135, %137"}]},
 "end":"br i1 %138, label %147, label %139",
 "increment":"%146 = add nuw nsw i64 %137, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
 "precursor":"br label %136",
 "src":{"address":"%143 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_index":"%135 = mul i64 %134, 5",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%135 = mul i64 %134, 5",
          "input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "value":"%140 = add i64 %135, %137"}],
        "input_index":
        ["%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"input":"%140 = add i64 %135, %137",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "stride_mul":
        [{"input":"%140 = add i64 %135, %137",
          "value":"%140 = add i64 %135, %137"}],
        "value":"%144 = load double, double* %143, align 8, !tbaa !9"},
 "successor":"%148 = add nuw nsw i64 %131, 1",
 "sum":{"addend":"%144 = load double, double* %143, align 8, !tbaa !9",
        "input":"%142 = load double, double* %141, align 8, !tbaa !9",
        "value":"%145 = fsub double %142, %144"}}
END AXPY
BEGIN AXPYn
{"begin":"%123 = mul i64 %120, 5",
 "body":{"begin":"%140 = add i64 %135, %137",
         "end":"br label %136",
         "precursor":"br i1 %138, label %147, label %139",
         "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
 "dst":{"address":"%141 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
          "value":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]"},
         {"addend":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
          "input":"%123 = mul i64 %120, 5",
          "value":"%128 = add i64 %123, %125"},
         {"addend":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
          "input":"%129 = mul i64 %128, 5",
          "value":"%134 = add i64 %129, %131"},
         {"addend":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "input":"%135 = mul i64 %134, 5",
          "value":"%140 = add i64 %135, %137"}],
        "input":
        ["%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
         "%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
         "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
         "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "input_index":
        ["%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
         "%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
         "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
         "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"input":"%140 = add i64 %135, %137",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "store":"store double %145, double* %141, align 8, !tbaa !9",
        "stride_mul":
        [{"input":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
          "multiplier":"i64 5",
          "value":"%123 = mul i64 %120, 5"},
         {"input":"%128 = add i64 %123, %125",
          "multiplier":"i64 5",
          "value":"%129 = mul i64 %128, 5"},
         {"input":"%134 = add i64 %129, %131",
          "multiplier":"i64 5",
          "value":"%135 = mul i64 %134, 5"},
         {"input":"%140 = add i64 %135, %137",
          "value":"%140 = add i64 %135, %137"}]},
 "end":"br label %119",
 "iterator":
 ["%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
  "%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
  "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
  "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
 "loop":
 [{"begin":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
   "body":{"begin":"%123 = mul i64 %120, 5",
           "end":"br label %119",
           "precursor":"br i1 %121, label %122, label %153",
           "successor":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]"},
   "comparison":"%121 = icmp slt i64 %120, %106",
   "end":"br i1 %121, label %122, label %153",
   "increment":"%152 = add nuw nsw i64 %120, 1",
   "iter_begin":"i64 0",
   "iter_end":"%106 = sext i32 %105 to i64",
   "iter_step":"i64 1",
   "precursor":"br i1 %107, label %108, label %119",
   "successor":"call void @transfb(double* getelementptr inbounds ([92700 x double], [92700 x double]* @rmor, i64 0, i64 0), double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)) #4"},
  {"begin":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
   "body":{"begin":"%128 = add i64 %123, %125",
           "end":"br label %124",
           "precursor":"br i1 %126, label %151, label %127",
           "successor":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]"},
   "comparison":"%126 = icmp eq i64 %125, 5",
   "end":"br i1 %126, label %151, label %127",
   "increment":"%150 = add nuw nsw i64 %125, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
   "post_sese":{"begin":"%152 = add nuw nsw i64 %120, 1",
                "end":"br label %119",
                "precursor":"br i1 %126, label %151, label %127",
                "successor":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]"},
   "pre_sese":{"begin":"%123 = mul i64 %120, 5",
               "end":"br label %124",
               "precursor":"br i1 %121, label %122, label %153",
               "successor":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]"},
   "precursor":"br label %124",
   "successor":"%152 = add nuw nsw i64 %120, 1"},
  {"begin":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
   "body":{"begin":"%134 = add i64 %129, %131",
           "end":"br label %130",
           "precursor":"br i1 %132, label %149, label %133",
           "successor":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]"},
   "comparison":"%132 = icmp eq i64 %131, 5",
   "end":"br i1 %132, label %149, label %133",
   "increment":"%148 = add nuw nsw i64 %131, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
   "post_sese":{"begin":"%150 = add nuw nsw i64 %125, 1",
                "end":"br label %124",
                "precursor":"br i1 %132, label %149, label %133",
                "successor":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]"},
   "pre_sese":{"begin":"%128 = add i64 %123, %125",
               "end":"br label %130",
               "precursor":"br i1 %126, label %151, label %127",
               "successor":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]"},
   "precursor":"br label %130",
   "successor":"%150 = add nuw nsw i64 %125, 1"},
  {"begin":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
   "body":{"begin":"%140 = add i64 %135, %137",
           "end":"br label %136",
           "precursor":"br i1 %138, label %147, label %139",
           "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
   "comparison":"%138 = icmp eq i64 %137, 5",
   "end":"br i1 %138, label %147, label %139",
   "increment":"%146 = add nuw nsw i64 %137, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
   "post_sese":{"begin":"%148 = add nuw nsw i64 %131, 1",
                "end":"br label %130",
                "precursor":"br i1 %138, label %147, label %139",
                "successor":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]"},
   "pre_sese":{"begin":"%134 = add i64 %129, %131",
               "end":"br label %136",
               "precursor":"br i1 %132, label %149, label %133",
               "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
   "precursor":"br label %136",
   "successor":"%148 = add nuw nsw i64 %131, 1"}],
 "precursor":"br i1 %121, label %122, label %153",
 "src":{"address":"%143 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
          "value":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]"},
         {"addend":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
          "input":"%123 = mul i64 %120, 5",
          "value":"%128 = add i64 %123, %125"},
         {"addend":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
          "input":"%129 = mul i64 %128, 5",
          "value":"%134 = add i64 %129, %131"},
         {"addend":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
          "input":"%135 = mul i64 %134, 5",
          "value":"%140 = add i64 %135, %137"}],
        "input":
        ["%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
         "%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
         "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
         "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "input_index":
        ["%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
         "%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
         "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
         "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
        "offset_add":{"input":"%140 = add i64 %135, %137",
                      "value":"%140 = add i64 %135, %137"},
        "output_index":"%140 = add i64 %135, %137",
        "stride_mul":
        [{"input":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
          "multiplier":"i64 5",
          "value":"%123 = mul i64 %120, 5"},
         {"input":"%128 = add i64 %123, %125",
          "multiplier":"i64 5",
          "value":"%129 = mul i64 %128, 5"},
         {"input":"%134 = add i64 %129, %131",
          "multiplier":"i64 5",
          "value":"%135 = mul i64 %134, 5"},
         {"input":"%140 = add i64 %135, %137",
          "value":"%140 = add i64 %135, %137"}],
        "value":"%144 = load double, double* %143, align 8, !tbaa !9"},
 "successor":"%120 = phi i64 [ %152, %151 ], [ 0, %103 ]",
 "sum":{"addend":"%144 = load double, double* %143, align 8, !tbaa !9",
        "input":"%142 = load double, double* %141, align 8, !tbaa !9",
        "value":"%145 = fsub double %142, %144"}}
END AXPYn
BEGIN stencil
{"begin":"%128 = add i64 %123, %125",
 "body":{"begin":"%140 = add i64 %135, %137",
         "end":"br label %136",
         "precursor":"br i1 %138, label %147, label %139",
         "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
 "end":"br label %124",
 "iterator":
 ["%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
  "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
  "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
 "kernel":{"constants":
           [{"use":"%143 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%141 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%142 = load double, double* %141, align 8, !tbaa !9",
            "%144 = load double, double* %143, align 8, !tbaa !9"],
           "origin":
           ["br i1 %138, label %147, label %139"],
           "output":"%145 = fsub double %142, %144",
           "restrictions":
           [{"use":"%140 = add i64 %135, %137",
             "value":"%135 = mul i64 %134, 5"},
            {"use":"%140 = add i64 %135, %137",
             "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
            {"use":"%146 = add nuw nsw i64 %137, 1",
             "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}]},
 "loop":
 [{"begin":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
   "body":{"begin":"%128 = add i64 %123, %125",
           "end":"br label %124",
           "precursor":"br i1 %126, label %151, label %127",
           "successor":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]"},
   "comparison":"%126 = icmp eq i64 %125, 5",
   "end":"br i1 %126, label %151, label %127",
   "increment":"%150 = add nuw nsw i64 %125, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "precursor":"br label %124",
   "successor":"%152 = add nuw nsw i64 %120, 1"},
  {"begin":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
   "body":{"begin":"%134 = add i64 %129, %131",
           "end":"br label %130",
           "precursor":"br i1 %132, label %149, label %133",
           "successor":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]"},
   "comparison":"%132 = icmp eq i64 %131, 5",
   "end":"br i1 %132, label %149, label %133",
   "increment":"%148 = add nuw nsw i64 %131, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
   "post_sese":{"begin":"%150 = add nuw nsw i64 %125, 1",
                "end":"br label %124",
                "precursor":"br i1 %132, label %149, label %133",
                "successor":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]"},
   "pre_sese":{"begin":"%128 = add i64 %123, %125",
               "end":"br label %130",
               "precursor":"br i1 %126, label %151, label %127",
               "successor":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]"},
   "precursor":"br label %130",
   "successor":"%150 = add nuw nsw i64 %125, 1"},
  {"begin":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
   "body":{"begin":"%140 = add i64 %135, %137",
           "end":"br label %136",
           "precursor":"br i1 %138, label %147, label %139",
           "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
   "comparison":"%138 = icmp eq i64 %137, 5",
   "end":"br i1 %138, label %147, label %139",
   "increment":"%146 = add nuw nsw i64 %137, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
   "post_sese":{"begin":"%148 = add nuw nsw i64 %131, 1",
                "end":"br label %130",
                "precursor":"br i1 %138, label %147, label %139",
                "successor":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]"},
   "pre_sese":{"begin":"%134 = add i64 %129, %131",
               "end":"br label %136",
               "precursor":"br i1 %132, label %149, label %133",
               "successor":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"},
   "precursor":"br label %136",
   "successor":"%148 = add nuw nsw i64 %131, 1"}],
 "precursor":"br i1 %126, label %151, label %127",
 "reads":
 [{"address":"%141 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
     "value":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]"},
    {"input":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
     "value":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]"},
    {"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
     "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}],
   "input_index":
   ["%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
    "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
    "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
   "read":{"address":"%141 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
           "base_index":"%123 = mul i64 %120, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%123 = mul i64 %120, 5",
             "input":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
             "value":"%128 = add i64 %123, %125"},
            {"addend":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
             "input":"%129 = mul i64 %128, 5",
             "value":"%134 = add i64 %129, %131"},
            {"addend":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
             "input":"%135 = mul i64 %134, 5",
             "value":"%140 = add i64 %135, %137"}],
           "input_index":
           ["%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
            "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
            "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
           "offset_add":{"input":"%140 = add i64 %135, %137",
                         "value":"%140 = add i64 %135, %137"},
           "output_index":"%140 = add i64 %135, %137",
           "stride_mul":
           [{"input":"%128 = add i64 %123, %125",
             "multiplier":"i64 5",
             "value":"%129 = mul i64 %128, 5"},
            {"input":"%134 = add i64 %129, %131",
             "multiplier":"i64 5",
             "value":"%135 = mul i64 %134, 5"},
            {"input":"%140 = add i64 %135, %137",
             "value":"%140 = add i64 %135, %137"}]}},
  {"address":"%143 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
     "value":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]"},
    {"input":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
     "value":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]"},
    {"input":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
     "value":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"}],
   "input_index":
   ["%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
    "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
    "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
   "read":{"address":"%143 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
           "base_index":"%123 = mul i64 %120, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta2, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%123 = mul i64 %120, 5",
             "input":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
             "value":"%128 = add i64 %123, %125"},
            {"addend":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
             "input":"%129 = mul i64 %128, 5",
             "value":"%134 = add i64 %129, %131"},
            {"addend":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
             "input":"%135 = mul i64 %134, 5",
             "value":"%140 = add i64 %135, %137"}],
           "input_index":
           ["%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
            "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
            "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
           "offset_add":{"input":"%140 = add i64 %135, %137",
                         "value":"%140 = add i64 %135, %137"},
           "output_index":"%140 = add i64 %135, %137",
           "stride_mul":
           [{"input":"%128 = add i64 %123, %125",
             "multiplier":"i64 5",
             "value":"%129 = mul i64 %128, 5"},
            {"input":"%134 = add i64 %129, %131",
             "multiplier":"i64 5",
             "value":"%135 = mul i64 %134, 5"},
            {"input":"%140 = add i64 %135, %137",
             "value":"%140 = add i64 %135, %137"}]}}],
 "successor":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
 "write":{"address":"%141 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %140",
          "base_index":"%123 = mul i64 %120, 5",
          "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%123 = mul i64 %120, 5",
            "input":"%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
            "value":"%128 = add i64 %123, %125"},
           {"addend":"%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
            "input":"%129 = mul i64 %128, 5",
            "value":"%134 = add i64 %129, %131"},
           {"addend":"%137 = phi i64 [ %146, %139 ], [ 0, %133 ]",
            "input":"%135 = mul i64 %134, 5",
            "value":"%140 = add i64 %135, %137"}],
          "input_index":
          ["%125 = phi i64 [ %150, %149 ], [ 0, %122 ]",
           "%131 = phi i64 [ %148, %147 ], [ 0, %127 ]",
           "%137 = phi i64 [ %146, %139 ], [ 0, %133 ]"],
          "offset_add":{"input":"%140 = add i64 %135, %137",
                        "value":"%140 = add i64 %135, %137"},
          "output_index":"%140 = add i64 %135, %137",
          "store":"store double %145, double* %141, align 8, !tbaa !9",
          "stride_mul":
          [{"input":"%128 = add i64 %123, %125",
            "multiplier":"i64 5",
            "value":"%129 = mul i64 %128, 5"},
           {"input":"%134 = add i64 %129, %131",
            "multiplier":"i64 5",
            "value":"%135 = mul i64 %134, 5"},
           {"input":"%140 = add i64 %135, %137",
            "value":"%140 = add i64 %135, %137"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

BEGIN FUNCTION TRANSFORMATION adds2m1
BEGIN LOOP
BEGIN AXPY
{"alpha":"double %2",
 "begin":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
 "body":{"begin":"%10 = getelementptr inbounds double, double* %0, i64 %7",
         "end":"br label %6",
         "precursor":"br i1 %8, label %9, label %17",
         "successor":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]"},
 "comparison":"%8 = icmp slt i64 %7, %5",
 "dst":{"address":"%10 = getelementptr inbounds double, double* %0, i64 %7",
        "base_pointer":"double* %0",
        "index_add":
        [{"input":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
          "value":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]"}],
        "input_index":
        ["%7 = phi i64 [ %16, %9 ], [ 0, %4 ]"],
        "offset_add":{"input":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
                      "value":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]"},
        "output_index":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
        "store":"store double %15, double* %10, align 8, !tbaa !2",
        "stride_mul":
        [{"input":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
          "value":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]"}]},
 "end":"br i1 %8, label %9, label %17",
 "increment":"%16 = add nuw nsw i64 %7, 1",
 "iter_begin":"i64 0",
 "iter_end":"%5 = sext i32 %3 to i64",
 "iter_step":"i64 1",
 "iterator":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
 "precursor":"br label %6",
 "src":{"address":"%12 = getelementptr inbounds double, double* %1, i64 %7",
        "base_pointer":"double* %1",
        "index_add":
        [{"input":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
          "value":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]"}],
        "input_index":
        ["%7 = phi i64 [ %16, %9 ], [ 0, %4 ]"],
        "offset_add":{"input":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
                      "value":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]"},
        "output_index":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
        "stride_mul":
        [{"input":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]",
          "value":"%7 = phi i64 [ %16, %9 ], [ 0, %4 ]"}],
        "value":"%13 = load double, double* %12, align 8, !tbaa !2"},
 "successor":"ret void",
 "sum":{"addend":"%14 = fmul double %13, %2",
        "input":"%11 = load double, double* %10, align 8, !tbaa !2",
        "value":"%15 = fadd double %11, %14"}}
END AXPY
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION add2
BEGIN LOOP
BEGIN AXPY
{"begin":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
 "body":{"begin":"%9 = getelementptr inbounds double, double* %0, i64 %6",
         "end":"br label %5",
         "precursor":"br i1 %7, label %8, label %15",
         "successor":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]"},
 "comparison":"%7 = icmp slt i64 %6, %4",
 "dst":{"address":"%9 = getelementptr inbounds double, double* %0, i64 %6",
        "base_pointer":"double* %0",
        "index_add":
        [{"input":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
          "value":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]"}],
        "input_index":
        ["%6 = phi i64 [ %14, %8 ], [ 0, %3 ]"],
        "offset_add":{"input":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
                      "value":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]"},
        "output_index":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
        "store":"store double %13, double* %9, align 8, !tbaa !2",
        "stride_mul":
        [{"input":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
          "value":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]"}]},
 "end":"br i1 %7, label %8, label %15",
 "increment":"%14 = add nuw nsw i64 %6, 1",
 "iter_begin":"i64 0",
 "iter_end":"%4 = sext i32 %2 to i64",
 "iter_step":"i64 1",
 "iterator":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
 "precursor":"br label %5",
 "src":{"address":"%11 = getelementptr inbounds double, double* %1, i64 %6",
        "base_pointer":"double* %1",
        "index_add":
        [{"input":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
          "value":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]"}],
        "input_index":
        ["%6 = phi i64 [ %14, %8 ], [ 0, %3 ]"],
        "offset_add":{"input":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
                      "value":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]"},
        "output_index":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
        "stride_mul":
        [{"input":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]",
          "value":"%6 = phi i64 [ %14, %8 ], [ 0, %3 ]"}],
        "value":"%12 = load double, double* %11, align 8, !tbaa !2"},
 "successor":"ret void",
 "sum":{"addend":"%12 = load double, double* %11, align 8, !tbaa !2",
        "input":"%10 = load double, double* %9, align 8, !tbaa !2",
        "value":"%13 = fadd double %10, %12"}}
END AXPY
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION calc_norm
BEGIN LOOP
BEGIN scalar
{"begin":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
 "body":{"begin":"%39 = add i64 %29, %35",
         "end":"br label %34",
         "precursor":"br i1 %37, label %52, label %38",
         "successor":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"},
 "comparison":"%37 = icmp eq i64 %35, 5",
 "end":"br i1 %37, label %52, label %38",
 "increment":"%51 = add nuw nsw i64 %35, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
 "kernel":{"constants":
           [{"use":"%40 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* @w3m1, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* @w3m1, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%47 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @jacm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
             "value":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @jacm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%39 = add i64 %29, %35",
             "value":"%29 = mul i64 %28, 5"},
            {"use":"%42 = add i64 %31, %35",
             "value":"%31 = mul i64 %30, 5"},
            {"use":"%46 = add i64 %33, %35",
             "value":"%33 = mul i64 %32, 5"}],
           "input":
           ["%41 = load double, double* %40, align 8, !tbaa !2",
            "%41 = load double, double* %40, align 8, !tbaa !2",
            "%44 = load double, double* %43, align 8, !tbaa !2",
            "%44 = load double, double* %43, align 8, !tbaa !2",
            "%48 = load double, double* %47, align 8, !tbaa !2",
            "%48 = load double, double* %47, align 8, !tbaa !2",
            "%36 = phi double [ %50, %38 ], [ %25, %27 ]"],
           "origin":
           ["br i1 %37, label %52, label %38"],
           "output":"%50 = fadd double %36, %49",
           "restrictions":
           [{"use":"%39 = add i64 %29, %35",
             "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"},
            {"use":"%42 = add i64 %31, %35",
             "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"},
            {"use":"%46 = add i64 %33, %35",
             "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"},
            {"use":"%51 = add nuw nsw i64 %35, 1",
             "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"},
            {"use":"%50 = fadd double %36, %49",
             "value":"%36 = phi double [ %50, %38 ], [ %25, %27 ]"}]},
 "old_value":"%36 = phi double [ %50, %38 ], [ %25, %27 ]",
 "precursor":"br label %34",
 "read":
 [{"address":"%40 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
     "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"}],
   "input_index":
   ["%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"],
   "offset_add":{"addend":"%29 = mul i64 %28, 5",
                 "input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
                 "value":"%39 = add i64 %29, %35"},
   "output_index":"%39 = add i64 %29, %35",
   "stride_mul":
   [{"input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
     "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"}]},
  {"address":"%40 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
   "base_index":"%29 = mul i64 %28, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%29 = mul i64 %28, 5",
     "input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
     "value":"%39 = add i64 %29, %35"}],
   "input_index":
   ["%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"],
   "offset_add":{"input":"%39 = add i64 %29, %35",
                 "value":"%39 = add i64 %29, %35"},
   "output_index":"%39 = add i64 %29, %35",
   "stride_mul":
   [{"input":"%39 = add i64 %29, %35",
     "value":"%39 = add i64 %29, %35"}]},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* @w3m1, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* @w3m1, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
     "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"}],
   "input_index":
   ["%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"],
   "offset_add":{"addend":"%31 = mul i64 %30, 5",
                 "input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
                 "value":"%42 = add i64 %31, %35"},
   "output_index":"%42 = add i64 %31, %35",
   "stride_mul":
   [{"input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
     "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"}]},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* @w3m1, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_index":"%31 = mul i64 %30, 5",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* @w3m1, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%31 = mul i64 %30, 5",
     "input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
     "value":"%42 = add i64 %31, %35"}],
   "input_index":
   ["%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"],
   "offset_add":{"input":"%42 = add i64 %31, %35",
                 "value":"%42 = add i64 %31, %35"},
   "output_index":"%42 = add i64 %31, %35",
   "stride_mul":
   [{"input":"%42 = add i64 %31, %35",
     "value":"%42 = add i64 %31, %35"}]},
  {"address":"%47 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @jacm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
   "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @jacm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
     "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"}],
   "input_index":
   ["%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"],
   "offset_add":{"addend":"%33 = mul i64 %32, 5",
                 "input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
                 "value":"%46 = add i64 %33, %35"},
   "output_index":"%46 = add i64 %33, %35",
   "stride_mul":
   [{"input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
     "value":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"}]},
  {"address":"%47 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @jacm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
   "base_index":"%33 = mul i64 %32, 5",
   "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @jacm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%33 = mul i64 %32, 5",
     "input":"%35 = phi i64 [ %51, %38 ], [ 0, %27 ]",
     "value":"%46 = add i64 %33, %35"}],
   "input_index":
   ["%35 = phi i64 [ %51, %38 ], [ 0, %27 ]"],
   "offset_add":{"input":"%46 = add i64 %33, %35",
                 "value":"%46 = add i64 %33, %35"},
   "output_index":"%46 = add i64 %33, %35",
   "stride_mul":
   [{"input":"%46 = add i64 %33, %35",
     "value":"%46 = add i64 %33, %35"}]}],
 "read_value":
 ["%41 = load double, double* %40, align 8, !tbaa !2",
  "%41 = load double, double* %40, align 8, !tbaa !2",
  "%44 = load double, double* %43, align 8, !tbaa !2",
  "%44 = load double, double* %43, align 8, !tbaa !2",
  "%48 = load double, double* %47, align 8, !tbaa !2",
  "%48 = load double, double* %47, align 8, !tbaa !2"],
 "successor":"%53 = add nuw nsw i64 %24, 1"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2, double in3)
{
  in0->_0 += in1*in2*in3;
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION parallel_add
BEGIN LOOP
BEGIN scalar
{"begin":"%11 = phi i32 [ %15, %71 ], [ 1, %4 ]",
 "body":{"begin":"%15 = shl nsw i32 %11, 1",
         "end":"br label %10",
         "precursor":"br i1 %13, label %73, label %14",
         "successor":"%11 = phi i32 [ %15, %71 ], [ 1, %4 ]"},
 "comparison":"%13 = icmp sgt i32 %12, %5",
 "end":"br i1 %13, label %73, label %14",
 "increment":"%72 = add nuw nsw i32 %12, 1",
 "iter_begin":"i32 0",
 "iter_end":"%5 = phi i32 [ %8, %4 ], [ 0, %1 ]",
 "iter_step":"i32 1",
 "iterator":"%12 = phi i32 [ %72, %71 ], [ 0, %4 ]",
 "kernel":{"constants":
           [{"use":"%22 = load i32, i32* @nelt, align 4, !tbaa !6",
             "value":"@nelt = external local_unnamed_addr global i32, align 4"},
            {"use":"%29 = getelementptr inbounds i32, i32* %0, i64 %28",
             "value":"i32* %0"},
            {"use":"%41 = getelementptr inbounds i32, i32* %0, i64 %40",
             "value":"i32* %0"},
            {"use":"%55 = getelementptr inbounds i32, i32* %0, i64 %54",
             "value":"i32* %0"},
            {"use":"%68 = getelementptr inbounds i32, i32* %0, i64 %67",
             "value":"i32* %0"}],
           "input":
           ["%11 = phi i32 [ %15, %71 ], [ 1, %4 ]"],
           "origin":
           ["br i1 %13, label %73, label %14"],
           "output":"%15 = shl nsw i32 %11, 1",
           "restrictions":
           [{"use":"%15 = shl nsw i32 %11, 1",
             "value":"%11 = phi i32 [ %15, %71 ], [ 1, %4 ]"},
            {"use":"%16 = xor i32 %11, -1",
             "value":"%11 = phi i32 [ %15, %71 ], [ 1, %4 ]"},
            {"use":"%17 = sext i32 %11 to i64",
             "value":"%11 = phi i32 [ %15, %71 ], [ 1, %4 ]"},
            {"use":"%51 = icmp slt i32 %50, %11",
             "value":"%11 = phi i32 [ %15, %71 ], [ 1, %4 ]"},
            {"use":"%72 = add nuw nsw i32 %12, 1",
             "value":"%12 = phi i32 [ %72, %71 ], [ 0, %4 ]"}]},
 "old_value":"%11 = phi i32 [ %15, %71 ], [ 1, %4 ]",
 "precursor":"br i1 %9, label %4, label %10",
 "successor":"ret void"}
END scalar
BEGIN OPERATOR
void op(struct { int _0; }* in0)
{
  long t2;
  long t3;
  int t4 = in0->_0;
  int t5 = ;
  long t6 = (long)t4;
  long t7 = (long)t5;
  in0->_0 = t5;
  long t0 = t7;
  int t1 = t5;
label1:
  int t8 = nelt;
  if(t0>(long)t8) goto label6;
  t2 = t6;
label3:
  if(t2>0){
  t2 += -1;
  goto label3;
  }
  t0 += t7;
  t1 = (int)t0;
  goto label1;
label6:
  int t9 = (t1>t8?0:t5)+t1-t8;
  if(t9>=t4) goto label10;
  t3 = t6;
label8:
  if(t3>(long)t9){
  t3 += -1;
  goto label8;
  }
label10:
}
END LOOP
END FUNCTION TRANSFORMATION
BEGIN FUNCTION TRANSFORMATION facev
BEGIN LOOP
BEGIN stencil
{"begin":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]",
 "body":{"begin":"%27 = mul i64 %24, 5",
         "end":"br label %23",
         "precursor":"br i1 %25, label %26, label %33",
         "successor":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]"},
 "end":"br label %17",
 "iterator":
 ["%18 = phi i64 [ %36, %35 ], [ %14, %3 ]",
  "%21 = phi i64 [ %34, %33 ], [ %12, %17 ]",
  "%24 = phi i64 [ %32, %26 ], [ %10, %20 ]"],
 "kernel":{"constants":
           [{"use":"store double %2, double* %31, align 8, !tbaa !2",
             "value":"double %2"},
            {"use":"%31 = getelementptr double, double* %16, i64 %30",
             "value":"%16 = getelementptr [5 x [5 x double]], [5 x [5 x double]]* %0, i64 0, i64 0, i64 0"},
            {"use":"%30 = add i64 %29, %18",
             "value":"%18 = phi i64 [ %36, %35 ], [ %14, %3 ]"}],
           "origin":
           ["br i1 %25, label %26, label %33"],
           "output":"double %2",
           "restrictions":
           [{"use":"%28 = add i64 %27, %21",
             "value":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]"},
            {"use":"%27 = mul i64 %24, 5",
             "value":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]"},
            {"use":"%32 = add nuw nsw i64 %24, 1",
             "value":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]"}]},
 "loop":
 [{"begin":"%18 = phi i64 [ %36, %35 ], [ %14, %3 ]",
   "body":{"begin":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]",
           "end":"br label %17",
           "precursor":"br i1 %19, label %20, label %37",
           "successor":"%18 = phi i64 [ %36, %35 ], [ %14, %3 ]"},
   "comparison":"%19 = icmp slt i64 %18, %15",
   "end":"br i1 %19, label %20, label %37",
   "increment":"%36 = add nuw nsw i64 %18, 1",
   "iter_begin":"%14 = select i1 %4, i64 4, i64 0",
   "iter_end":"%15 = select i1 %5, i64 1, i64 5",
   "iter_step":"i64 1",
   "precursor":"br label %17",
   "successor":"ret void"},
  {"begin":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]",
   "body":{"begin":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]",
           "end":"br label %20",
           "precursor":"br i1 %22, label %23, label %35",
           "successor":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]"},
   "comparison":"%22 = icmp slt i64 %21, %13",
   "end":"br i1 %22, label %23, label %35",
   "increment":"%34 = add nuw nsw i64 %21, 1",
   "iter_begin":"%12 = select i1 %6, i64 4, i64 0",
   "iter_end":"%13 = select i1 %7, i64 1, i64 5",
   "iter_step":"i64 1",
   "iterator":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]",
   "post_sese":{"begin":"%36 = add nuw nsw i64 %18, 1",
                "end":"br label %17",
                "precursor":"br i1 %22, label %23, label %35",
                "successor":"%18 = phi i64 [ %36, %35 ], [ %14, %3 ]"},
   "pre_sese":{"begin":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]",
               "end":"br i1 %19, label %20, label %37",
               "precursor":"br i1 %19, label %20, label %37",
               "successor":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]"},
   "precursor":"br i1 %19, label %20, label %37",
   "successor":"%36 = add nuw nsw i64 %18, 1"},
  {"begin":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]",
   "body":{"begin":"%27 = mul i64 %24, 5",
           "end":"br label %23",
           "precursor":"br i1 %25, label %26, label %33",
           "successor":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]"},
   "comparison":"%25 = icmp slt i64 %24, %11",
   "end":"br i1 %25, label %26, label %33",
   "increment":"%32 = add nuw nsw i64 %24, 1",
   "iter_begin":"%10 = select i1 %8, i64 4, i64 0",
   "iter_end":"%11 = select i1 %9, i64 1, i64 5",
   "iter_step":"i64 1",
   "iterator":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]",
   "post_sese":{"begin":"%34 = add nuw nsw i64 %21, 1",
                "end":"br label %20",
                "precursor":"br i1 %25, label %26, label %33",
                "successor":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]"},
   "pre_sese":{"begin":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]",
               "end":"br i1 %22, label %23, label %35",
               "precursor":"br i1 %22, label %23, label %35",
               "successor":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]"},
   "precursor":"br i1 %22, label %23, label %35",
   "successor":"%34 = add nuw nsw i64 %21, 1"}],
 "precursor":"br i1 %19, label %20, label %37",
 "successor":"%18 = phi i64 [ %36, %35 ], [ %14, %3 ]",
 "write":{"address":"%31 = getelementptr double, double* %16, i64 %30",
          "base_pointer":"%16 = getelementptr [5 x [5 x double]], [5 x [5 x double]]* %0, i64 0, i64 0, i64 0",
          "index_add":
          [{"input":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]",
            "value":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]"},
           {"addend":"%21 = phi i64 [ %34, %33 ], [ %12, %17 ]",
            "input":"%27 = mul i64 %24, 5",
            "value":"%28 = add i64 %27, %21"},
           {"addend":"%18 = phi i64 [ %36, %35 ], [ %14, %3 ]",
            "input":"%29 = mul i64 %28, 5",
            "value":"%30 = add i64 %29, %18"}],
          "input_index":
          ["%24 = phi i64 [ %32, %26 ], [ %10, %20 ]",
           "%21 = phi i64 [ %34, %33 ], [ %12, %17 ]",
           "%18 = phi i64 [ %36, %35 ], [ %14, %3 ]"],
          "offset_add":{"input":"%30 = add i64 %29, %18",
                        "value":"%30 = add i64 %29, %18"},
          "output_index":"%30 = add i64 %29, %18",
          "store":"store double %2, double* %31, align 8, !tbaa !2",
          "stride_mul":
          [{"input":"%24 = phi i64 [ %32, %26 ], [ %10, %20 ]",
            "multiplier":"i64 5",
            "value":"%27 = mul i64 %24, 5"},
           {"input":"%28 = add i64 %27, %21",
            "multiplier":"i64 5",
            "value":"%29 = mul i64 %28, 5"},
           {"input":"%30 = add i64 %29, %18",
            "value":"%30 = add i64 %29, %18"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

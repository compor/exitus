BEGIN FUNCTION TRANSFORMATION convect
BEGIN LOOP
BEGIN scalar
{"begin":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "body":{"begin":"%198 = mul i64 %194, 5",
         "end":"br label %193",
         "precursor":"br i1 %196, label %208, label %197",
         "successor":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"},
 "comparison":"%196 = icmp eq i64 %194, 5",
 "end":"br i1 %196, label %208, label %197",
 "increment":"%207 = add nuw nsw i64 %194, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "kernel":{"constants":
           [{"use":"%200 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %199",
             "value":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)"},
            {"use":"%203 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %202",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%202 = add i64 %164, %194",
             "value":"%164 = mul i64 %163, 5"},
            {"use":"%199 = add i64 %198, %170",
             "value":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]"}],
           "input":
           ["%201 = load double, double* %200, align 8, !tbaa !5",
            "%204 = load double, double* %203, align 8, !tbaa !5",
            "%204 = load double, double* %203, align 8, !tbaa !5",
            "%195 = phi double [ %206, %197 ], [ 0.000000e+00, %191 ]"],
           "origin":
           ["br i1 %196, label %208, label %197"],
           "output":"%206 = fadd double %195, %205",
           "restrictions":
           [{"use":"%198 = mul i64 %194, 5",
             "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"},
            {"use":"%202 = add i64 %164, %194",
             "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"},
            {"use":"%207 = add nuw nsw i64 %194, 1",
             "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"},
            {"use":"%206 = fadd double %195, %205",
             "value":"%195 = phi double [ %206, %197 ], [ 0.000000e+00, %191 ]"}]},
 "old_value":"%195 = phi double [ %206, %197 ], [ 0.000000e+00, %191 ]",
 "precursor":"br label %193",
 "read":
 [{"address":"%200 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %199",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
     "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
   "input_index":
   ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
   "offset_add":{"addend":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]",
                 "input":"%198 = mul i64 %194, 5",
                 "value":"%199 = add i64 %198, %170"},
   "output_index":"%199 = add i64 %198, %170",
   "stride_mul":
   [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
     "multiplier":"i64 5",
     "value":"%198 = mul i64 %194, 5"}]},
  {"address":"%203 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %202",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
     "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
   "input_index":
   ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
   "offset_add":{"addend":"%164 = mul i64 %163, 5",
                 "input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
                 "value":"%202 = add i64 %164, %194"},
   "output_index":"%202 = add i64 %164, %194",
   "stride_mul":
   [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
     "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}]},
  {"address":"%203 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %202",
   "base_index":"%164 = mul i64 %163, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%164 = mul i64 %163, 5",
     "input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
     "value":"%202 = add i64 %164, %194"}],
   "input_index":
   ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
   "offset_add":{"input":"%202 = add i64 %164, %194",
                 "value":"%202 = add i64 %164, %194"},
   "output_index":"%202 = add i64 %164, %194",
   "stride_mul":
   [{"input":"%202 = add i64 %164, %194",
     "value":"%202 = add i64 %164, %194"}]}],
 "read_value":
 ["%201 = load double, double* %200, align 8, !tbaa !5",
  "%204 = load double, double* %203, align 8, !tbaa !5",
  "%204 = load double, double* %203, align 8, !tbaa !5"],
 "successor":"%209 = add i64 %166, %170"}
END scalar
BEGIN DOT
{"begin":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "body":{"begin":"%198 = mul i64 %194, 5",
         "end":"br label %193",
         "precursor":"br i1 %196, label %208, label %197",
         "successor":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"},
 "comparison":"%196 = icmp eq i64 %194, 5",
 "dotvalue":"%205 = fmul double %201, %204",
 "end":"br i1 %196, label %208, label %197",
 "increment":"%207 = add nuw nsw i64 %194, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "new_ind":"%206 = fadd double %195, %205",
 "old_ind":"%195 = phi double [ %206, %197 ], [ 0.000000e+00, %191 ]",
 "precursor":"br label %193",
 "src1":{"address":"%200 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %199",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
         "input_index":
         ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
         "offset_add":{"addend":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]",
                       "input":"%198 = mul i64 %194, 5",
                       "value":"%199 = add i64 %198, %170"},
         "output_index":"%199 = add i64 %198, %170",
         "stride_mul":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "multiplier":"i64 5",
           "value":"%198 = mul i64 %194, 5"}],
         "value":"%201 = load double, double* %200, align 8, !tbaa !5"},
 "src2":{"address":"%203 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %202",
         "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
         "input_index":
         ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
         "offset_add":{"addend":"%164 = mul i64 %163, 5",
                       "input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
                       "value":"%202 = add i64 %164, %194"},
         "output_index":"%202 = add i64 %164, %194",
         "stride_mul":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
         "value":"%204 = load double, double* %203, align 8, !tbaa !5"},
 "successor":"%209 = add i64 %166, %170"}
END DOT
BEGIN DOT
{"begin":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "body":{"begin":"%198 = mul i64 %194, 5",
         "end":"br label %193",
         "precursor":"br i1 %196, label %208, label %197",
         "successor":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"},
 "comparison":"%196 = icmp eq i64 %194, 5",
 "dotvalue":"%205 = fmul double %201, %204",
 "end":"br i1 %196, label %208, label %197",
 "increment":"%207 = add nuw nsw i64 %194, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "new_ind":"%206 = fadd double %195, %205",
 "old_ind":"%195 = phi double [ %206, %197 ], [ 0.000000e+00, %191 ]",
 "precursor":"br label %193",
 "src1":{"address":"%200 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %199",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
         "input_index":
         ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
         "offset_add":{"addend":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]",
                       "input":"%198 = mul i64 %194, 5",
                       "value":"%199 = add i64 %198, %170"},
         "output_index":"%199 = add i64 %198, %170",
         "stride_mul":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "multiplier":"i64 5",
           "value":"%198 = mul i64 %194, 5"}],
         "value":"%201 = load double, double* %200, align 8, !tbaa !5"},
 "src2":{"address":"%203 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %202",
         "base_index":"%164 = mul i64 %163, 5",
         "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
         "index_add":
         [{"addend":"%164 = mul i64 %163, 5",
           "input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%202 = add i64 %164, %194"}],
         "input_index":
         ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
         "offset_add":{"input":"%202 = add i64 %164, %194",
                       "value":"%202 = add i64 %164, %194"},
         "output_index":"%202 = add i64 %164, %194",
         "stride_mul":
         [{"input":"%202 = add i64 %164, %194",
           "value":"%202 = add i64 %164, %194"}],
         "value":"%204 = load double, double* %203, align 8, !tbaa !5"},
 "successor":"%209 = add i64 %166, %170"}
END DOT
BEGIN DOT
{"begin":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "body":{"begin":"%198 = mul i64 %194, 5",
         "end":"br label %193",
         "precursor":"br i1 %196, label %208, label %197",
         "successor":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"},
 "comparison":"%196 = icmp eq i64 %194, 5",
 "dotvalue":"%205 = fmul double %201, %204",
 "end":"br i1 %196, label %208, label %197",
 "increment":"%207 = add nuw nsw i64 %194, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "new_ind":"%206 = fadd double %195, %205",
 "old_ind":"%195 = phi double [ %206, %197 ], [ 0.000000e+00, %191 ]",
 "precursor":"br label %193",
 "src1":{"address":"%203 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %202",
         "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
         "input_index":
         ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
         "offset_add":{"addend":"%164 = mul i64 %163, 5",
                       "input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
                       "value":"%202 = add i64 %164, %194"},
         "output_index":"%202 = add i64 %164, %194",
         "stride_mul":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
         "value":"%204 = load double, double* %203, align 8, !tbaa !5"},
 "src2":{"address":"%200 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %199",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
         "input_index":
         ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
         "offset_add":{"addend":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]",
                       "input":"%198 = mul i64 %194, 5",
                       "value":"%199 = add i64 %198, %170"},
         "output_index":"%199 = add i64 %198, %170",
         "stride_mul":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "multiplier":"i64 5",
           "value":"%198 = mul i64 %194, 5"}],
         "value":"%201 = load double, double* %200, align 8, !tbaa !5"},
 "successor":"%209 = add i64 %166, %170"}
END DOT
BEGIN DOT
{"begin":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "body":{"begin":"%198 = mul i64 %194, 5",
         "end":"br label %193",
         "precursor":"br i1 %196, label %208, label %197",
         "successor":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"},
 "comparison":"%196 = icmp eq i64 %194, 5",
 "dotvalue":"%205 = fmul double %201, %204",
 "end":"br i1 %196, label %208, label %197",
 "increment":"%207 = add nuw nsw i64 %194, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
 "new_ind":"%206 = fadd double %195, %205",
 "old_ind":"%195 = phi double [ %206, %197 ], [ 0.000000e+00, %191 ]",
 "precursor":"br label %193",
 "src1":{"address":"%203 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %202",
         "base_index":"%164 = mul i64 %163, 5",
         "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
         "index_add":
         [{"addend":"%164 = mul i64 %163, 5",
           "input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%202 = add i64 %164, %194"}],
         "input_index":
         ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
         "offset_add":{"input":"%202 = add i64 %164, %194",
                       "value":"%202 = add i64 %164, %194"},
         "output_index":"%202 = add i64 %164, %194",
         "stride_mul":
         [{"input":"%202 = add i64 %164, %194",
           "value":"%202 = add i64 %164, %194"}],
         "value":"%204 = load double, double* %203, align 8, !tbaa !5"},
 "src2":{"address":"%200 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %199",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "value":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"}],
         "input_index":
         ["%194 = phi i64 [ %207, %197 ], [ 0, %191 ]"],
         "offset_add":{"addend":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]",
                       "input":"%198 = mul i64 %194, 5",
                       "value":"%199 = add i64 %198, %170"},
         "output_index":"%199 = add i64 %198, %170",
         "stride_mul":
         [{"input":"%194 = phi i64 [ %207, %197 ], [ 0, %191 ]",
           "multiplier":"i64 5",
           "value":"%198 = mul i64 %194, 5"}],
         "value":"%201 = load double, double* %200, align 8, !tbaa !5"},
 "successor":"%209 = add i64 %166, %170"}
END DOT
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in1*in2;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
 "body":{"begin":"%217 = mul i64 %213, 5",
         "end":"br label %212",
         "precursor":"br i1 %215, label %229, label %216",
         "successor":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"},
 "comparison":"%215 = icmp eq i64 %213, 5",
 "end":"br i1 %215, label %229, label %216",
 "increment":"%228 = add nuw nsw i64 %213, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
 "kernel":{"constants":
           [{"use":"%219 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %218",
             "value":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)"},
            {"use":"%224 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %223",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%221 = add i64 %154, %213",
             "value":"%154 = mul i64 %153, 5"},
            {"use":"%218 = add i64 %217, %159",
             "value":"%159 = phi i64 [ %269, %268 ], [ 0, %151 ]"},
            {"use":"%223 = add i64 %222, %170",
             "value":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]"}],
           "input":
           ["%220 = load double, double* %219, align 8, !tbaa !5",
            "%225 = load double, double* %224, align 8, !tbaa !5",
            "%214 = phi double [ %227, %216 ], [ 0.000000e+00, %208 ]"],
           "origin":
           ["br i1 %215, label %229, label %216"],
           "output":"%227 = fadd double %214, %226",
           "restrictions":
           [{"use":"%217 = mul i64 %213, 5",
             "value":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"},
            {"use":"%221 = add i64 %154, %213",
             "value":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"},
            {"use":"%228 = add nuw nsw i64 %213, 1",
             "value":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"},
            {"use":"%227 = fadd double %214, %226",
             "value":"%214 = phi double [ %227, %216 ], [ 0.000000e+00, %208 ]"}]},
 "old_value":"%214 = phi double [ %227, %216 ], [ 0.000000e+00, %208 ]",
 "precursor":"br label %212",
 "read":
 [{"address":"%219 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %218",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
     "value":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"}],
   "input_index":
   ["%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"],
   "offset_add":{"addend":"%159 = phi i64 [ %269, %268 ], [ 0, %151 ]",
                 "input":"%217 = mul i64 %213, 5",
                 "value":"%218 = add i64 %217, %159"},
   "output_index":"%218 = add i64 %217, %159",
   "stride_mul":
   [{"input":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
     "multiplier":"i64 5",
     "value":"%217 = mul i64 %213, 5"}]},
  {"address":"%224 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %223",
   "base_index":"%154 = mul i64 %153, 5",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index_add":
   [{"addend":"%154 = mul i64 %153, 5",
     "input":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
     "value":"%221 = add i64 %154, %213"}],
   "input_index":
   ["%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"],
   "offset_add":{"addend":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]",
                 "input":"%222 = mul i64 %221, 5",
                 "value":"%223 = add i64 %222, %170"},
   "output_index":"%223 = add i64 %222, %170",
   "stride_mul":
   [{"input":"%221 = add i64 %154, %213",
     "multiplier":"i64 5",
     "value":"%222 = mul i64 %221, 5"}]}],
 "read_value":
 ["%220 = load double, double* %219, align 8, !tbaa !5",
  "%225 = load double, double* %224, align 8, !tbaa !5"],
 "successor":"%230 = fmul double %195, -3.000000e+00"}
END scalar
BEGIN DOT
{"begin":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
 "body":{"begin":"%217 = mul i64 %213, 5",
         "end":"br label %212",
         "precursor":"br i1 %215, label %229, label %216",
         "successor":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"},
 "comparison":"%215 = icmp eq i64 %213, 5",
 "dotvalue":"%226 = fmul double %220, %225",
 "end":"br i1 %215, label %229, label %216",
 "increment":"%228 = add nuw nsw i64 %213, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
 "new_ind":"%227 = fadd double %214, %226",
 "old_ind":"%214 = phi double [ %227, %216 ], [ 0.000000e+00, %208 ]",
 "precursor":"br label %212",
 "src1":{"address":"%219 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %218",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
           "value":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"}],
         "input_index":
         ["%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"],
         "offset_add":{"addend":"%159 = phi i64 [ %269, %268 ], [ 0, %151 ]",
                       "input":"%217 = mul i64 %213, 5",
                       "value":"%218 = add i64 %217, %159"},
         "output_index":"%218 = add i64 %217, %159",
         "stride_mul":
         [{"input":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
           "multiplier":"i64 5",
           "value":"%217 = mul i64 %213, 5"}],
         "value":"%220 = load double, double* %219, align 8, !tbaa !5"},
 "src2":{"address":"%224 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %223",
         "base_index":"%154 = mul i64 %153, 5",
         "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
         "index_add":
         [{"addend":"%154 = mul i64 %153, 5",
           "input":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
           "value":"%221 = add i64 %154, %213"}],
         "input_index":
         ["%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"],
         "offset_add":{"addend":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]",
                       "input":"%222 = mul i64 %221, 5",
                       "value":"%223 = add i64 %222, %170"},
         "output_index":"%223 = add i64 %222, %170",
         "stride_mul":
         [{"input":"%221 = add i64 %154, %213",
           "multiplier":"i64 5",
           "value":"%222 = mul i64 %221, 5"}],
         "value":"%225 = load double, double* %224, align 8, !tbaa !5"},
 "successor":"%230 = fmul double %195, -3.000000e+00"}
END DOT
BEGIN DOT
{"begin":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
 "body":{"begin":"%217 = mul i64 %213, 5",
         "end":"br label %212",
         "precursor":"br i1 %215, label %229, label %216",
         "successor":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"},
 "comparison":"%215 = icmp eq i64 %213, 5",
 "dotvalue":"%226 = fmul double %220, %225",
 "end":"br i1 %215, label %229, label %216",
 "increment":"%228 = add nuw nsw i64 %213, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
 "new_ind":"%227 = fadd double %214, %226",
 "old_ind":"%214 = phi double [ %227, %216 ], [ 0.000000e+00, %208 ]",
 "precursor":"br label %212",
 "src1":{"address":"%224 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %223",
         "base_index":"%154 = mul i64 %153, 5",
         "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
         "index_add":
         [{"addend":"%154 = mul i64 %153, 5",
           "input":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
           "value":"%221 = add i64 %154, %213"}],
         "input_index":
         ["%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"],
         "offset_add":{"addend":"%170 = phi i64 [ %267, %251 ], [ 0, %161 ]",
                       "input":"%222 = mul i64 %221, 5",
                       "value":"%223 = add i64 %222, %170"},
         "output_index":"%223 = add i64 %222, %170",
         "stride_mul":
         [{"input":"%221 = add i64 %154, %213",
           "multiplier":"i64 5",
           "value":"%222 = mul i64 %221, 5"}],
         "value":"%225 = load double, double* %224, align 8, !tbaa !5"},
 "src2":{"address":"%219 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %218",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
           "value":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"}],
         "input_index":
         ["%213 = phi i64 [ %228, %216 ], [ 0, %208 ]"],
         "offset_add":{"addend":"%159 = phi i64 [ %269, %268 ], [ 0, %151 ]",
                       "input":"%217 = mul i64 %213, 5",
                       "value":"%218 = add i64 %217, %159"},
         "output_index":"%218 = add i64 %217, %159",
         "stride_mul":
         [{"input":"%213 = phi i64 [ %228, %216 ], [ 0, %208 ]",
           "multiplier":"i64 5",
           "value":"%217 = mul i64 %213, 5"}],
         "value":"%220 = load double, double* %219, align 8, !tbaa !5"},
 "successor":"%230 = fmul double %195, -3.000000e+00"}
END DOT
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in1*in2;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "body":{"begin":"%322 = mul i64 %318, 5",
         "end":"br label %317",
         "precursor":"br i1 %320, label %332, label %321",
         "successor":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"},
 "comparison":"%320 = icmp eq i64 %318, 5",
 "end":"br i1 %320, label %332, label %321",
 "increment":"%331 = add nuw nsw i64 %318, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "kernel":{"constants":
           [{"use":"%324 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %323",
             "value":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)"},
            {"use":"%327 = getelementptr double, double* %82, i64 %326",
             "value":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%326 = add i64 %288, %318",
             "value":"%288 = mul i64 %287, 5"},
            {"use":"%323 = add i64 %322, %294",
             "value":"%294 = phi i64 [ %389, %373 ], [ 0, %285 ]"}],
           "input":
           ["%325 = load double, double* %324, align 8, !tbaa !5",
            "%328 = load double, double* %327, align 8, !tbaa !5",
            "%328 = load double, double* %327, align 8, !tbaa !5",
            "%319 = phi double [ %330, %321 ], [ 0.000000e+00, %315 ]"],
           "origin":
           ["br i1 %320, label %332, label %321"],
           "output":"%330 = fadd double %319, %329",
           "restrictions":
           [{"use":"%322 = mul i64 %318, 5",
             "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"},
            {"use":"%326 = add i64 %288, %318",
             "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"},
            {"use":"%331 = add nuw nsw i64 %318, 1",
             "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"},
            {"use":"%330 = fadd double %319, %329",
             "value":"%319 = phi double [ %330, %321 ], [ 0.000000e+00, %315 ]"}]},
 "old_value":"%319 = phi double [ %330, %321 ], [ 0.000000e+00, %315 ]",
 "precursor":"br label %317",
 "read":
 [{"address":"%324 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %323",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
     "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
   "input_index":
   ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
   "offset_add":{"addend":"%294 = phi i64 [ %389, %373 ], [ 0, %285 ]",
                 "input":"%322 = mul i64 %318, 5",
                 "value":"%323 = add i64 %322, %294"},
   "output_index":"%323 = add i64 %322, %294",
   "stride_mul":
   [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
     "multiplier":"i64 5",
     "value":"%322 = mul i64 %318, 5"}]},
  {"address":"%327 = getelementptr double, double* %82, i64 %326",
   "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
   "index_add":
   [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
     "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
   "input_index":
   ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
   "offset_add":{"addend":"%288 = mul i64 %287, 5",
                 "input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
                 "value":"%326 = add i64 %288, %318"},
   "output_index":"%326 = add i64 %288, %318",
   "stride_mul":
   [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
     "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}]},
  {"address":"%327 = getelementptr double, double* %82, i64 %326",
   "base_index":"%288 = mul i64 %287, 5",
   "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
   "index_add":
   [{"addend":"%288 = mul i64 %287, 5",
     "input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
     "value":"%326 = add i64 %288, %318"}],
   "input_index":
   ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
   "offset_add":{"input":"%326 = add i64 %288, %318",
                 "value":"%326 = add i64 %288, %318"},
   "output_index":"%326 = add i64 %288, %318",
   "stride_mul":
   [{"input":"%326 = add i64 %288, %318",
     "value":"%326 = add i64 %288, %318"}]}],
 "read_value":
 ["%325 = load double, double* %324, align 8, !tbaa !5",
  "%328 = load double, double* %327, align 8, !tbaa !5",
  "%328 = load double, double* %327, align 8, !tbaa !5"],
 "successor":"%333 = add i64 %290, %294"}
END scalar
BEGIN DOT
{"begin":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "body":{"begin":"%322 = mul i64 %318, 5",
         "end":"br label %317",
         "precursor":"br i1 %320, label %332, label %321",
         "successor":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"},
 "comparison":"%320 = icmp eq i64 %318, 5",
 "dotvalue":"%329 = fmul double %325, %328",
 "end":"br i1 %320, label %332, label %321",
 "increment":"%331 = add nuw nsw i64 %318, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "new_ind":"%330 = fadd double %319, %329",
 "old_ind":"%319 = phi double [ %330, %321 ], [ 0.000000e+00, %315 ]",
 "precursor":"br label %317",
 "src1":{"address":"%324 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %323",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
         "input_index":
         ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
         "offset_add":{"addend":"%294 = phi i64 [ %389, %373 ], [ 0, %285 ]",
                       "input":"%322 = mul i64 %318, 5",
                       "value":"%323 = add i64 %322, %294"},
         "output_index":"%323 = add i64 %322, %294",
         "stride_mul":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "multiplier":"i64 5",
           "value":"%322 = mul i64 %318, 5"}],
         "value":"%325 = load double, double* %324, align 8, !tbaa !5"},
 "src2":{"address":"%327 = getelementptr double, double* %82, i64 %326",
         "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
         "index_add":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
         "input_index":
         ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
         "offset_add":{"addend":"%288 = mul i64 %287, 5",
                       "input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
                       "value":"%326 = add i64 %288, %318"},
         "output_index":"%326 = add i64 %288, %318",
         "stride_mul":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
         "value":"%328 = load double, double* %327, align 8, !tbaa !5"},
 "successor":"%333 = add i64 %290, %294"}
END DOT
BEGIN DOT
{"begin":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "body":{"begin":"%322 = mul i64 %318, 5",
         "end":"br label %317",
         "precursor":"br i1 %320, label %332, label %321",
         "successor":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"},
 "comparison":"%320 = icmp eq i64 %318, 5",
 "dotvalue":"%329 = fmul double %325, %328",
 "end":"br i1 %320, label %332, label %321",
 "increment":"%331 = add nuw nsw i64 %318, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "new_ind":"%330 = fadd double %319, %329",
 "old_ind":"%319 = phi double [ %330, %321 ], [ 0.000000e+00, %315 ]",
 "precursor":"br label %317",
 "src1":{"address":"%324 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %323",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
         "input_index":
         ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
         "offset_add":{"addend":"%294 = phi i64 [ %389, %373 ], [ 0, %285 ]",
                       "input":"%322 = mul i64 %318, 5",
                       "value":"%323 = add i64 %322, %294"},
         "output_index":"%323 = add i64 %322, %294",
         "stride_mul":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "multiplier":"i64 5",
           "value":"%322 = mul i64 %318, 5"}],
         "value":"%325 = load double, double* %324, align 8, !tbaa !5"},
 "src2":{"address":"%327 = getelementptr double, double* %82, i64 %326",
         "base_index":"%288 = mul i64 %287, 5",
         "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
         "index_add":
         [{"addend":"%288 = mul i64 %287, 5",
           "input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%326 = add i64 %288, %318"}],
         "input_index":
         ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
         "offset_add":{"input":"%326 = add i64 %288, %318",
                       "value":"%326 = add i64 %288, %318"},
         "output_index":"%326 = add i64 %288, %318",
         "stride_mul":
         [{"input":"%326 = add i64 %288, %318",
           "value":"%326 = add i64 %288, %318"}],
         "value":"%328 = load double, double* %327, align 8, !tbaa !5"},
 "successor":"%333 = add i64 %290, %294"}
END DOT
BEGIN DOT
{"begin":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "body":{"begin":"%322 = mul i64 %318, 5",
         "end":"br label %317",
         "precursor":"br i1 %320, label %332, label %321",
         "successor":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"},
 "comparison":"%320 = icmp eq i64 %318, 5",
 "dotvalue":"%329 = fmul double %325, %328",
 "end":"br i1 %320, label %332, label %321",
 "increment":"%331 = add nuw nsw i64 %318, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "new_ind":"%330 = fadd double %319, %329",
 "old_ind":"%319 = phi double [ %330, %321 ], [ 0.000000e+00, %315 ]",
 "precursor":"br label %317",
 "src1":{"address":"%327 = getelementptr double, double* %82, i64 %326",
         "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
         "index_add":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
         "input_index":
         ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
         "offset_add":{"addend":"%288 = mul i64 %287, 5",
                       "input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
                       "value":"%326 = add i64 %288, %318"},
         "output_index":"%326 = add i64 %288, %318",
         "stride_mul":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
         "value":"%328 = load double, double* %327, align 8, !tbaa !5"},
 "src2":{"address":"%324 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %323",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
         "input_index":
         ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
         "offset_add":{"addend":"%294 = phi i64 [ %389, %373 ], [ 0, %285 ]",
                       "input":"%322 = mul i64 %318, 5",
                       "value":"%323 = add i64 %322, %294"},
         "output_index":"%323 = add i64 %322, %294",
         "stride_mul":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "multiplier":"i64 5",
           "value":"%322 = mul i64 %318, 5"}],
         "value":"%325 = load double, double* %324, align 8, !tbaa !5"},
 "successor":"%333 = add i64 %290, %294"}
END DOT
BEGIN DOT
{"begin":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "body":{"begin":"%322 = mul i64 %318, 5",
         "end":"br label %317",
         "precursor":"br i1 %320, label %332, label %321",
         "successor":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"},
 "comparison":"%320 = icmp eq i64 %318, 5",
 "dotvalue":"%329 = fmul double %325, %328",
 "end":"br i1 %320, label %332, label %321",
 "increment":"%331 = add nuw nsw i64 %318, 1",
 "initial":"double 0.000000e+00",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
 "new_ind":"%330 = fadd double %319, %329",
 "old_ind":"%319 = phi double [ %330, %321 ], [ 0.000000e+00, %315 ]",
 "precursor":"br label %317",
 "src1":{"address":"%327 = getelementptr double, double* %82, i64 %326",
         "base_index":"%288 = mul i64 %287, 5",
         "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
         "index_add":
         [{"addend":"%288 = mul i64 %287, 5",
           "input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%326 = add i64 %288, %318"}],
         "input_index":
         ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
         "offset_add":{"input":"%326 = add i64 %288, %318",
                       "value":"%326 = add i64 %288, %318"},
         "output_index":"%326 = add i64 %288, %318",
         "stride_mul":
         [{"input":"%326 = add i64 %288, %318",
           "value":"%326 = add i64 %288, %318"}],
         "value":"%328 = load double, double* %327, align 8, !tbaa !5"},
 "src2":{"address":"%324 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %323",
         "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
         "index_add":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "value":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"}],
         "input_index":
         ["%318 = phi i64 [ %331, %321 ], [ 0, %315 ]"],
         "offset_add":{"addend":"%294 = phi i64 [ %389, %373 ], [ 0, %285 ]",
                       "input":"%322 = mul i64 %318, 5",
                       "value":"%323 = add i64 %322, %294"},
         "output_index":"%323 = add i64 %322, %294",
         "stride_mul":
         [{"input":"%318 = phi i64 [ %331, %321 ], [ 0, %315 ]",
           "multiplier":"i64 5",
           "value":"%322 = mul i64 %318, 5"}],
         "value":"%325 = load double, double* %324, align 8, !tbaa !5"},
 "successor":"%333 = add i64 %290, %294"}
END DOT
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in1*in2;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]",
 "body":{"begin":"%341 = mul i64 %337, 5",
         "end":"br label %336",
         "precursor":"br i1 %339, label %353, label %340",
         "successor":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]"},
 "comparison":"%339 = icmp eq i64 %337, 5",
 "end":"br i1 %339, label %353, label %340",
 "increment":"%352 = add nuw nsw i64 %337, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]",
 "kernel":{"constants":
           [{"use":"%343 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %342",
             "value":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)"},
            {"use":"%348 = getelementptr double, double* %82, i64 %347",
             "value":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%345 = add i64 %277, %337",
             "value":"%277 = mul i64 %273, 5"},
            {"use":"%342 = add i64 %341, %283",
             "value":"%283 = phi i64 [ %391, %390 ], [ 0, %275 ]"},
            {"use":"%347 = add i64 %346, %294",
             "value":"%294 = phi i64 [ %389, %373 ], [ 0, %285 ]"}],
           "input":
           ["%344 = load double, double* %343, align 8, !tbaa !5",
            "%349 = load double, double* %348, align 8, !tbaa !5",
            "%338 = phi double [ %351, %340 ], [ 0.000000e+00, %332 ]"],
           "origin":
           ["br i1 %339, label %353, label %340"],
           "output":"%351 = fadd double %338, %350",
           "restrictions":
           [{"use":"%341 = mul i64 %337, 5",
             "value":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]"},
            {"use":"%345 = add i64 %277, %337",
             "value":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]"},
            {"use":"%352 = add nuw nsw i64 %337, 1",
             "value":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]"},
            {"use":"%351 = fadd double %338, %350",
             "value":"%338 = phi double [ %351, %340 ], [ 0.000000e+00, %332 ]"}]},
 "old_value":"%338 = phi double [ %351, %340 ], [ 0.000000e+00, %332 ]",
 "precursor":"br label %336",
 "read":
 [{"address":"%343 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %342",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]",
     "value":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]"}],
   "input_index":
   ["%337 = phi i64 [ %352, %340 ], [ 0, %332 ]"],
   "offset_add":{"addend":"%283 = phi i64 [ %391, %390 ], [ 0, %275 ]",
                 "input":"%341 = mul i64 %337, 5",
                 "value":"%342 = add i64 %341, %283"},
   "output_index":"%342 = add i64 %341, %283",
   "stride_mul":
   [{"input":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]",
     "multiplier":"i64 5",
     "value":"%341 = mul i64 %337, 5"}]},
  {"address":"%348 = getelementptr double, double* %82, i64 %347",
   "base_index":"%277 = mul i64 %273, 5",
   "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
   "index_add":
   [{"addend":"%277 = mul i64 %273, 5",
     "input":"%337 = phi i64 [ %352, %340 ], [ 0, %332 ]",
     "value":"%345 = add i64 %277, %337"}],
   "input_index":
   ["%337 = phi i64 [ %352, %340 ], [ 0, %332 ]"],
   "offset_add":{"addend":"%294 = phi i64 [ %389, %373 ], [ 0, %285 ]",
                 "input":"%346 = mul i64 %345, 5",
                 "value":"%347 = add i64 %346, %294"},
   "output_index":"%347 = add i64 %346, %294",
   "stride_mul":
   [{"input":"%345 = add i64 %277, %337",
     "multiplier":"i64 5",
     "value":"%346 = mul i64 %345, 5"}]}],
 "read_value":
 ["%344 = load double, double* %343, align 8, !tbaa !5",
  "%349 = load double, double* %348, align 8, !tbaa !5"],
 "successor":"%354 = fmul double %319, -3.000000e+00"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in1*in2;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]",
 "body":{"begin":"%444 = mul i64 %440, 5",
         "end":"br label %439",
         "precursor":"br i1 %442, label %454, label %443",
         "successor":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"},
 "comparison":"%442 = icmp eq i64 %440, 5",
 "end":"br i1 %442, label %454, label %443",
 "increment":"%453 = add nuw nsw i64 %440, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]",
 "kernel":{"constants":
           [{"use":"%446 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %445",
             "value":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)"},
            {"use":"%449 = getelementptr double, double* %76, i64 %448",
             "value":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%448 = add i64 %410, %440",
             "value":"%410 = mul i64 %409, 5"},
            {"use":"%445 = add i64 %444, %416",
             "value":"%416 = phi i64 [ %512, %495 ], [ 0, %407 ]"}],
           "input":
           ["%447 = load double, double* %446, align 8, !tbaa !5",
            "%450 = load double, double* %449, align 8, !tbaa !5",
            "%450 = load double, double* %449, align 8, !tbaa !5",
            "%441 = phi double [ %452, %443 ], [ 0.000000e+00, %437 ]"],
           "origin":
           ["br i1 %442, label %454, label %443"],
           "output":"%452 = fadd double %441, %451",
           "restrictions":
           [{"use":"%444 = mul i64 %440, 5",
             "value":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"},
            {"use":"%448 = add i64 %410, %440",
             "value":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"},
            {"use":"%453 = add nuw nsw i64 %440, 1",
             "value":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"},
            {"use":"%452 = fadd double %441, %451",
             "value":"%441 = phi double [ %452, %443 ], [ 0.000000e+00, %437 ]"}]},
 "old_value":"%441 = phi double [ %452, %443 ], [ 0.000000e+00, %437 ]",
 "precursor":"br label %439",
 "read":
 [{"address":"%446 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %445",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]",
     "value":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"}],
   "input_index":
   ["%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"],
   "offset_add":{"addend":"%416 = phi i64 [ %512, %495 ], [ 0, %407 ]",
                 "input":"%444 = mul i64 %440, 5",
                 "value":"%445 = add i64 %444, %416"},
   "output_index":"%445 = add i64 %444, %416",
   "stride_mul":
   [{"input":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]",
     "multiplier":"i64 5",
     "value":"%444 = mul i64 %440, 5"}]},
  {"address":"%449 = getelementptr double, double* %76, i64 %448",
   "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
   "index_add":
   [{"input":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]",
     "value":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"}],
   "input_index":
   ["%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"],
   "offset_add":{"addend":"%410 = mul i64 %409, 5",
                 "input":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]",
                 "value":"%448 = add i64 %410, %440"},
   "output_index":"%448 = add i64 %410, %440",
   "stride_mul":
   [{"input":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]",
     "value":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"}]},
  {"address":"%449 = getelementptr double, double* %76, i64 %448",
   "base_index":"%410 = mul i64 %409, 5",
   "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
   "index_add":
   [{"addend":"%410 = mul i64 %409, 5",
     "input":"%440 = phi i64 [ %453, %443 ], [ 0, %437 ]",
     "value":"%448 = add i64 %410, %440"}],
   "input_index":
   ["%440 = phi i64 [ %453, %443 ], [ 0, %437 ]"],
   "offset_add":{"input":"%448 = add i64 %410, %440",
                 "value":"%448 = add i64 %410, %440"},
   "output_index":"%448 = add i64 %410, %440",
   "stride_mul":
   [{"input":"%448 = add i64 %410, %440",
     "value":"%448 = add i64 %410, %440"}]}],
 "read_value":
 ["%447 = load double, double* %446, align 8, !tbaa !5",
  "%450 = load double, double* %449, align 8, !tbaa !5",
  "%450 = load double, double* %449, align 8, !tbaa !5"],
 "successor":"%455 = add i64 %412, %416"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in1*in2;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]",
 "body":{"begin":"%463 = mul i64 %459, 5",
         "end":"br label %458",
         "precursor":"br i1 %461, label %475, label %462",
         "successor":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]"},
 "comparison":"%461 = icmp eq i64 %459, 5",
 "end":"br i1 %461, label %475, label %462",
 "increment":"%474 = add nuw nsw i64 %459, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]",
 "kernel":{"constants":
           [{"use":"%465 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %464",
             "value":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)"},
            {"use":"%470 = getelementptr double, double* %76, i64 %469",
             "value":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%467 = add i64 %399, %459",
             "value":"%399 = mul i64 %395, 5"},
            {"use":"%464 = add i64 %463, %405",
             "value":"%405 = phi i64 [ %514, %513 ], [ 0, %397 ]"},
            {"use":"%469 = add i64 %468, %416",
             "value":"%416 = phi i64 [ %512, %495 ], [ 0, %407 ]"}],
           "input":
           ["%466 = load double, double* %465, align 8, !tbaa !5",
            "%471 = load double, double* %470, align 8, !tbaa !5",
            "%460 = phi double [ %473, %462 ], [ 0.000000e+00, %454 ]"],
           "origin":
           ["br i1 %461, label %475, label %462"],
           "output":"%473 = fadd double %460, %472",
           "restrictions":
           [{"use":"%463 = mul i64 %459, 5",
             "value":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]"},
            {"use":"%467 = add i64 %399, %459",
             "value":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]"},
            {"use":"%474 = add nuw nsw i64 %459, 1",
             "value":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]"},
            {"use":"%473 = fadd double %460, %472",
             "value":"%460 = phi double [ %473, %462 ], [ 0.000000e+00, %454 ]"}]},
 "old_value":"%460 = phi double [ %473, %462 ], [ 0.000000e+00, %454 ]",
 "precursor":"br label %458",
 "read":
 [{"address":"%465 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %464",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]",
     "value":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]"}],
   "input_index":
   ["%459 = phi i64 [ %474, %462 ], [ 0, %454 ]"],
   "offset_add":{"addend":"%405 = phi i64 [ %514, %513 ], [ 0, %397 ]",
                 "input":"%463 = mul i64 %459, 5",
                 "value":"%464 = add i64 %463, %405"},
   "output_index":"%464 = add i64 %463, %405",
   "stride_mul":
   [{"input":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]",
     "multiplier":"i64 5",
     "value":"%463 = mul i64 %459, 5"}]},
  {"address":"%470 = getelementptr double, double* %76, i64 %469",
   "base_index":"%399 = mul i64 %395, 5",
   "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
   "index_add":
   [{"addend":"%399 = mul i64 %395, 5",
     "input":"%459 = phi i64 [ %474, %462 ], [ 0, %454 ]",
     "value":"%467 = add i64 %399, %459"}],
   "input_index":
   ["%459 = phi i64 [ %474, %462 ], [ 0, %454 ]"],
   "offset_add":{"addend":"%416 = phi i64 [ %512, %495 ], [ 0, %407 ]",
                 "input":"%468 = mul i64 %467, 5",
                 "value":"%469 = add i64 %468, %416"},
   "output_index":"%469 = add i64 %468, %416",
   "stride_mul":
   [{"input":"%467 = add i64 %399, %459",
     "multiplier":"i64 5",
     "value":"%468 = mul i64 %467, 5"}]}],
 "read_value":
 ["%466 = load double, double* %465, align 8, !tbaa !5",
  "%471 = load double, double* %470, align 8, !tbaa !5"],
 "successor":"%476 = fmul double %441, -3.000000e+00"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in1*in2;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]",
 "body":{"begin":"%563 = mul i64 %559, 5",
         "end":"br label %558",
         "precursor":"br i1 %561, label %573, label %562",
         "successor":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"},
 "comparison":"%561 = icmp eq i64 %559, 5",
 "end":"br i1 %561, label %573, label %562",
 "increment":"%572 = add nuw nsw i64 %559, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]",
 "kernel":{"constants":
           [{"use":"%565 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %564",
             "value":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)"},
            {"use":"%568 = getelementptr double, double* %82, i64 %567",
             "value":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%567 = add i64 %531, %559",
             "value":"%531 = mul i64 %530, 5"},
            {"use":"%564 = add i64 %563, %535",
             "value":"%535 = phi i64 [ %636, %614 ], [ 0, %528 ]"}],
           "input":
           ["%566 = load double, double* %565, align 8, !tbaa !5",
            "%569 = load double, double* %568, align 8, !tbaa !5",
            "%569 = load double, double* %568, align 8, !tbaa !5",
            "%560 = phi double [ %571, %562 ], [ 0.000000e+00, %556 ]"],
           "origin":
           ["br i1 %561, label %573, label %562"],
           "output":"%571 = fadd double %560, %570",
           "restrictions":
           [{"use":"%563 = mul i64 %559, 5",
             "value":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"},
            {"use":"%567 = add i64 %531, %559",
             "value":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"},
            {"use":"%572 = add nuw nsw i64 %559, 1",
             "value":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"},
            {"use":"%571 = fadd double %560, %570",
             "value":"%560 = phi double [ %571, %562 ], [ 0.000000e+00, %556 ]"}]},
 "old_value":"%560 = phi double [ %571, %562 ], [ 0.000000e+00, %556 ]",
 "precursor":"br label %558",
 "read":
 [{"address":"%565 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %564",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]",
     "value":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"}],
   "input_index":
   ["%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"],
   "offset_add":{"addend":"%535 = phi i64 [ %636, %614 ], [ 0, %528 ]",
                 "input":"%563 = mul i64 %559, 5",
                 "value":"%564 = add i64 %563, %535"},
   "output_index":"%564 = add i64 %563, %535",
   "stride_mul":
   [{"input":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]",
     "multiplier":"i64 5",
     "value":"%563 = mul i64 %559, 5"}]},
  {"address":"%568 = getelementptr double, double* %82, i64 %567",
   "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
   "index_add":
   [{"input":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]",
     "value":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"}],
   "input_index":
   ["%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"],
   "offset_add":{"addend":"%531 = mul i64 %530, 5",
                 "input":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]",
                 "value":"%567 = add i64 %531, %559"},
   "output_index":"%567 = add i64 %531, %559",
   "stride_mul":
   [{"input":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]",
     "value":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"}]},
  {"address":"%568 = getelementptr double, double* %82, i64 %567",
   "base_index":"%531 = mul i64 %530, 5",
   "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
   "index_add":
   [{"addend":"%531 = mul i64 %530, 5",
     "input":"%559 = phi i64 [ %572, %562 ], [ 0, %556 ]",
     "value":"%567 = add i64 %531, %559"}],
   "input_index":
   ["%559 = phi i64 [ %572, %562 ], [ 0, %556 ]"],
   "offset_add":{"input":"%567 = add i64 %531, %559",
                 "value":"%567 = add i64 %531, %559"},
   "output_index":"%567 = add i64 %531, %559",
   "stride_mul":
   [{"input":"%567 = add i64 %531, %559",
     "value":"%567 = add i64 %531, %559"}]}],
 "read_value":
 ["%566 = load double, double* %565, align 8, !tbaa !5",
  "%569 = load double, double* %568, align 8, !tbaa !5",
  "%569 = load double, double* %568, align 8, !tbaa !5"],
 "successor":"%574 = add i64 %533, %535"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in1*in2;
}
END LOOP
BEGIN LOOP
BEGIN scalar
{"begin":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]",
 "body":{"begin":"%582 = mul i64 %578, 5",
         "end":"br label %577",
         "precursor":"br i1 %580, label %594, label %581",
         "successor":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]"},
 "comparison":"%580 = icmp eq i64 %578, 5",
 "end":"br i1 %580, label %594, label %581",
 "increment":"%593 = add nuw nsw i64 %578, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]",
 "kernel":{"constants":
           [{"use":"%584 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %583",
             "value":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)"},
            {"use":"%589 = getelementptr double, double* %82, i64 %588",
             "value":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%586 = add i64 %522, %578",
             "value":"%522 = mul i64 %518, 5"},
            {"use":"%583 = add i64 %582, %526",
             "value":"%526 = phi i64 [ %638, %637 ], [ 0, %520 ]"},
            {"use":"%588 = add i64 %587, %535",
             "value":"%535 = phi i64 [ %636, %614 ], [ 0, %528 ]"}],
           "input":
           ["%585 = load double, double* %584, align 8, !tbaa !5",
            "%590 = load double, double* %589, align 8, !tbaa !5",
            "%579 = phi double [ %592, %581 ], [ 0.000000e+00, %573 ]"],
           "origin":
           ["br i1 %580, label %594, label %581"],
           "output":"%592 = fadd double %579, %591",
           "restrictions":
           [{"use":"%582 = mul i64 %578, 5",
             "value":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]"},
            {"use":"%586 = add i64 %522, %578",
             "value":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]"},
            {"use":"%593 = add nuw nsw i64 %578, 1",
             "value":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]"},
            {"use":"%592 = fadd double %579, %591",
             "value":"%579 = phi double [ %592, %581 ], [ 0.000000e+00, %573 ]"}]},
 "old_value":"%579 = phi double [ %592, %581 ], [ 0.000000e+00, %573 ]",
 "precursor":"br label %577",
 "read":
 [{"address":"%584 = getelementptr double, double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0), i64 %583",
   "base_pointer":"double* getelementptr inbounds ([5 x [5 x double]], [5 x [5 x double]]* @dxm1, i64 0, i64 0, i64 0)",
   "index_add":
   [{"input":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]",
     "value":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]"}],
   "input_index":
   ["%578 = phi i64 [ %593, %581 ], [ 0, %573 ]"],
   "offset_add":{"addend":"%526 = phi i64 [ %638, %637 ], [ 0, %520 ]",
                 "input":"%582 = mul i64 %578, 5",
                 "value":"%583 = add i64 %582, %526"},
   "output_index":"%583 = add i64 %582, %526",
   "stride_mul":
   [{"input":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]",
     "multiplier":"i64 5",
     "value":"%582 = mul i64 %578, 5"}]},
  {"address":"%589 = getelementptr double, double* %82, i64 %588",
   "base_index":"%522 = mul i64 %518, 5",
   "base_pointer":"%82 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %6, i64 0, i64 0, i64 0, i64 0",
   "index_add":
   [{"addend":"%522 = mul i64 %518, 5",
     "input":"%578 = phi i64 [ %593, %581 ], [ 0, %573 ]",
     "value":"%586 = add i64 %522, %578"}],
   "input_index":
   ["%578 = phi i64 [ %593, %581 ], [ 0, %573 ]"],
   "offset_add":{"addend":"%535 = phi i64 [ %636, %614 ], [ 0, %528 ]",
                 "input":"%587 = mul i64 %586, 5",
                 "value":"%588 = add i64 %587, %535"},
   "output_index":"%588 = add i64 %587, %535",
   "stride_mul":
   [{"input":"%586 = add i64 %522, %578",
     "multiplier":"i64 5",
     "value":"%587 = mul i64 %586, 5"}]}],
 "read_value":
 ["%585 = load double, double* %584, align 8, !tbaa !5",
  "%590 = load double, double* %589, align 8, !tbaa !5"],
 "successor":"%595 = fmul double %560, -3.000000e+00"}
END scalar
BEGIN OPERATOR
void op(struct { double _0; }* in0, double in1, double in2)
{
  in0->_0 += in1*in2;
}
END LOOP
BEGIN LOOP
BEGIN AXPY
{"alpha":"%656 = load double, double* @dtime, align 8",
 "begin":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
 "body":{"begin":"%680 = add i64 %671, %677",
         "end":"br label %676",
         "precursor":"br i1 %678, label %696, label %679",
         "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
 "comparison":"%678 = icmp eq i64 %677, 5",
 "dst":{"address":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
        "input_index":
        ["%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
        "offset_add":{"addend":"%673 = mul i64 %672, 5",
                      "input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
                      "value":"%683 = add i64 %673, %677"},
        "output_index":"%683 = add i64 %673, %677",
        "store":"store double %694, double* %684, align 8, !tbaa !5",
        "stride_mul":
        [{"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}]},
 "end":"br i1 %678, label %696, label %679",
 "increment":"%695 = add nuw nsw i64 %677, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
 "precursor":"br label %676",
 "src":{"address":"%688 = getelementptr double, double* %76, i64 %687",
        "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
        "index_add":
        [{"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
        "input_index":
        ["%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
        "offset_add":{"addend":"%675 = mul i64 %674, 5",
                      "input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
                      "value":"%687 = add i64 %675, %677"},
        "output_index":"%687 = add i64 %675, %677",
        "stride_mul":
        [{"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
        "value":"%689 = load double, double* %688, align 8, !tbaa !5"},
 "successor":"%697 = add nuw nsw i64 %667, 1",
 "sum":{"addend":"%693 = fmul double %689, %656",
        "input":"%685 = load double, double* %684, align 8, !tbaa !5",
        "value":"%694 = fadd double %685, %693"}}
END AXPY
BEGIN AXPY
{"alpha":"%656 = load double, double* @dtime, align 8",
 "begin":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
 "body":{"begin":"%680 = add i64 %671, %677",
         "end":"br label %676",
         "precursor":"br i1 %678, label %696, label %679",
         "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
 "comparison":"%678 = icmp eq i64 %677, 5",
 "dst":{"address":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
        "base_index":"%673 = mul i64 %672, 5",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%673 = mul i64 %672, 5",
          "input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%683 = add i64 %673, %677"}],
        "input_index":
        ["%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
        "offset_add":{"input":"%683 = add i64 %673, %677",
                      "value":"%683 = add i64 %673, %677"},
        "output_index":"%683 = add i64 %673, %677",
        "store":"store double %694, double* %684, align 8, !tbaa !5",
        "stride_mul":
        [{"input":"%683 = add i64 %673, %677",
          "value":"%683 = add i64 %673, %677"}]},
 "end":"br i1 %678, label %696, label %679",
 "increment":"%695 = add nuw nsw i64 %677, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
 "precursor":"br label %676",
 "src":{"address":"%688 = getelementptr double, double* %76, i64 %687",
        "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
        "index_add":
        [{"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
        "input_index":
        ["%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
        "offset_add":{"addend":"%675 = mul i64 %674, 5",
                      "input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
                      "value":"%687 = add i64 %675, %677"},
        "output_index":"%687 = add i64 %675, %677",
        "stride_mul":
        [{"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
        "value":"%689 = load double, double* %688, align 8, !tbaa !5"},
 "successor":"%697 = add nuw nsw i64 %667, 1",
 "sum":{"addend":"%693 = fmul double %689, %656",
        "input":"%685 = load double, double* %684, align 8, !tbaa !5",
        "value":"%694 = fadd double %685, %693"}}
END AXPY
BEGIN AXPY
{"alpha":"%656 = load double, double* @dtime, align 8",
 "begin":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
 "body":{"begin":"%680 = add i64 %671, %677",
         "end":"br label %676",
         "precursor":"br i1 %678, label %696, label %679",
         "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
 "comparison":"%678 = icmp eq i64 %677, 5",
 "dst":{"address":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
        "input_index":
        ["%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
        "offset_add":{"addend":"%673 = mul i64 %672, 5",
                      "input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
                      "value":"%683 = add i64 %673, %677"},
        "output_index":"%683 = add i64 %673, %677",
        "store":"store double %694, double* %684, align 8, !tbaa !5",
        "stride_mul":
        [{"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}]},
 "end":"br i1 %678, label %696, label %679",
 "increment":"%695 = add nuw nsw i64 %677, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
 "precursor":"br label %676",
 "src":{"address":"%688 = getelementptr double, double* %76, i64 %687",
        "base_index":"%675 = mul i64 %674, 5",
        "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
        "index_add":
        [{"addend":"%675 = mul i64 %674, 5",
          "input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%687 = add i64 %675, %677"}],
        "input_index":
        ["%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
        "offset_add":{"input":"%687 = add i64 %675, %677",
                      "value":"%687 = add i64 %675, %677"},
        "output_index":"%687 = add i64 %675, %677",
        "stride_mul":
        [{"input":"%687 = add i64 %675, %677",
          "value":"%687 = add i64 %675, %677"}],
        "value":"%689 = load double, double* %688, align 8, !tbaa !5"},
 "successor":"%697 = add nuw nsw i64 %667, 1",
 "sum":{"addend":"%693 = fmul double %689, %656",
        "input":"%685 = load double, double* %684, align 8, !tbaa !5",
        "value":"%694 = fadd double %685, %693"}}
END AXPY
BEGIN AXPY
{"alpha":"%656 = load double, double* @dtime, align 8",
 "begin":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
 "body":{"begin":"%680 = add i64 %671, %677",
         "end":"br label %676",
         "precursor":"br i1 %678, label %696, label %679",
         "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
 "comparison":"%678 = icmp eq i64 %677, 5",
 "dst":{"address":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
        "base_index":"%673 = mul i64 %672, 5",
        "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%673 = mul i64 %672, 5",
          "input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%683 = add i64 %673, %677"}],
        "input_index":
        ["%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
        "offset_add":{"input":"%683 = add i64 %673, %677",
                      "value":"%683 = add i64 %673, %677"},
        "output_index":"%683 = add i64 %673, %677",
        "store":"store double %694, double* %684, align 8, !tbaa !5",
        "stride_mul":
        [{"input":"%683 = add i64 %673, %677",
          "value":"%683 = add i64 %673, %677"}]},
 "end":"br i1 %678, label %696, label %679",
 "increment":"%695 = add nuw nsw i64 %677, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
 "precursor":"br label %676",
 "src":{"address":"%688 = getelementptr double, double* %76, i64 %687",
        "base_index":"%675 = mul i64 %674, 5",
        "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
        "index_add":
        [{"addend":"%675 = mul i64 %674, 5",
          "input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
          "value":"%687 = add i64 %675, %677"}],
        "input_index":
        ["%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
        "offset_add":{"input":"%687 = add i64 %675, %677",
                      "value":"%687 = add i64 %675, %677"},
        "output_index":"%687 = add i64 %675, %677",
        "stride_mul":
        [{"input":"%687 = add i64 %675, %677",
          "value":"%687 = add i64 %675, %677"}],
        "value":"%689 = load double, double* %688, align 8, !tbaa !5"},
 "successor":"%697 = add nuw nsw i64 %667, 1",
 "sum":{"addend":"%693 = fmul double %689, %656",
        "input":"%685 = load double, double* %684, align 8, !tbaa !5",
        "value":"%694 = fadd double %685, %693"}}
END AXPY
BEGIN stencil
{"begin":"%661 = add i64 %147, %658",
 "body":{"begin":"%680 = add i64 %671, %677",
         "end":"br label %676",
         "precursor":"br i1 %678, label %696, label %679",
         "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
 "end":"br label %657",
 "iterator":
 ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
  "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
  "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
 "kernel":{"constants":
           [{"use":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%681 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %680",
             "value":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%692 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%686 = fmul double %60, %685",
             "value":"%60 = fdiv double 1.000000e+00, %32"},
            {"use":"%688 = getelementptr double, double* %76, i64 %687",
             "value":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%693 = fmul double %689, %656",
             "value":"%656 = load double, double* @dtime, align 8"}],
           "input":
           ["%682 = load double, double* %681, align 8, !tbaa !5",
            "%685 = load double, double* %684, align 8, !tbaa !5",
            "%689 = load double, double* %688, align 8, !tbaa !5"],
           "origin":
           ["br i1 %678, label %696, label %679"],
           "output":"%691 = fmul double %682, %690",
           "restrictions":
           [{"use":"%680 = add i64 %671, %677",
             "value":"%671 = mul i64 %670, 5"},
            {"use":"%683 = add i64 %673, %677",
             "value":"%673 = mul i64 %672, 5"},
            {"use":"%687 = add i64 %675, %677",
             "value":"%675 = mul i64 %674, 5"},
            {"use":"%680 = add i64 %671, %677",
             "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
            {"use":"%683 = add i64 %673, %677",
             "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
            {"use":"%687 = add i64 %675, %677",
             "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
            {"use":"%695 = add nuw nsw i64 %677, 1",
             "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}]},
 "loop":
 [{"begin":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
   "body":{"begin":"%661 = add i64 %147, %658",
           "end":"br label %657",
           "precursor":"br i1 %659, label %700, label %660",
           "successor":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
   "comparison":"%659 = icmp eq i64 %658, 5",
   "end":"br i1 %659, label %700, label %660",
   "increment":"%699 = add nuw nsw i64 %658, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "precursor":"br label %657",
   "successor":"%701 = add nuw i64 %86, 1"},
  {"begin":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
   "body":{"begin":"%670 = add i64 %662, %667",
           "end":"br label %666",
           "precursor":"br i1 %668, label %698, label %669",
           "successor":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
   "comparison":"%668 = icmp eq i64 %667, 5",
   "end":"br i1 %668, label %698, label %669",
   "increment":"%697 = add nuw nsw i64 %667, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
   "post_sese":{"begin":"%699 = add nuw nsw i64 %658, 1",
                "end":"br label %657",
                "precursor":"br i1 %668, label %698, label %669",
                "successor":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
   "pre_sese":{"begin":"%661 = add i64 %147, %658",
               "end":"br label %666",
               "precursor":"br i1 %659, label %700, label %660",
               "successor":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
   "precursor":"br label %666",
   "successor":"%699 = add nuw nsw i64 %658, 1"},
  {"begin":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
   "body":{"begin":"%680 = add i64 %671, %677",
           "end":"br label %676",
           "precursor":"br i1 %678, label %696, label %679",
           "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
   "comparison":"%678 = icmp eq i64 %677, 5",
   "end":"br i1 %678, label %696, label %679",
   "increment":"%695 = add nuw nsw i64 %677, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
   "post_sese":{"begin":"%697 = add nuw nsw i64 %667, 1",
                "end":"br label %666",
                "precursor":"br i1 %678, label %696, label %679",
                "successor":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
   "pre_sese":{"begin":"%670 = add i64 %662, %667",
               "end":"br label %676",
               "precursor":"br i1 %668, label %698, label %669",
               "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
   "precursor":"br label %676",
   "successor":"%697 = add nuw nsw i64 %667, 1"}],
 "precursor":"br i1 %659, label %700, label %660",
 "reads":
 [{"address":"%681 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %680",
   "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
     "value":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
    {"input":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
     "value":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
    {"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
     "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
   "input_index":
   ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
    "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
    "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
   "read":{"address":"%681 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %680",
           "base_index":"%147 = mul i64 %145, 5",
           "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%147 = mul i64 %145, 5",
             "input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
             "value":"%661 = add i64 %147, %658"},
            {"addend":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
             "input":"%662 = mul i64 %661, 5",
             "value":"%670 = add i64 %662, %667"},
            {"addend":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
             "input":"%671 = mul i64 %670, 5",
             "value":"%680 = add i64 %671, %677"}],
           "input_index":
           ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
            "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
            "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
           "offset_add":{"input":"%680 = add i64 %671, %677",
                         "value":"%680 = add i64 %671, %677"},
           "output_index":"%680 = add i64 %671, %677",
           "stride_mul":
           [{"input":"%661 = add i64 %147, %658",
             "multiplier":"i64 5",
             "value":"%662 = mul i64 %661, 5"},
            {"input":"%670 = add i64 %662, %667",
             "multiplier":"i64 5",
             "value":"%671 = mul i64 %670, 5"},
            {"input":"%680 = add i64 %671, %677",
             "value":"%680 = add i64 %671, %677"}]}},
  {"address":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
     "value":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
    {"input":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
     "value":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
    {"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
     "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
   "input_index":
   ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
    "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
    "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
   "read":{"address":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
           "base_index":"%146 = mul i64 %86, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%146 = mul i64 %86, 5",
             "input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
             "value":"%663 = add i64 %146, %658"},
            {"addend":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
             "input":"%664 = mul i64 %663, 5",
             "value":"%672 = add i64 %664, %667"},
            {"addend":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
             "input":"%673 = mul i64 %672, 5",
             "value":"%683 = add i64 %673, %677"}],
           "input_index":
           ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
            "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
            "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
           "offset_add":{"input":"%683 = add i64 %673, %677",
                         "value":"%683 = add i64 %673, %677"},
           "output_index":"%683 = add i64 %673, %677",
           "stride_mul":
           [{"input":"%663 = add i64 %146, %658",
             "multiplier":"i64 5",
             "value":"%664 = mul i64 %663, 5"},
            {"input":"%672 = add i64 %664, %667",
             "multiplier":"i64 5",
             "value":"%673 = mul i64 %672, 5"},
            {"input":"%683 = add i64 %673, %677",
             "value":"%683 = add i64 %673, %677"}]}},
  {"address":"%688 = getelementptr double, double* %76, i64 %687",
   "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
   "index":
   [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
     "value":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
    {"input":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
     "value":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
    {"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
     "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
   "input_index":
   ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
    "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
    "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
   "read":{"address":"%688 = getelementptr double, double* %76, i64 %687",
           "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
           "index_add":
           [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
             "value":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
            {"addend":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
             "input":"%665 = mul i64 %658, 5",
             "value":"%674 = add i64 %665, %667"},
            {"addend":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
             "input":"%675 = mul i64 %674, 5",
             "value":"%687 = add i64 %675, %677"}],
           "input_index":
           ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
            "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
            "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
           "offset_add":{"input":"%687 = add i64 %675, %677",
                         "value":"%687 = add i64 %675, %677"},
           "output_index":"%687 = add i64 %675, %677",
           "stride_mul":
           [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
             "multiplier":"i64 5",
             "value":"%665 = mul i64 %658, 5"},
            {"input":"%674 = add i64 %665, %667",
             "multiplier":"i64 5",
             "value":"%675 = mul i64 %674, 5"},
            {"input":"%687 = add i64 %675, %677",
             "value":"%687 = add i64 %675, %677"}]}}],
 "successor":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
 "write":{"address":"%692 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
          "base_index":"%146 = mul i64 %86, 5",
          "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%146 = mul i64 %86, 5",
            "input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
            "value":"%663 = add i64 %146, %658"},
           {"addend":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
            "input":"%664 = mul i64 %663, 5",
            "value":"%672 = add i64 %664, %667"},
           {"addend":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
            "input":"%673 = mul i64 %672, 5",
            "value":"%683 = add i64 %673, %677"}],
          "input_index":
          ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
           "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
           "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
          "offset_add":{"input":"%683 = add i64 %673, %677",
                        "value":"%683 = add i64 %673, %677"},
          "output_index":"%683 = add i64 %673, %677",
          "store":"store double %691, double* %692, align 8, !tbaa !5",
          "stride_mul":
          [{"input":"%663 = add i64 %146, %658",
            "multiplier":"i64 5",
            "value":"%664 = mul i64 %663, 5"},
           {"input":"%672 = add i64 %664, %667",
            "multiplier":"i64 5",
            "value":"%673 = mul i64 %672, 5"},
           {"input":"%683 = add i64 %673, %677",
            "value":"%683 = add i64 %673, %677"}]}}
END stencil
BEGIN stencil
{"begin":"%661 = add i64 %147, %658",
 "body":{"begin":"%680 = add i64 %671, %677",
         "end":"br label %676",
         "precursor":"br i1 %678, label %696, label %679",
         "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
 "end":"br label %657",
 "iterator":
 ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
  "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
  "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
 "kernel":{"constants":
           [{"use":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%681 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %680",
             "value":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%692 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
             "value":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @trhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%686 = fmul double %60, %685",
             "value":"%60 = fdiv double 1.000000e+00, %32"},
            {"use":"%688 = getelementptr double, double* %76, i64 %687",
             "value":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0"},
            {"use":"%693 = fmul double %689, %656",
             "value":"%656 = load double, double* @dtime, align 8"}],
           "input":
           ["%682 = load double, double* %681, align 8, !tbaa !5",
            "%685 = load double, double* %684, align 8, !tbaa !5",
            "%689 = load double, double* %688, align 8, !tbaa !5"],
           "origin":
           ["br i1 %678, label %696, label %679"],
           "output":"%694 = fadd double %685, %693",
           "restrictions":
           [{"use":"%680 = add i64 %671, %677",
             "value":"%671 = mul i64 %670, 5"},
            {"use":"%683 = add i64 %673, %677",
             "value":"%673 = mul i64 %672, 5"},
            {"use":"%687 = add i64 %675, %677",
             "value":"%675 = mul i64 %674, 5"},
            {"use":"%680 = add i64 %671, %677",
             "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
            {"use":"%683 = add i64 %673, %677",
             "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
            {"use":"%687 = add i64 %675, %677",
             "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
            {"use":"%695 = add nuw nsw i64 %677, 1",
             "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}]},
 "loop":
 [{"begin":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
   "body":{"begin":"%661 = add i64 %147, %658",
           "end":"br label %657",
           "precursor":"br i1 %659, label %700, label %660",
           "successor":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
   "comparison":"%659 = icmp eq i64 %658, 5",
   "end":"br i1 %659, label %700, label %660",
   "increment":"%699 = add nuw nsw i64 %658, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "precursor":"br label %657",
   "successor":"%701 = add nuw i64 %86, 1"},
  {"begin":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
   "body":{"begin":"%670 = add i64 %662, %667",
           "end":"br label %666",
           "precursor":"br i1 %668, label %698, label %669",
           "successor":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
   "comparison":"%668 = icmp eq i64 %667, 5",
   "end":"br i1 %668, label %698, label %669",
   "increment":"%697 = add nuw nsw i64 %667, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
   "post_sese":{"begin":"%699 = add nuw nsw i64 %658, 1",
                "end":"br label %657",
                "precursor":"br i1 %668, label %698, label %669",
                "successor":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
   "pre_sese":{"begin":"%661 = add i64 %147, %658",
               "end":"br label %666",
               "precursor":"br i1 %659, label %700, label %660",
               "successor":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
   "precursor":"br label %666",
   "successor":"%699 = add nuw nsw i64 %658, 1"},
  {"begin":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
   "body":{"begin":"%680 = add i64 %671, %677",
           "end":"br label %676",
           "precursor":"br i1 %678, label %696, label %679",
           "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
   "comparison":"%678 = icmp eq i64 %677, 5",
   "end":"br i1 %678, label %696, label %679",
   "increment":"%695 = add nuw nsw i64 %677, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
   "post_sese":{"begin":"%697 = add nuw nsw i64 %667, 1",
                "end":"br label %666",
                "precursor":"br i1 %678, label %696, label %679",
                "successor":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
   "pre_sese":{"begin":"%670 = add i64 %662, %667",
               "end":"br label %676",
               "precursor":"br i1 %668, label %698, label %669",
               "successor":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"},
   "precursor":"br label %676",
   "successor":"%697 = add nuw nsw i64 %667, 1"}],
 "precursor":"br i1 %659, label %700, label %660",
 "reads":
 [{"address":"%681 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %680",
   "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
     "value":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
    {"input":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
     "value":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
    {"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
     "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
   "input_index":
   ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
    "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
    "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
   "read":{"address":"%681 = getelementptr double, double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %680",
           "base_index":"%147 = mul i64 %145, 5",
           "base_pointer":"double* getelementptr inbounds ([6 x [5 x [5 x [5 x double]]]], [6 x [5 x [5 x [5 x double]]]]* @bm1_s, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%147 = mul i64 %145, 5",
             "input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
             "value":"%661 = add i64 %147, %658"},
            {"addend":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
             "input":"%662 = mul i64 %661, 5",
             "value":"%670 = add i64 %662, %667"},
            {"addend":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
             "input":"%671 = mul i64 %670, 5",
             "value":"%680 = add i64 %671, %677"}],
           "input_index":
           ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
            "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
            "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
           "offset_add":{"input":"%680 = add i64 %671, %677",
                         "value":"%680 = add i64 %671, %677"},
           "output_index":"%680 = add i64 %671, %677",
           "stride_mul":
           [{"input":"%661 = add i64 %147, %658",
             "multiplier":"i64 5",
             "value":"%662 = mul i64 %661, 5"},
            {"input":"%670 = add i64 %662, %667",
             "multiplier":"i64 5",
             "value":"%671 = mul i64 %670, 5"},
            {"input":"%680 = add i64 %671, %677",
             "value":"%680 = add i64 %671, %677"}]}},
  {"address":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
   "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
     "value":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
    {"input":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
     "value":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
    {"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
     "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
   "input_index":
   ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
    "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
    "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
   "read":{"address":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
           "base_index":"%146 = mul i64 %86, 5",
           "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%146 = mul i64 %86, 5",
             "input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
             "value":"%663 = add i64 %146, %658"},
            {"addend":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
             "input":"%664 = mul i64 %663, 5",
             "value":"%672 = add i64 %664, %667"},
            {"addend":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
             "input":"%673 = mul i64 %672, 5",
             "value":"%683 = add i64 %673, %677"}],
           "input_index":
           ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
            "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
            "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
           "offset_add":{"input":"%683 = add i64 %673, %677",
                         "value":"%683 = add i64 %673, %677"},
           "output_index":"%683 = add i64 %673, %677",
           "stride_mul":
           [{"input":"%663 = add i64 %146, %658",
             "multiplier":"i64 5",
             "value":"%664 = mul i64 %663, 5"},
            {"input":"%672 = add i64 %664, %667",
             "multiplier":"i64 5",
             "value":"%673 = mul i64 %672, 5"},
            {"input":"%683 = add i64 %673, %677",
             "value":"%683 = add i64 %673, %677"}]}},
  {"address":"%688 = getelementptr double, double* %76, i64 %687",
   "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
   "index":
   [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
     "value":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
    {"input":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
     "value":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]"},
    {"input":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
     "value":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"}],
   "input_index":
   ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
    "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
    "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
   "read":{"address":"%688 = getelementptr double, double* %76, i64 %687",
           "base_pointer":"%76 = getelementptr [5 x [5 x [5 x double]]], [5 x [5 x [5 x double]]]* %2, i64 0, i64 0, i64 0, i64 0",
           "index_add":
           [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
             "value":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]"},
            {"addend":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
             "input":"%665 = mul i64 %658, 5",
             "value":"%674 = add i64 %665, %667"},
            {"addend":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
             "input":"%675 = mul i64 %674, 5",
             "value":"%687 = add i64 %675, %677"}],
           "input_index":
           ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
            "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
            "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
           "offset_add":{"input":"%687 = add i64 %675, %677",
                         "value":"%687 = add i64 %675, %677"},
           "output_index":"%687 = add i64 %675, %677",
           "stride_mul":
           [{"input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
             "multiplier":"i64 5",
             "value":"%665 = mul i64 %658, 5"},
            {"input":"%674 = add i64 %665, %667",
             "multiplier":"i64 5",
             "value":"%675 = mul i64 %674, 5"},
            {"input":"%687 = add i64 %675, %677",
             "value":"%687 = add i64 %675, %677"}]}}],
 "successor":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
 "write":{"address":"%684 = getelementptr double, double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %683",
          "base_index":"%146 = mul i64 %86, 5",
          "base_pointer":"double* getelementptr inbounds ([2400 x [5 x [5 x [5 x double]]]], [2400 x [5 x [5 x [5 x double]]]]* @ta1, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%146 = mul i64 %86, 5",
            "input":"%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
            "value":"%663 = add i64 %146, %658"},
           {"addend":"%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
            "input":"%664 = mul i64 %663, 5",
            "value":"%672 = add i64 %664, %667"},
           {"addend":"%677 = phi i64 [ %695, %679 ], [ 0, %669 ]",
            "input":"%673 = mul i64 %672, 5",
            "value":"%683 = add i64 %673, %677"}],
          "input_index":
          ["%658 = phi i64 [ %699, %698 ], [ 0, %655 ]",
           "%667 = phi i64 [ %697, %696 ], [ 0, %660 ]",
           "%677 = phi i64 [ %695, %679 ], [ 0, %669 ]"],
          "offset_add":{"input":"%683 = add i64 %673, %677",
                        "value":"%683 = add i64 %673, %677"},
          "output_index":"%683 = add i64 %673, %677",
          "store":"store double %694, double* %684, align 8, !tbaa !5",
          "stride_mul":
          [{"input":"%663 = add i64 %146, %658",
            "multiplier":"i64 5",
            "value":"%664 = mul i64 %663, 5"},
           {"input":"%672 = add i64 %664, %667",
            "multiplier":"i64 5",
            "value":"%673 = mul i64 %672, 5"},
           {"input":"%683 = add i64 %673, %677",
            "value":"%683 = add i64 %673, %677"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

BEGIN FUNCTION TRANSFORMATION txinvr
BEGIN LOOP
BEGIN stencil
{"begin":"%17 = mul i64 %14, 65",
 "body":{"begin":"%28 = add i64 %23, %25",
         "end":"br label %24",
         "precursor":"br i1 %26, label %84, label %27",
         "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
 "end":"br label %13",
 "iterator":
 ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
  "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
  "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%55 = fdiv double %8, %39",
             "value":"%8 = load double, double* @c2, align 8"},
            {"use":"%67 = fmul double %30, %9",
             "value":"%9 = load double, double* @bt, align 8"}],
           "input":
           ["%30 = load double, double* %29, align 8, !tbaa !7",
            "%32 = load double, double* %31, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%36 = load double, double* %35, align 8, !tbaa !7",
            "%38 = load double, double* %37, align 8, !tbaa !7",
            "%42 = load double, double* %41, align 8, !tbaa !7",
            "%45 = load double, double* %44, align 8, !tbaa !7",
            "%48 = load double, double* %47, align 8, !tbaa !7",
            "%51 = load double, double* %50, align 8, !tbaa !7",
            "%54 = load double, double* %53, align 8, !tbaa !7",
            "%57 = load double, double* %56, align 8, !tbaa !7"],
           "origin":
           ["br i1 %26, label %84, label %27"],
           "output":"%73 = fsub double %42, %66",
           "restrictions":
           [{"use":"%28 = add i64 %23, %25",
             "value":"%23 = mul i64 %22, 65"},
            {"use":"%28 = add i64 %23, %25",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
            {"use":"%83 = add nuw nsw i64 %25, 1",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}]},
 "loop":
 [{"begin":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
   "body":{"begin":"%17 = mul i64 %14, 65",
           "end":"br label %13",
           "precursor":"br i1 %15, label %88, label %16",
           "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "comparison":"%15 = icmp sgt i64 %14, %12",
   "end":"br i1 %15, label %88, label %16",
   "increment":"%87 = add nuw nsw i64 %14, 1",
   "iter_begin":"i64 1",
   "iter_end":"%12 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %13",
   "successor":"%89 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "body":{"begin":"%22 = add i64 %17, %19",
           "end":"br label %18",
           "precursor":"br i1 %20, label %86, label %21",
           "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "comparison":"%20 = icmp sgt i64 %19, %11",
   "end":"br i1 %20, label %86, label %21",
   "increment":"%85 = add nuw nsw i64 %19, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "post_sese":{"begin":"%87 = add nuw nsw i64 %14, 1",
                "end":"br label %13",
                "precursor":"br i1 %20, label %86, label %21",
                "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%17 = mul i64 %14, 65",
               "end":"br label %18",
               "precursor":"br i1 %15, label %88, label %16",
               "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "precursor":"br label %18",
   "successor":"%87 = add nuw nsw i64 %14, 1"},
  {"begin":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "body":{"begin":"%28 = add i64 %23, %25",
           "end":"br label %24",
           "precursor":"br i1 %26, label %84, label %27",
           "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "comparison":"%26 = icmp sgt i64 %25, %10",
   "end":"br i1 %26, label %84, label %27",
   "increment":"%83 = add nuw nsw i64 %25, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "post_sese":{"begin":"%85 = add nuw nsw i64 %19, 1",
                "end":"br label %18",
                "precursor":"br i1 %26, label %84, label %27",
                "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "pre_sese":{"begin":"%22 = add i64 %17, %19",
               "end":"br label %24",
               "precursor":"br i1 %20, label %86, label %21",
               "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "precursor":"br label %24",
   "successor":"%85 = add nuw nsw i64 %19, 1"}],
 "precursor":"br i1 %15, label %88, label %16",
 "reads":
 [{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%40 = mul i64 %28, 5",
                         "value":"%40 = mul i64 %28, 5"},
           "output_index":"%40 = mul i64 %28, 5",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%43 = add i64 %40, 1"},
           "output_index":"%43 = add i64 %40, 1",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%46 = add i64 %40, 2"},
           "output_index":"%46 = add i64 %40, 2",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%49 = add i64 %40, 3"},
           "output_index":"%49 = add i64 %40, 3",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 4",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%52 = add i64 %40, 4"},
           "output_index":"%52 = add i64 %40, 4",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}}],
 "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
 "write":{"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
           {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "input":"%17 = mul i64 %14, 65",
            "value":"%22 = add i64 %17, %19"},
           {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
            "input":"%23 = mul i64 %22, 65",
            "value":"%28 = add i64 %23, %25"}],
          "input_index":
          ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
           "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
           "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
          "offset_add":{"input":"%40 = mul i64 %28, 5",
                        "value":"%40 = mul i64 %28, 5"},
          "output_index":"%40 = mul i64 %28, 5",
          "store":"store double %73, double* %41, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "multiplier":"i64 65",
            "value":"%17 = mul i64 %14, 65"},
           {"input":"%22 = add i64 %17, %19",
            "multiplier":"i64 65",
            "value":"%23 = mul i64 %22, 65"},
           {"input":"%28 = add i64 %23, %25",
            "multiplier":"i64 5",
            "value":"%40 = mul i64 %28, 5"}]}}
END stencil
BEGIN stencil
{"begin":"%17 = mul i64 %14, 65",
 "body":{"begin":"%28 = add i64 %23, %25",
         "end":"br label %24",
         "precursor":"br i1 %26, label %84, label %27",
         "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
 "end":"br label %13",
 "iterator":
 ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
  "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
  "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%55 = fdiv double %8, %39",
             "value":"%8 = load double, double* @c2, align 8"},
            {"use":"%67 = fmul double %30, %9",
             "value":"%9 = load double, double* @bt, align 8"}],
           "input":
           ["%30 = load double, double* %29, align 8, !tbaa !7",
            "%32 = load double, double* %31, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%36 = load double, double* %35, align 8, !tbaa !7",
            "%38 = load double, double* %37, align 8, !tbaa !7",
            "%42 = load double, double* %41, align 8, !tbaa !7",
            "%45 = load double, double* %44, align 8, !tbaa !7",
            "%48 = load double, double* %47, align 8, !tbaa !7",
            "%51 = load double, double* %50, align 8, !tbaa !7",
            "%54 = load double, double* %53, align 8, !tbaa !7",
            "%57 = load double, double* %56, align 8, !tbaa !7"],
           "origin":
           ["br i1 %26, label %84, label %27"],
           "output":"%77 = fsub double -0.000000e+00, %76",
           "restrictions":
           [{"use":"%28 = add i64 %23, %25",
             "value":"%23 = mul i64 %22, 65"},
            {"use":"%28 = add i64 %23, %25",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
            {"use":"%83 = add nuw nsw i64 %25, 1",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}]},
 "loop":
 [{"begin":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
   "body":{"begin":"%17 = mul i64 %14, 65",
           "end":"br label %13",
           "precursor":"br i1 %15, label %88, label %16",
           "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "comparison":"%15 = icmp sgt i64 %14, %12",
   "end":"br i1 %15, label %88, label %16",
   "increment":"%87 = add nuw nsw i64 %14, 1",
   "iter_begin":"i64 1",
   "iter_end":"%12 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %13",
   "successor":"%89 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "body":{"begin":"%22 = add i64 %17, %19",
           "end":"br label %18",
           "precursor":"br i1 %20, label %86, label %21",
           "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "comparison":"%20 = icmp sgt i64 %19, %11",
   "end":"br i1 %20, label %86, label %21",
   "increment":"%85 = add nuw nsw i64 %19, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "post_sese":{"begin":"%87 = add nuw nsw i64 %14, 1",
                "end":"br label %13",
                "precursor":"br i1 %20, label %86, label %21",
                "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%17 = mul i64 %14, 65",
               "end":"br label %18",
               "precursor":"br i1 %15, label %88, label %16",
               "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "precursor":"br label %18",
   "successor":"%87 = add nuw nsw i64 %14, 1"},
  {"begin":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "body":{"begin":"%28 = add i64 %23, %25",
           "end":"br label %24",
           "precursor":"br i1 %26, label %84, label %27",
           "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "comparison":"%26 = icmp sgt i64 %25, %10",
   "end":"br i1 %26, label %84, label %27",
   "increment":"%83 = add nuw nsw i64 %25, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "post_sese":{"begin":"%85 = add nuw nsw i64 %19, 1",
                "end":"br label %18",
                "precursor":"br i1 %26, label %84, label %27",
                "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "pre_sese":{"begin":"%22 = add i64 %17, %19",
               "end":"br label %24",
               "precursor":"br i1 %20, label %86, label %21",
               "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "precursor":"br label %24",
   "successor":"%85 = add nuw nsw i64 %19, 1"}],
 "precursor":"br i1 %15, label %88, label %16",
 "reads":
 [{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%40 = mul i64 %28, 5",
                         "value":"%40 = mul i64 %28, 5"},
           "output_index":"%40 = mul i64 %28, 5",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%43 = add i64 %40, 1"},
           "output_index":"%43 = add i64 %40, 1",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%46 = add i64 %40, 2"},
           "output_index":"%46 = add i64 %40, 2",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%49 = add i64 %40, 3"},
           "output_index":"%49 = add i64 %40, 3",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 4",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%52 = add i64 %40, 4"},
           "output_index":"%52 = add i64 %40, 4",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}}],
 "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
 "write":{"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
           {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "input":"%17 = mul i64 %14, 65",
            "value":"%22 = add i64 %17, %19"},
           {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
            "input":"%23 = mul i64 %22, 65",
            "value":"%28 = add i64 %23, %25"}],
          "input_index":
          ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
           "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
           "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
          "offset_add":{"addend":"i64 1",
                        "input":"%40 = mul i64 %28, 5",
                        "value":"%43 = add i64 %40, 1"},
          "output_index":"%43 = add i64 %40, 1",
          "store":"store double %77, double* %44, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "multiplier":"i64 65",
            "value":"%17 = mul i64 %14, 65"},
           {"input":"%22 = add i64 %17, %19",
            "multiplier":"i64 65",
            "value":"%23 = mul i64 %22, 65"},
           {"input":"%28 = add i64 %23, %25",
            "multiplier":"i64 5",
            "value":"%40 = mul i64 %28, 5"}]}}
END stencil
BEGIN stencil
{"begin":"%17 = mul i64 %14, 65",
 "body":{"begin":"%28 = add i64 %23, %25",
         "end":"br label %24",
         "precursor":"br i1 %26, label %84, label %27",
         "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
 "end":"br label %13",
 "iterator":
 ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
  "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
  "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%55 = fdiv double %8, %39",
             "value":"%8 = load double, double* @c2, align 8"},
            {"use":"%67 = fmul double %30, %9",
             "value":"%9 = load double, double* @bt, align 8"}],
           "input":
           ["%30 = load double, double* %29, align 8, !tbaa !7",
            "%32 = load double, double* %31, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%36 = load double, double* %35, align 8, !tbaa !7",
            "%38 = load double, double* %37, align 8, !tbaa !7",
            "%42 = load double, double* %41, align 8, !tbaa !7",
            "%45 = load double, double* %44, align 8, !tbaa !7",
            "%48 = load double, double* %47, align 8, !tbaa !7",
            "%51 = load double, double* %50, align 8, !tbaa !7",
            "%54 = load double, double* %53, align 8, !tbaa !7",
            "%57 = load double, double* %56, align 8, !tbaa !7"],
           "origin":
           ["br i1 %26, label %84, label %27"],
           "output":"%80 = fmul double %30, %79",
           "restrictions":
           [{"use":"%28 = add i64 %23, %25",
             "value":"%23 = mul i64 %22, 65"},
            {"use":"%28 = add i64 %23, %25",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
            {"use":"%83 = add nuw nsw i64 %25, 1",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}]},
 "loop":
 [{"begin":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
   "body":{"begin":"%17 = mul i64 %14, 65",
           "end":"br label %13",
           "precursor":"br i1 %15, label %88, label %16",
           "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "comparison":"%15 = icmp sgt i64 %14, %12",
   "end":"br i1 %15, label %88, label %16",
   "increment":"%87 = add nuw nsw i64 %14, 1",
   "iter_begin":"i64 1",
   "iter_end":"%12 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %13",
   "successor":"%89 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "body":{"begin":"%22 = add i64 %17, %19",
           "end":"br label %18",
           "precursor":"br i1 %20, label %86, label %21",
           "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "comparison":"%20 = icmp sgt i64 %19, %11",
   "end":"br i1 %20, label %86, label %21",
   "increment":"%85 = add nuw nsw i64 %19, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "post_sese":{"begin":"%87 = add nuw nsw i64 %14, 1",
                "end":"br label %13",
                "precursor":"br i1 %20, label %86, label %21",
                "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%17 = mul i64 %14, 65",
               "end":"br label %18",
               "precursor":"br i1 %15, label %88, label %16",
               "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "precursor":"br label %18",
   "successor":"%87 = add nuw nsw i64 %14, 1"},
  {"begin":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "body":{"begin":"%28 = add i64 %23, %25",
           "end":"br label %24",
           "precursor":"br i1 %26, label %84, label %27",
           "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "comparison":"%26 = icmp sgt i64 %25, %10",
   "end":"br i1 %26, label %84, label %27",
   "increment":"%83 = add nuw nsw i64 %25, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "post_sese":{"begin":"%85 = add nuw nsw i64 %19, 1",
                "end":"br label %18",
                "precursor":"br i1 %26, label %84, label %27",
                "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "pre_sese":{"begin":"%22 = add i64 %17, %19",
               "end":"br label %24",
               "precursor":"br i1 %20, label %86, label %21",
               "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "precursor":"br label %24",
   "successor":"%85 = add nuw nsw i64 %19, 1"}],
 "precursor":"br i1 %15, label %88, label %16",
 "reads":
 [{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%40 = mul i64 %28, 5",
                         "value":"%40 = mul i64 %28, 5"},
           "output_index":"%40 = mul i64 %28, 5",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%43 = add i64 %40, 1"},
           "output_index":"%43 = add i64 %40, 1",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%46 = add i64 %40, 2"},
           "output_index":"%46 = add i64 %40, 2",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%49 = add i64 %40, 3"},
           "output_index":"%49 = add i64 %40, 3",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 4",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%52 = add i64 %40, 4"},
           "output_index":"%52 = add i64 %40, 4",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}}],
 "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
 "write":{"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
           {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "input":"%17 = mul i64 %14, 65",
            "value":"%22 = add i64 %17, %19"},
           {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
            "input":"%23 = mul i64 %22, 65",
            "value":"%28 = add i64 %23, %25"}],
          "input_index":
          ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
           "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
           "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
          "offset_add":{"addend":"i64 2",
                        "input":"%40 = mul i64 %28, 5",
                        "value":"%46 = add i64 %40, 2"},
          "output_index":"%46 = add i64 %40, 2",
          "store":"store double %80, double* %47, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "multiplier":"i64 65",
            "value":"%17 = mul i64 %14, 65"},
           {"input":"%22 = add i64 %17, %19",
            "multiplier":"i64 65",
            "value":"%23 = mul i64 %22, 65"},
           {"input":"%28 = add i64 %23, %25",
            "multiplier":"i64 5",
            "value":"%40 = mul i64 %28, 5"}]}}
END stencil
BEGIN stencil
{"begin":"%17 = mul i64 %14, 65",
 "body":{"begin":"%28 = add i64 %23, %25",
         "end":"br label %24",
         "precursor":"br i1 %26, label %84, label %27",
         "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
 "end":"br label %13",
 "iterator":
 ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
  "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
  "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%55 = fdiv double %8, %39",
             "value":"%8 = load double, double* @c2, align 8"},
            {"use":"%67 = fmul double %30, %9",
             "value":"%9 = load double, double* @bt, align 8"}],
           "input":
           ["%30 = load double, double* %29, align 8, !tbaa !7",
            "%32 = load double, double* %31, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%36 = load double, double* %35, align 8, !tbaa !7",
            "%38 = load double, double* %37, align 8, !tbaa !7",
            "%42 = load double, double* %41, align 8, !tbaa !7",
            "%45 = load double, double* %44, align 8, !tbaa !7",
            "%48 = load double, double* %47, align 8, !tbaa !7",
            "%51 = load double, double* %50, align 8, !tbaa !7",
            "%54 = load double, double* %53, align 8, !tbaa !7",
            "%57 = load double, double* %56, align 8, !tbaa !7"],
           "origin":
           ["br i1 %26, label %84, label %27"],
           "output":"%81 = fsub double %72, %70",
           "restrictions":
           [{"use":"%28 = add i64 %23, %25",
             "value":"%23 = mul i64 %22, 65"},
            {"use":"%28 = add i64 %23, %25",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
            {"use":"%83 = add nuw nsw i64 %25, 1",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}]},
 "loop":
 [{"begin":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
   "body":{"begin":"%17 = mul i64 %14, 65",
           "end":"br label %13",
           "precursor":"br i1 %15, label %88, label %16",
           "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "comparison":"%15 = icmp sgt i64 %14, %12",
   "end":"br i1 %15, label %88, label %16",
   "increment":"%87 = add nuw nsw i64 %14, 1",
   "iter_begin":"i64 1",
   "iter_end":"%12 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %13",
   "successor":"%89 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "body":{"begin":"%22 = add i64 %17, %19",
           "end":"br label %18",
           "precursor":"br i1 %20, label %86, label %21",
           "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "comparison":"%20 = icmp sgt i64 %19, %11",
   "end":"br i1 %20, label %86, label %21",
   "increment":"%85 = add nuw nsw i64 %19, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "post_sese":{"begin":"%87 = add nuw nsw i64 %14, 1",
                "end":"br label %13",
                "precursor":"br i1 %20, label %86, label %21",
                "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%17 = mul i64 %14, 65",
               "end":"br label %18",
               "precursor":"br i1 %15, label %88, label %16",
               "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "precursor":"br label %18",
   "successor":"%87 = add nuw nsw i64 %14, 1"},
  {"begin":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "body":{"begin":"%28 = add i64 %23, %25",
           "end":"br label %24",
           "precursor":"br i1 %26, label %84, label %27",
           "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "comparison":"%26 = icmp sgt i64 %25, %10",
   "end":"br i1 %26, label %84, label %27",
   "increment":"%83 = add nuw nsw i64 %25, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "post_sese":{"begin":"%85 = add nuw nsw i64 %19, 1",
                "end":"br label %18",
                "precursor":"br i1 %26, label %84, label %27",
                "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "pre_sese":{"begin":"%22 = add i64 %17, %19",
               "end":"br label %24",
               "precursor":"br i1 %20, label %86, label %21",
               "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "precursor":"br label %24",
   "successor":"%85 = add nuw nsw i64 %19, 1"}],
 "precursor":"br i1 %15, label %88, label %16",
 "reads":
 [{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%40 = mul i64 %28, 5",
                         "value":"%40 = mul i64 %28, 5"},
           "output_index":"%40 = mul i64 %28, 5",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%43 = add i64 %40, 1"},
           "output_index":"%43 = add i64 %40, 1",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%46 = add i64 %40, 2"},
           "output_index":"%46 = add i64 %40, 2",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%49 = add i64 %40, 3"},
           "output_index":"%49 = add i64 %40, 3",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 4",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%52 = add i64 %40, 4"},
           "output_index":"%52 = add i64 %40, 4",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}}],
 "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
 "write":{"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
           {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "input":"%17 = mul i64 %14, 65",
            "value":"%22 = add i64 %17, %19"},
           {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
            "input":"%23 = mul i64 %22, 65",
            "value":"%28 = add i64 %23, %25"}],
          "input_index":
          ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
           "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
           "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
          "offset_add":{"addend":"i64 3",
                        "input":"%40 = mul i64 %28, 5",
                        "value":"%49 = add i64 %40, 3"},
          "output_index":"%49 = add i64 %40, 3",
          "store":"store double %81, double* %50, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "multiplier":"i64 65",
            "value":"%17 = mul i64 %14, 65"},
           {"input":"%22 = add i64 %17, %19",
            "multiplier":"i64 65",
            "value":"%23 = mul i64 %22, 65"},
           {"input":"%28 = add i64 %23, %25",
            "multiplier":"i64 5",
            "value":"%40 = mul i64 %28, 5"}]}}
END stencil
BEGIN stencil
{"begin":"%17 = mul i64 %14, 65",
 "body":{"begin":"%28 = add i64 %23, %25",
         "end":"br label %24",
         "precursor":"br i1 %26, label %84, label %27",
         "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
 "end":"br label %13",
 "iterator":
 ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
  "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
  "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%55 = fdiv double %8, %39",
             "value":"%8 = load double, double* @c2, align 8"},
            {"use":"%67 = fmul double %30, %9",
             "value":"%9 = load double, double* @bt, align 8"}],
           "input":
           ["%30 = load double, double* %29, align 8, !tbaa !7",
            "%32 = load double, double* %31, align 8, !tbaa !7",
            "%34 = load double, double* %33, align 8, !tbaa !7",
            "%36 = load double, double* %35, align 8, !tbaa !7",
            "%38 = load double, double* %37, align 8, !tbaa !7",
            "%42 = load double, double* %41, align 8, !tbaa !7",
            "%45 = load double, double* %44, align 8, !tbaa !7",
            "%48 = load double, double* %47, align 8, !tbaa !7",
            "%51 = load double, double* %50, align 8, !tbaa !7",
            "%54 = load double, double* %53, align 8, !tbaa !7",
            "%57 = load double, double* %56, align 8, !tbaa !7"],
           "origin":
           ["br i1 %26, label %84, label %27"],
           "output":"%82 = fadd double %70, %72",
           "restrictions":
           [{"use":"%28 = add i64 %23, %25",
             "value":"%23 = mul i64 %22, 65"},
            {"use":"%28 = add i64 %23, %25",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
            {"use":"%83 = add nuw nsw i64 %25, 1",
             "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}]},
 "loop":
 [{"begin":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
   "body":{"begin":"%17 = mul i64 %14, 65",
           "end":"br label %13",
           "precursor":"br i1 %15, label %88, label %16",
           "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "comparison":"%15 = icmp sgt i64 %14, %12",
   "end":"br i1 %15, label %88, label %16",
   "increment":"%87 = add nuw nsw i64 %14, 1",
   "iter_begin":"i64 1",
   "iter_end":"%12 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %13",
   "successor":"%89 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "body":{"begin":"%22 = add i64 %17, %19",
           "end":"br label %18",
           "precursor":"br i1 %20, label %86, label %21",
           "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "comparison":"%20 = icmp sgt i64 %19, %11",
   "end":"br i1 %20, label %86, label %21",
   "increment":"%85 = add nuw nsw i64 %19, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
   "post_sese":{"begin":"%87 = add nuw nsw i64 %14, 1",
                "end":"br label %13",
                "precursor":"br i1 %20, label %86, label %21",
                "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%17 = mul i64 %14, 65",
               "end":"br label %18",
               "precursor":"br i1 %15, label %88, label %16",
               "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "precursor":"br label %18",
   "successor":"%87 = add nuw nsw i64 %14, 1"},
  {"begin":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "body":{"begin":"%28 = add i64 %23, %25",
           "end":"br label %24",
           "precursor":"br i1 %26, label %84, label %27",
           "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "comparison":"%26 = icmp sgt i64 %25, %10",
   "end":"br i1 %26, label %84, label %27",
   "increment":"%83 = add nuw nsw i64 %25, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
   "post_sese":{"begin":"%85 = add nuw nsw i64 %19, 1",
                "end":"br label %18",
                "precursor":"br i1 %26, label %84, label %27",
                "successor":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
   "pre_sese":{"begin":"%22 = add i64 %17, %19",
               "end":"br label %24",
               "precursor":"br i1 %20, label %86, label %21",
               "successor":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"},
   "precursor":"br label %24",
   "successor":"%85 = add nuw nsw i64 %19, 1"}],
 "precursor":"br i1 %15, label %88, label %16",
 "reads":
 [{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @rho_i, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%31 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @us, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @vs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @ws, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @speed, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}},
  {"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%41 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %40",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%40 = mul i64 %28, 5",
                         "value":"%40 = mul i64 %28, 5"},
           "output_index":"%40 = mul i64 %28, 5",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%44 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %43",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%43 = add i64 %40, 1"},
           "output_index":"%43 = add i64 %40, 1",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%47 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %46",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%46 = add i64 %40, 2"},
           "output_index":"%46 = add i64 %40, 2",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%50 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %49",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%49 = add i64 %40, 3"},
           "output_index":"%49 = add i64 %40, 3",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"addend":"i64 4",
                         "input":"%40 = mul i64 %28, 5",
                         "value":"%52 = add i64 %40, 4"},
           "output_index":"%52 = add i64 %40, 4",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "multiplier":"i64 5",
             "value":"%40 = mul i64 %28, 5"}]}},
  {"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
     "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
    {"input":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
     "value":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]"},
    {"input":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
     "value":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"}],
   "input_index":
   ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
    "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
    "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
   "read":{"address":"%56 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0), i64 %28",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x double]]], [64 x [65 x [65 x double]]]* @qs, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
            {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
             "input":"%17 = mul i64 %14, 65",
             "value":"%22 = add i64 %17, %19"},
            {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
             "input":"%23 = mul i64 %22, 65",
             "value":"%28 = add i64 %23, %25"}],
           "input_index":
           ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
           "offset_add":{"input":"%28 = add i64 %23, %25",
                         "value":"%28 = add i64 %23, %25"},
           "output_index":"%28 = add i64 %23, %25",
           "stride_mul":
           [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%17 = mul i64 %14, 65"},
            {"input":"%22 = add i64 %17, %19",
             "multiplier":"i64 65",
             "value":"%23 = mul i64 %22, 65"},
            {"input":"%28 = add i64 %23, %25",
             "value":"%28 = add i64 %23, %25"}]}}],
 "successor":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
 "write":{"address":"%53 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %52",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "value":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]"},
           {"addend":"%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
            "input":"%17 = mul i64 %14, 65",
            "value":"%22 = add i64 %17, %19"},
           {"addend":"%25 = phi i64 [ %83, %27 ], [ 1, %21 ]",
            "input":"%23 = mul i64 %22, 65",
            "value":"%28 = add i64 %23, %25"}],
          "input_index":
          ["%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
           "%19 = phi i64 [ %85, %84 ], [ 1, %16 ]",
           "%25 = phi i64 [ %83, %27 ], [ 1, %21 ]"],
          "offset_add":{"addend":"i64 4",
                        "input":"%40 = mul i64 %28, 5",
                        "value":"%52 = add i64 %40, 4"},
          "output_index":"%52 = add i64 %40, 4",
          "store":"store double %82, double* %53, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%14 = phi i64 [ %87, %86 ], [ 1, %4 ]",
            "multiplier":"i64 65",
            "value":"%17 = mul i64 %14, 65"},
           {"input":"%22 = add i64 %17, %19",
            "multiplier":"i64 65",
            "value":"%23 = mul i64 %22, 65"},
           {"input":"%28 = add i64 %23, %25",
            "multiplier":"i64 5",
            "value":"%40 = mul i64 %28, 5"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

BEGIN FUNCTION TRANSFORMATION initialize
BEGIN LOOP
BEGIN stencil
{"begin":"%15 = mul i64 %12, 65",
 "body":{"begin":"%26 = add i64 %21, %23",
         "end":"br label %22",
         "precursor":"br i1 %24, label %25, label %35",
         "successor":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"},
 "end":"br label %11",
 "iterator":
 ["%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
  "%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
  "%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"],
 "kernel":{"constants":
           [{"use":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%30 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %29",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%32 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %31",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "origin":
           ["br i1 %24, label %25, label %35"],
           "output":"double 1.000000e+00",
           "restrictions":
           [{"use":"%26 = add i64 %21, %23",
             "value":"%21 = mul i64 %20, 65"},
            {"use":"%26 = add i64 %21, %23",
             "value":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"},
            {"use":"%34 = add nuw nsw i64 %23, 1",
             "value":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"}]},
 "loop":
 [{"begin":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
   "body":{"begin":"%15 = mul i64 %12, 65",
           "end":"br label %11",
           "precursor":"br i1 %13, label %14, label %39",
           "successor":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]"},
   "comparison":"%13 = icmp slt i64 %12, %10",
   "end":"br i1 %13, label %14, label %39",
   "increment":"%38 = add nuw nsw i64 %12, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %11",
   "successor":"%40 = getelementptr [2 x [3 x [5 x double]]], [2 x [3 x [5 x double]]]* %1, i64 0, i64 0, i64 0, i64 0"},
  {"begin":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %19, label %37",
           "successor":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]"},
   "comparison":"%18 = icmp slt i64 %17, %9",
   "end":"br i1 %18, label %19, label %37",
   "increment":"%36 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 0",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
   "post_sese":{"begin":"%38 = add nuw nsw i64 %12, 1",
                "end":"br label %11",
                "precursor":"br i1 %18, label %19, label %37",
                "successor":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]"},
   "pre_sese":{"begin":"%15 = mul i64 %12, 65",
               "end":"br label %16",
               "precursor":"br i1 %13, label %14, label %39",
               "successor":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]"},
   "precursor":"br label %16",
   "successor":"%38 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %25, label %35",
           "successor":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"},
   "comparison":"%24 = icmp slt i64 %23, %8",
   "end":"br i1 %24, label %25, label %35",
   "increment":"%34 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 0",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]",
   "post_sese":{"begin":"%36 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %25, label %35",
                "successor":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %19, label %37",
               "successor":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"},
   "precursor":"br label %22",
   "successor":"%36 = add nuw nsw i64 %17, 1"}],
 "precursor":"br i1 %13, label %14, label %39",
 "successor":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
 "write":{"address":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
            "value":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]"},
           {"addend":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
            "input":"%15 = mul i64 %12, 65",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"}],
          "input_index":
          ["%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
           "%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
           "%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"],
          "offset_add":{"input":"%27 = mul i64 %26, 5",
                        "value":"%27 = mul i64 %26, 5"},
          "output_index":"%27 = mul i64 %26, 5",
          "store":"store double 1.000000e+00, double* %28, align 8, !tbaa !6",
          "stride_mul":
          [{"input":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
            "multiplier":"i64 65",
            "value":"%15 = mul i64 %12, 65"},
           {"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "multiplier":"i64 5",
            "value":"%27 = mul i64 %26, 5"}]}}
END stencil
BEGIN stencil
{"begin":"%15 = mul i64 %12, 65",
 "body":{"begin":"%26 = add i64 %21, %23",
         "end":"br label %22",
         "precursor":"br i1 %24, label %25, label %35",
         "successor":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"},
 "end":"br label %11",
 "iterator":
 ["%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
  "%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
  "%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"],
 "kernel":{"constants":
           [{"use":"%28 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %27",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%30 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %29",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%32 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %31",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "origin":
           ["br i1 %24, label %25, label %35"],
           "output":"double 1.000000e+00",
           "restrictions":
           [{"use":"%26 = add i64 %21, %23",
             "value":"%21 = mul i64 %20, 65"},
            {"use":"%26 = add i64 %21, %23",
             "value":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"},
            {"use":"%34 = add nuw nsw i64 %23, 1",
             "value":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"}]},
 "loop":
 [{"begin":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
   "body":{"begin":"%15 = mul i64 %12, 65",
           "end":"br label %11",
           "precursor":"br i1 %13, label %14, label %39",
           "successor":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]"},
   "comparison":"%13 = icmp slt i64 %12, %10",
   "end":"br i1 %13, label %14, label %39",
   "increment":"%38 = add nuw nsw i64 %12, 1",
   "iter_begin":"i64 0",
   "iter_end":"%10 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %11",
   "successor":"%40 = getelementptr [2 x [3 x [5 x double]]], [2 x [3 x [5 x double]]]* %1, i64 0, i64 0, i64 0, i64 0"},
  {"begin":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %19, label %37",
           "successor":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]"},
   "comparison":"%18 = icmp slt i64 %17, %9",
   "end":"br i1 %18, label %19, label %37",
   "increment":"%36 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 0",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
   "post_sese":{"begin":"%38 = add nuw nsw i64 %12, 1",
                "end":"br label %11",
                "precursor":"br i1 %18, label %19, label %37",
                "successor":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]"},
   "pre_sese":{"begin":"%15 = mul i64 %12, 65",
               "end":"br label %16",
               "precursor":"br i1 %13, label %14, label %39",
               "successor":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]"},
   "precursor":"br label %16",
   "successor":"%38 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %25, label %35",
           "successor":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"},
   "comparison":"%24 = icmp slt i64 %23, %8",
   "end":"br i1 %24, label %25, label %35",
   "increment":"%34 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 0",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]",
   "post_sese":{"begin":"%36 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %25, label %35",
                "successor":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %19, label %37",
               "successor":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"},
   "precursor":"br label %22",
   "successor":"%36 = add nuw nsw i64 %17, 1"}],
 "precursor":"br i1 %13, label %14, label %39",
 "successor":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
 "write":{"address":"%32 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %31",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
            "value":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]"},
           {"addend":"%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
            "input":"%15 = mul i64 %12, 65",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %34, %25 ], [ 0, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"}],
          "input_index":
          ["%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
           "%17 = phi i64 [ %36, %35 ], [ 0, %14 ]",
           "%23 = phi i64 [ %34, %25 ], [ 0, %19 ]"],
          "offset_add":{"addend":"i64 4",
                        "input":"%27 = mul i64 %26, 5",
                        "value":"%31 = add i64 %27, 4"},
          "output_index":"%31 = add i64 %27, 4",
          "store":"store double 1.000000e+00, double* %32, align 8, !tbaa !6",
          "stride_mul":
          [{"input":"%12 = phi i64 [ %38, %37 ], [ 0, %0 ]",
            "multiplier":"i64 65",
            "value":"%15 = mul i64 %12, 65"},
           {"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "multiplier":"i64 5",
            "value":"%27 = mul i64 %26, 5"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

BEGIN FUNCTION TRANSFORMATION ninvr
BEGIN LOOP
BEGIN stencil
{"begin":"%16 = mul i64 %13, 65",
 "body":{"begin":"%27 = add i64 %22, %24",
         "end":"br label %23",
         "precursor":"br i1 %25, label %55, label %26",
         "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
 "end":"br label %12",
 "iterator":
 ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
  "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
  "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%45 = fmul double %38, %8",
             "value":"%8 = load double, double* @bt, align 8"},
            {"use":"%51 = fmul double %8, %50",
             "value":"%8 = load double, double* @bt, align 8"}],
           "input":
           ["%35 = load double, double* %34, align 8, !tbaa !7",
            "%38 = load double, double* %37, align 8, !tbaa !7",
            "%41 = load double, double* %40, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %25, label %55, label %26"],
           "output":"%48 = fsub double -0.000000e+00, %35",
           "restrictions":
           [{"use":"%27 = add i64 %22, %24",
             "value":"%22 = mul i64 %21, 65"},
            {"use":"%27 = add i64 %22, %24",
             "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
            {"use":"%54 = add nuw nsw i64 %24, 1",
             "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}]},
 "loop":
 [{"begin":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
   "body":{"begin":"%16 = mul i64 %13, 65",
           "end":"br label %12",
           "precursor":"br i1 %14, label %59, label %15",
           "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
   "comparison":"%14 = icmp sgt i64 %13, %11",
   "end":"br i1 %14, label %59, label %15",
   "increment":"%58 = add nuw nsw i64 %13, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %12",
   "successor":"%60 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
   "body":{"begin":"%21 = add i64 %16, %18",
           "end":"br label %17",
           "precursor":"br i1 %19, label %57, label %20",
           "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "comparison":"%19 = icmp sgt i64 %18, %10",
   "end":"br i1 %19, label %57, label %20",
   "increment":"%56 = add nuw nsw i64 %18, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
   "post_sese":{"begin":"%58 = add nuw nsw i64 %13, 1",
                "end":"br label %12",
                "precursor":"br i1 %19, label %57, label %20",
                "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%16 = mul i64 %13, 65",
               "end":"br label %17",
               "precursor":"br i1 %14, label %59, label %15",
               "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "precursor":"br label %17",
   "successor":"%58 = add nuw nsw i64 %13, 1"},
  {"begin":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
   "body":{"begin":"%27 = add i64 %22, %24",
           "end":"br label %23",
           "precursor":"br i1 %25, label %55, label %26",
           "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
   "comparison":"%25 = icmp sgt i64 %24, %9",
   "end":"br i1 %25, label %55, label %26",
   "increment":"%54 = add nuw nsw i64 %24, 1",
   "iter_begin":"i64 1",
   "iter_end":"%9 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
   "post_sese":{"begin":"%56 = add nuw nsw i64 %18, 1",
                "end":"br label %17",
                "precursor":"br i1 %25, label %55, label %26",
                "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "pre_sese":{"begin":"%21 = add i64 %16, %18",
               "end":"br label %23",
               "precursor":"br i1 %19, label %57, label %20",
               "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
   "precursor":"br label %23",
   "successor":"%56 = add nuw nsw i64 %18, 1"}],
 "precursor":"br i1 %14, label %59, label %15",
 "reads":
 [{"address":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%33 = add i64 %28, 1"},
           "output_index":"%33 = add i64 %28, 1",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%36 = add i64 %28, 2"},
           "output_index":"%36 = add i64 %28, 2",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%39 = add i64 %28, 3"},
           "output_index":"%39 = add i64 %28, 3",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 4",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%42 = add i64 %28, 4"},
           "output_index":"%42 = add i64 %28, 4",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}}],
 "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
 "write":{"address":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %28",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
           {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "input":"%16 = mul i64 %13, 65",
            "value":"%21 = add i64 %16, %18"},
           {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
            "input":"%22 = mul i64 %21, 65",
            "value":"%27 = add i64 %22, %24"}],
          "input_index":
          ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
           "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
           "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
          "offset_add":{"input":"%28 = mul i64 %27, 5",
                        "value":"%28 = mul i64 %27, 5"},
          "output_index":"%28 = mul i64 %27, 5",
          "store":"store double %48, double* %29, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "multiplier":"i64 65",
            "value":"%16 = mul i64 %13, 65"},
           {"input":"%21 = add i64 %16, %18",
            "multiplier":"i64 65",
            "value":"%22 = mul i64 %21, 65"},
           {"input":"%27 = add i64 %22, %24",
            "multiplier":"i64 5",
            "value":"%28 = mul i64 %27, 5"}]}}
END stencil
BEGIN stencil
{"begin":"%16 = mul i64 %13, 65",
 "body":{"begin":"%27 = add i64 %22, %24",
         "end":"br label %23",
         "precursor":"br i1 %25, label %55, label %26",
         "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
 "end":"br label %12",
 "iterator":
 ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
  "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
  "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%45 = fmul double %38, %8",
             "value":"%8 = load double, double* @bt, align 8"},
            {"use":"%51 = fmul double %8, %50",
             "value":"%8 = load double, double* @bt, align 8"}],
           "input":
           ["%35 = load double, double* %34, align 8, !tbaa !7",
            "%38 = load double, double* %37, align 8, !tbaa !7",
            "%41 = load double, double* %40, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %25, label %55, label %26"],
           "output":"%51 = fmul double %8, %50",
           "restrictions":
           [{"use":"%27 = add i64 %22, %24",
             "value":"%22 = mul i64 %21, 65"},
            {"use":"%27 = add i64 %22, %24",
             "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
            {"use":"%54 = add nuw nsw i64 %24, 1",
             "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}]},
 "loop":
 [{"begin":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
   "body":{"begin":"%16 = mul i64 %13, 65",
           "end":"br label %12",
           "precursor":"br i1 %14, label %59, label %15",
           "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
   "comparison":"%14 = icmp sgt i64 %13, %11",
   "end":"br i1 %14, label %59, label %15",
   "increment":"%58 = add nuw nsw i64 %13, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %12",
   "successor":"%60 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
   "body":{"begin":"%21 = add i64 %16, %18",
           "end":"br label %17",
           "precursor":"br i1 %19, label %57, label %20",
           "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "comparison":"%19 = icmp sgt i64 %18, %10",
   "end":"br i1 %19, label %57, label %20",
   "increment":"%56 = add nuw nsw i64 %18, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
   "post_sese":{"begin":"%58 = add nuw nsw i64 %13, 1",
                "end":"br label %12",
                "precursor":"br i1 %19, label %57, label %20",
                "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%16 = mul i64 %13, 65",
               "end":"br label %17",
               "precursor":"br i1 %14, label %59, label %15",
               "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "precursor":"br label %17",
   "successor":"%58 = add nuw nsw i64 %13, 1"},
  {"begin":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
   "body":{"begin":"%27 = add i64 %22, %24",
           "end":"br label %23",
           "precursor":"br i1 %25, label %55, label %26",
           "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
   "comparison":"%25 = icmp sgt i64 %24, %9",
   "end":"br i1 %25, label %55, label %26",
   "increment":"%54 = add nuw nsw i64 %24, 1",
   "iter_begin":"i64 1",
   "iter_end":"%9 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
   "post_sese":{"begin":"%56 = add nuw nsw i64 %18, 1",
                "end":"br label %17",
                "precursor":"br i1 %25, label %55, label %26",
                "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "pre_sese":{"begin":"%21 = add i64 %16, %18",
               "end":"br label %23",
               "precursor":"br i1 %19, label %57, label %20",
               "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
   "precursor":"br label %23",
   "successor":"%56 = add nuw nsw i64 %18, 1"}],
 "precursor":"br i1 %14, label %59, label %15",
 "reads":
 [{"address":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%33 = add i64 %28, 1"},
           "output_index":"%33 = add i64 %28, 1",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%36 = add i64 %28, 2"},
           "output_index":"%36 = add i64 %28, 2",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%39 = add i64 %28, 3"},
           "output_index":"%39 = add i64 %28, 3",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 4",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%42 = add i64 %28, 4"},
           "output_index":"%42 = add i64 %28, 4",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}}],
 "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
 "write":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
           {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "input":"%16 = mul i64 %13, 65",
            "value":"%21 = add i64 %16, %18"},
           {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
            "input":"%22 = mul i64 %21, 65",
            "value":"%27 = add i64 %22, %24"}],
          "input_index":
          ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
           "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
           "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
          "offset_add":{"addend":"i64 2",
                        "input":"%28 = mul i64 %27, 5",
                        "value":"%36 = add i64 %28, 2"},
          "output_index":"%36 = add i64 %28, 2",
          "store":"store double %51, double* %37, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "multiplier":"i64 65",
            "value":"%16 = mul i64 %13, 65"},
           {"input":"%21 = add i64 %16, %18",
            "multiplier":"i64 65",
            "value":"%22 = mul i64 %21, 65"},
           {"input":"%27 = add i64 %22, %24",
            "multiplier":"i64 5",
            "value":"%28 = mul i64 %27, 5"}]}}
END stencil
BEGIN stencil
{"begin":"%16 = mul i64 %13, 65",
 "body":{"begin":"%27 = add i64 %22, %24",
         "end":"br label %23",
         "precursor":"br i1 %25, label %55, label %26",
         "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
 "end":"br label %12",
 "iterator":
 ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
  "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
  "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%45 = fmul double %38, %8",
             "value":"%8 = load double, double* @bt, align 8"},
            {"use":"%51 = fmul double %8, %50",
             "value":"%8 = load double, double* @bt, align 8"}],
           "input":
           ["%35 = load double, double* %34, align 8, !tbaa !7",
            "%38 = load double, double* %37, align 8, !tbaa !7",
            "%41 = load double, double* %40, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %25, label %55, label %26"],
           "output":"%52 = fsub double %47, %45",
           "restrictions":
           [{"use":"%27 = add i64 %22, %24",
             "value":"%22 = mul i64 %21, 65"},
            {"use":"%27 = add i64 %22, %24",
             "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
            {"use":"%54 = add nuw nsw i64 %24, 1",
             "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}]},
 "loop":
 [{"begin":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
   "body":{"begin":"%16 = mul i64 %13, 65",
           "end":"br label %12",
           "precursor":"br i1 %14, label %59, label %15",
           "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
   "comparison":"%14 = icmp sgt i64 %13, %11",
   "end":"br i1 %14, label %59, label %15",
   "increment":"%58 = add nuw nsw i64 %13, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %12",
   "successor":"%60 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
   "body":{"begin":"%21 = add i64 %16, %18",
           "end":"br label %17",
           "precursor":"br i1 %19, label %57, label %20",
           "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "comparison":"%19 = icmp sgt i64 %18, %10",
   "end":"br i1 %19, label %57, label %20",
   "increment":"%56 = add nuw nsw i64 %18, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
   "post_sese":{"begin":"%58 = add nuw nsw i64 %13, 1",
                "end":"br label %12",
                "precursor":"br i1 %19, label %57, label %20",
                "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%16 = mul i64 %13, 65",
               "end":"br label %17",
               "precursor":"br i1 %14, label %59, label %15",
               "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "precursor":"br label %17",
   "successor":"%58 = add nuw nsw i64 %13, 1"},
  {"begin":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
   "body":{"begin":"%27 = add i64 %22, %24",
           "end":"br label %23",
           "precursor":"br i1 %25, label %55, label %26",
           "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
   "comparison":"%25 = icmp sgt i64 %24, %9",
   "end":"br i1 %25, label %55, label %26",
   "increment":"%54 = add nuw nsw i64 %24, 1",
   "iter_begin":"i64 1",
   "iter_end":"%9 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
   "post_sese":{"begin":"%56 = add nuw nsw i64 %18, 1",
                "end":"br label %17",
                "precursor":"br i1 %25, label %55, label %26",
                "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "pre_sese":{"begin":"%21 = add i64 %16, %18",
               "end":"br label %23",
               "precursor":"br i1 %19, label %57, label %20",
               "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
   "precursor":"br label %23",
   "successor":"%56 = add nuw nsw i64 %18, 1"}],
 "precursor":"br i1 %14, label %59, label %15",
 "reads":
 [{"address":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%33 = add i64 %28, 1"},
           "output_index":"%33 = add i64 %28, 1",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%36 = add i64 %28, 2"},
           "output_index":"%36 = add i64 %28, 2",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%39 = add i64 %28, 3"},
           "output_index":"%39 = add i64 %28, 3",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 4",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%42 = add i64 %28, 4"},
           "output_index":"%42 = add i64 %28, 4",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}}],
 "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
 "write":{"address":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
           {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "input":"%16 = mul i64 %13, 65",
            "value":"%21 = add i64 %16, %18"},
           {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
            "input":"%22 = mul i64 %21, 65",
            "value":"%27 = add i64 %22, %24"}],
          "input_index":
          ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
           "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
           "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
          "offset_add":{"addend":"i64 3",
                        "input":"%28 = mul i64 %27, 5",
                        "value":"%39 = add i64 %28, 3"},
          "output_index":"%39 = add i64 %28, 3",
          "store":"store double %52, double* %40, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "multiplier":"i64 65",
            "value":"%16 = mul i64 %13, 65"},
           {"input":"%21 = add i64 %16, %18",
            "multiplier":"i64 65",
            "value":"%22 = mul i64 %21, 65"},
           {"input":"%27 = add i64 %22, %24",
            "multiplier":"i64 5",
            "value":"%28 = mul i64 %27, 5"}]}}
END stencil
BEGIN stencil
{"begin":"%16 = mul i64 %13, 65",
 "body":{"begin":"%27 = add i64 %22, %24",
         "end":"br label %23",
         "precursor":"br i1 %25, label %55, label %26",
         "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
 "end":"br label %12",
 "iterator":
 ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
  "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
  "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
 "kernel":{"constants":
           [{"use":"%29 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %28",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%45 = fmul double %38, %8",
             "value":"%8 = load double, double* @bt, align 8"},
            {"use":"%51 = fmul double %8, %50",
             "value":"%8 = load double, double* @bt, align 8"}],
           "input":
           ["%35 = load double, double* %34, align 8, !tbaa !7",
            "%38 = load double, double* %37, align 8, !tbaa !7",
            "%41 = load double, double* %40, align 8, !tbaa !7",
            "%44 = load double, double* %43, align 8, !tbaa !7"],
           "origin":
           ["br i1 %25, label %55, label %26"],
           "output":"%53 = fadd double %45, %47",
           "restrictions":
           [{"use":"%27 = add i64 %22, %24",
             "value":"%22 = mul i64 %21, 65"},
            {"use":"%27 = add i64 %22, %24",
             "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
            {"use":"%54 = add nuw nsw i64 %24, 1",
             "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}]},
 "loop":
 [{"begin":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
   "body":{"begin":"%16 = mul i64 %13, 65",
           "end":"br label %12",
           "precursor":"br i1 %14, label %59, label %15",
           "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
   "comparison":"%14 = icmp sgt i64 %13, %11",
   "end":"br i1 %14, label %59, label %15",
   "increment":"%58 = add nuw nsw i64 %13, 1",
   "iter_begin":"i64 1",
   "iter_end":"%11 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %12",
   "successor":"%60 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
   "body":{"begin":"%21 = add i64 %16, %18",
           "end":"br label %17",
           "precursor":"br i1 %19, label %57, label %20",
           "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "comparison":"%19 = icmp sgt i64 %18, %10",
   "end":"br i1 %19, label %57, label %20",
   "increment":"%56 = add nuw nsw i64 %18, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
   "post_sese":{"begin":"%58 = add nuw nsw i64 %13, 1",
                "end":"br label %12",
                "precursor":"br i1 %19, label %57, label %20",
                "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%16 = mul i64 %13, 65",
               "end":"br label %17",
               "precursor":"br i1 %14, label %59, label %15",
               "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "precursor":"br label %17",
   "successor":"%58 = add nuw nsw i64 %13, 1"},
  {"begin":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
   "body":{"begin":"%27 = add i64 %22, %24",
           "end":"br label %23",
           "precursor":"br i1 %25, label %55, label %26",
           "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
   "comparison":"%25 = icmp sgt i64 %24, %9",
   "end":"br i1 %25, label %55, label %26",
   "increment":"%54 = add nuw nsw i64 %24, 1",
   "iter_begin":"i64 1",
   "iter_end":"%9 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
   "post_sese":{"begin":"%56 = add nuw nsw i64 %18, 1",
                "end":"br label %17",
                "precursor":"br i1 %25, label %55, label %26",
                "successor":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
   "pre_sese":{"begin":"%21 = add i64 %16, %18",
               "end":"br label %23",
               "precursor":"br i1 %19, label %57, label %20",
               "successor":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"},
   "precursor":"br label %23",
   "successor":"%56 = add nuw nsw i64 %18, 1"}],
 "precursor":"br i1 %14, label %59, label %15",
 "reads":
 [{"address":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%34 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %33",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 1",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%33 = add i64 %28, 1"},
           "output_index":"%33 = add i64 %28, 1",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%37 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %36",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 2",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%36 = add i64 %28, 2"},
           "output_index":"%36 = add i64 %28, 2",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%40 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %39",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 3",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%39 = add i64 %28, 3"},
           "output_index":"%39 = add i64 %28, 3",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}},
  {"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
     "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
    {"input":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
     "value":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]"},
    {"input":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
     "value":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"}],
   "input_index":
   ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
    "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
    "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
   "read":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
            {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
             "input":"%16 = mul i64 %13, 65",
             "value":"%21 = add i64 %16, %18"},
            {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
             "input":"%22 = mul i64 %21, 65",
             "value":"%27 = add i64 %22, %24"}],
           "input_index":
           ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
           "offset_add":{"addend":"i64 4",
                         "input":"%28 = mul i64 %27, 5",
                         "value":"%42 = add i64 %28, 4"},
           "output_index":"%42 = add i64 %28, 4",
           "stride_mul":
           [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
             "multiplier":"i64 65",
             "value":"%16 = mul i64 %13, 65"},
            {"input":"%21 = add i64 %16, %18",
             "multiplier":"i64 65",
             "value":"%22 = mul i64 %21, 65"},
            {"input":"%27 = add i64 %22, %24",
             "multiplier":"i64 5",
             "value":"%28 = mul i64 %27, 5"}]}}],
 "successor":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
 "write":{"address":"%43 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %42",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "value":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]"},
           {"addend":"%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
            "input":"%16 = mul i64 %13, 65",
            "value":"%21 = add i64 %16, %18"},
           {"addend":"%24 = phi i64 [ %54, %26 ], [ 1, %20 ]",
            "input":"%22 = mul i64 %21, 65",
            "value":"%27 = add i64 %22, %24"}],
          "input_index":
          ["%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
           "%18 = phi i64 [ %56, %55 ], [ 1, %15 ]",
           "%24 = phi i64 [ %54, %26 ], [ 1, %20 ]"],
          "offset_add":{"addend":"i64 4",
                        "input":"%28 = mul i64 %27, 5",
                        "value":"%42 = add i64 %28, 4"},
          "output_index":"%42 = add i64 %28, 4",
          "store":"store double %53, double* %43, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%13 = phi i64 [ %58, %57 ], [ 1, %4 ]",
            "multiplier":"i64 65",
            "value":"%16 = mul i64 %13, 65"},
           {"input":"%21 = add i64 %16, %18",
            "multiplier":"i64 65",
            "value":"%22 = mul i64 %21, 65"},
           {"input":"%27 = add i64 %22, %24",
            "multiplier":"i64 5",
            "value":"%28 = mul i64 %27, 5"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

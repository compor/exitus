BEGIN FUNCTION TRANSFORMATION add
BEGIN LOOP
BEGIN AXPY
{"begin":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
 "body":{"begin":"%32 = add i64 %27, %29",
         "end":"br label %28",
         "precursor":"br i1 %30, label %39, label %31",
         "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
 "comparison":"%30 = icmp eq i64 %29, 5",
 "dst":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}],
        "input_index":
        ["%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"addend":"%27 = mul i64 %26, 5",
                      "input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "store":"store double %37, double* %33, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}]},
 "end":"br i1 %30, label %39, label %31",
 "increment":"%38 = add nuw nsw i64 %29, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
 "precursor":"br label %28",
 "src":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}],
        "input_index":
        ["%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"addend":"%27 = mul i64 %26, 5",
                      "input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "stride_mul":
        [{"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}],
        "value":"%36 = load double, double* %35, align 8, !tbaa !7"},
 "successor":"%40 = add nuw nsw i64 %23, 1",
 "sum":{"addend":"%36 = load double, double* %35, align 8, !tbaa !7",
        "input":"%34 = load double, double* %33, align 8, !tbaa !7",
        "value":"%37 = fadd double %34, %36"}}
END AXPY
BEGIN AXPY
{"begin":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
 "body":{"begin":"%32 = add i64 %27, %29",
         "end":"br label %28",
         "precursor":"br i1 %30, label %39, label %31",
         "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
 "comparison":"%30 = icmp eq i64 %29, 5",
 "dst":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_index":"%27 = mul i64 %26, 5",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%27 = mul i64 %26, 5",
          "input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%32 = add i64 %27, %29"}],
        "input_index":
        ["%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"input":"%32 = add i64 %27, %29",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "store":"store double %37, double* %33, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%32 = add i64 %27, %29",
          "value":"%32 = add i64 %27, %29"}]},
 "end":"br i1 %30, label %39, label %31",
 "increment":"%38 = add nuw nsw i64 %29, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
 "precursor":"br label %28",
 "src":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}],
        "input_index":
        ["%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"addend":"%27 = mul i64 %26, 5",
                      "input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "stride_mul":
        [{"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}],
        "value":"%36 = load double, double* %35, align 8, !tbaa !7"},
 "successor":"%40 = add nuw nsw i64 %23, 1",
 "sum":{"addend":"%36 = load double, double* %35, align 8, !tbaa !7",
        "input":"%34 = load double, double* %33, align 8, !tbaa !7",
        "value":"%37 = fadd double %34, %36"}}
END AXPY
BEGIN AXPY
{"begin":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
 "body":{"begin":"%32 = add i64 %27, %29",
         "end":"br label %28",
         "precursor":"br i1 %30, label %39, label %31",
         "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
 "comparison":"%30 = icmp eq i64 %29, 5",
 "dst":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}],
        "input_index":
        ["%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"addend":"%27 = mul i64 %26, 5",
                      "input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "store":"store double %37, double* %33, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}]},
 "end":"br i1 %30, label %39, label %31",
 "increment":"%38 = add nuw nsw i64 %29, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
 "precursor":"br label %28",
 "src":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_index":"%27 = mul i64 %26, 5",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%27 = mul i64 %26, 5",
          "input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%32 = add i64 %27, %29"}],
        "input_index":
        ["%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"input":"%32 = add i64 %27, %29",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "stride_mul":
        [{"input":"%32 = add i64 %27, %29",
          "value":"%32 = add i64 %27, %29"}],
        "value":"%36 = load double, double* %35, align 8, !tbaa !7"},
 "successor":"%40 = add nuw nsw i64 %23, 1",
 "sum":{"addend":"%36 = load double, double* %35, align 8, !tbaa !7",
        "input":"%34 = load double, double* %33, align 8, !tbaa !7",
        "value":"%37 = fadd double %34, %36"}}
END AXPY
BEGIN AXPY
{"begin":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
 "body":{"begin":"%32 = add i64 %27, %29",
         "end":"br label %28",
         "precursor":"br i1 %30, label %39, label %31",
         "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
 "comparison":"%30 = icmp eq i64 %29, 5",
 "dst":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_index":"%27 = mul i64 %26, 5",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%27 = mul i64 %26, 5",
          "input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%32 = add i64 %27, %29"}],
        "input_index":
        ["%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"input":"%32 = add i64 %27, %29",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "store":"store double %37, double* %33, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%32 = add i64 %27, %29",
          "value":"%32 = add i64 %27, %29"}]},
 "end":"br i1 %30, label %39, label %31",
 "increment":"%38 = add nuw nsw i64 %29, 1",
 "iter_begin":"i64 0",
 "iter_end":"i64 5",
 "iter_step":"i64 1",
 "iterator":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
 "precursor":"br label %28",
 "src":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_index":"%27 = mul i64 %26, 5",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"addend":"%27 = mul i64 %26, 5",
          "input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "value":"%32 = add i64 %27, %29"}],
        "input_index":
        ["%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"input":"%32 = add i64 %27, %29",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "stride_mul":
        [{"input":"%32 = add i64 %27, %29",
          "value":"%32 = add i64 %27, %29"}],
        "value":"%36 = load double, double* %35, align 8, !tbaa !7"},
 "successor":"%40 = add nuw nsw i64 %23, 1",
 "sum":{"addend":"%36 = load double, double* %35, align 8, !tbaa !7",
        "input":"%34 = load double, double* %33, align 8, !tbaa !7",
        "value":"%37 = fadd double %34, %36"}}
END AXPY
BEGIN AXPYn
{"begin":"%15 = mul i64 %12, 65",
 "body":{"begin":"%32 = add i64 %27, %29",
         "end":"br label %28",
         "precursor":"br i1 %30, label %39, label %31",
         "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
 "dst":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
          "value":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]"},
         {"addend":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
          "input":"%15 = mul i64 %12, 65",
          "value":"%20 = add i64 %15, %17"},
         {"addend":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
          "input":"%21 = mul i64 %20, 65",
          "value":"%26 = add i64 %21, %23"},
         {"addend":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "input":"%27 = mul i64 %26, 5",
          "value":"%32 = add i64 %27, %29"}],
        "input":
        ["%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
         "%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
         "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
         "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "input_index":
        ["%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
         "%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
         "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
         "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"input":"%32 = add i64 %27, %29",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "store":"store double %37, double* %33, align 8, !tbaa !7",
        "stride_mul":
        [{"input":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
          "multiplier":"i64 65",
          "value":"%15 = mul i64 %12, 65"},
         {"input":"%20 = add i64 %15, %17",
          "multiplier":"i64 65",
          "value":"%21 = mul i64 %20, 65"},
         {"input":"%26 = add i64 %21, %23",
          "multiplier":"i64 5",
          "value":"%27 = mul i64 %26, 5"},
         {"input":"%32 = add i64 %27, %29",
          "value":"%32 = add i64 %27, %29"}]},
 "end":"br label %11",
 "iterator":
 ["%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
  "%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
  "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
  "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
 "loop":
 [{"begin":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
   "body":{"begin":"%15 = mul i64 %12, 65",
           "end":"br label %11",
           "precursor":"br i1 %13, label %45, label %14",
           "successor":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]"},
   "comparison":"%13 = icmp sgt i64 %12, %10",
   "end":"br i1 %13, label %45, label %14",
   "increment":"%44 = add nuw nsw i64 %12, 1",
   "iter_begin":"i64 1",
   "iter_end":"%10 = sext i32 %5 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %11",
   "successor":"%46 = load i32, i32* @timeron, align 4, !tbaa !2"},
  {"begin":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %43, label %19",
           "successor":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]"},
   "comparison":"%18 = icmp sgt i64 %17, %9",
   "end":"br i1 %18, label %43, label %19",
   "increment":"%42 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 1",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "iterator":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
   "post_sese":{"begin":"%44 = add nuw nsw i64 %12, 1",
                "end":"br label %11",
                "precursor":"br i1 %18, label %43, label %19",
                "successor":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]"},
   "pre_sese":{"begin":"%15 = mul i64 %12, 65",
               "end":"br label %16",
               "precursor":"br i1 %13, label %45, label %14",
               "successor":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]"},
   "precursor":"br label %16",
   "successor":"%44 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %41, label %25",
           "successor":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]"},
   "comparison":"%24 = icmp sgt i64 %23, %8",
   "end":"br i1 %24, label %41, label %25",
   "increment":"%40 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 1",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
   "post_sese":{"begin":"%42 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %41, label %25",
                "successor":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %43, label %19",
               "successor":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]"},
   "precursor":"br label %22",
   "successor":"%42 = add nuw nsw i64 %17, 1"},
  {"begin":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
   "body":{"begin":"%32 = add i64 %27, %29",
           "end":"br label %28",
           "precursor":"br i1 %30, label %39, label %31",
           "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
   "comparison":"%30 = icmp eq i64 %29, 5",
   "end":"br i1 %30, label %39, label %31",
   "increment":"%38 = add nuw nsw i64 %29, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
   "post_sese":{"begin":"%40 = add nuw nsw i64 %23, 1",
                "end":"br label %22",
                "precursor":"br i1 %30, label %39, label %31",
                "successor":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]"},
   "pre_sese":{"begin":"%26 = add i64 %21, %23",
               "end":"br label %28",
               "precursor":"br i1 %24, label %41, label %25",
               "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
   "precursor":"br label %28",
   "successor":"%40 = add nuw nsw i64 %23, 1"}],
 "precursor":"br i1 %13, label %45, label %14",
 "src":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
        "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
        "index_add":
        [{"input":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
          "value":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]"},
         {"addend":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
          "input":"%15 = mul i64 %12, 65",
          "value":"%20 = add i64 %15, %17"},
         {"addend":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
          "input":"%21 = mul i64 %20, 65",
          "value":"%26 = add i64 %21, %23"},
         {"addend":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
          "input":"%27 = mul i64 %26, 5",
          "value":"%32 = add i64 %27, %29"}],
        "input":
        ["%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
         "%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
         "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
         "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "input_index":
        ["%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
         "%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
         "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
         "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
        "offset_add":{"input":"%32 = add i64 %27, %29",
                      "value":"%32 = add i64 %27, %29"},
        "output_index":"%32 = add i64 %27, %29",
        "stride_mul":
        [{"input":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
          "multiplier":"i64 65",
          "value":"%15 = mul i64 %12, 65"},
         {"input":"%20 = add i64 %15, %17",
          "multiplier":"i64 65",
          "value":"%21 = mul i64 %20, 65"},
         {"input":"%26 = add i64 %21, %23",
          "multiplier":"i64 5",
          "value":"%27 = mul i64 %26, 5"},
         {"input":"%32 = add i64 %27, %29",
          "value":"%32 = add i64 %27, %29"}],
        "value":"%36 = load double, double* %35, align 8, !tbaa !7"},
 "successor":"%12 = phi i64 [ %44, %43 ], [ 1, %4 ]",
 "sum":{"addend":"%36 = load double, double* %35, align 8, !tbaa !7",
        "input":"%34 = load double, double* %33, align 8, !tbaa !7",
        "value":"%37 = fadd double %34, %36"}}
END AXPYn
BEGIN stencil
{"begin":"%20 = add i64 %15, %17",
 "body":{"begin":"%32 = add i64 %27, %29",
         "end":"br label %28",
         "precursor":"br i1 %30, label %39, label %31",
         "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
 "end":"br label %16",
 "iterator":
 ["%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
  "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
  "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
 "kernel":{"constants":
           [{"use":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)"},
            {"use":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
             "value":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)"}],
           "input":
           ["%34 = load double, double* %33, align 8, !tbaa !7",
            "%36 = load double, double* %35, align 8, !tbaa !7"],
           "origin":
           ["br i1 %30, label %39, label %31"],
           "output":"%37 = fadd double %34, %36",
           "restrictions":
           [{"use":"%32 = add i64 %27, %29",
             "value":"%27 = mul i64 %26, 5"},
            {"use":"%32 = add i64 %27, %29",
             "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
            {"use":"%38 = add nuw nsw i64 %29, 1",
             "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}]},
 "loop":
 [{"begin":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
   "body":{"begin":"%20 = add i64 %15, %17",
           "end":"br label %16",
           "precursor":"br i1 %18, label %43, label %19",
           "successor":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]"},
   "comparison":"%18 = icmp sgt i64 %17, %9",
   "end":"br i1 %18, label %43, label %19",
   "increment":"%42 = add nuw nsw i64 %17, 1",
   "iter_begin":"i64 1",
   "iter_end":"%9 = sext i32 %6 to i64",
   "iter_step":"i64 1",
   "precursor":"br label %16",
   "successor":"%44 = add nuw nsw i64 %12, 1"},
  {"begin":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
   "body":{"begin":"%26 = add i64 %21, %23",
           "end":"br label %22",
           "precursor":"br i1 %24, label %41, label %25",
           "successor":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]"},
   "comparison":"%24 = icmp sgt i64 %23, %8",
   "end":"br i1 %24, label %41, label %25",
   "increment":"%40 = add nuw nsw i64 %23, 1",
   "iter_begin":"i64 1",
   "iter_end":"%8 = sext i32 %7 to i64",
   "iter_step":"i64 1",
   "iterator":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
   "post_sese":{"begin":"%42 = add nuw nsw i64 %17, 1",
                "end":"br label %16",
                "precursor":"br i1 %24, label %41, label %25",
                "successor":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]"},
   "pre_sese":{"begin":"%20 = add i64 %15, %17",
               "end":"br label %22",
               "precursor":"br i1 %18, label %43, label %19",
               "successor":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]"},
   "precursor":"br label %22",
   "successor":"%42 = add nuw nsw i64 %17, 1"},
  {"begin":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
   "body":{"begin":"%32 = add i64 %27, %29",
           "end":"br label %28",
           "precursor":"br i1 %30, label %39, label %31",
           "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
   "comparison":"%30 = icmp eq i64 %29, 5",
   "end":"br i1 %30, label %39, label %31",
   "increment":"%38 = add nuw nsw i64 %29, 1",
   "iter_begin":"i64 0",
   "iter_end":"i64 5",
   "iter_step":"i64 1",
   "iterator":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
   "post_sese":{"begin":"%40 = add nuw nsw i64 %23, 1",
                "end":"br label %22",
                "precursor":"br i1 %30, label %39, label %31",
                "successor":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]"},
   "pre_sese":{"begin":"%26 = add i64 %21, %23",
               "end":"br label %28",
               "precursor":"br i1 %24, label %41, label %25",
               "successor":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"},
   "precursor":"br label %28",
   "successor":"%40 = add nuw nsw i64 %23, 1"}],
 "precursor":"br i1 %18, label %43, label %19",
 "reads":
 [{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
     "value":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]"},
    {"input":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
     "value":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]"},
    {"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
     "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}],
   "input_index":
   ["%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
    "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
    "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
   "read":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
           "base_index":"%15 = mul i64 %12, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%15 = mul i64 %12, 65",
             "input":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"},
            {"addend":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
             "input":"%27 = mul i64 %26, 5",
             "value":"%32 = add i64 %27, %29"}],
           "input_index":
           ["%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
            "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
            "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
           "offset_add":{"input":"%32 = add i64 %27, %29",
                         "value":"%32 = add i64 %27, %29"},
           "output_index":"%32 = add i64 %27, %29",
           "stride_mul":
           [{"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"},
            {"input":"%32 = add i64 %27, %29",
             "value":"%32 = add i64 %27, %29"}]}},
  {"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
   "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
   "index":
   [{"input":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
     "value":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]"},
    {"input":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
     "value":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]"},
    {"input":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
     "value":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"}],
   "input_index":
   ["%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
    "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
    "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
   "read":{"address":"%35 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
           "base_index":"%15 = mul i64 %12, 65",
           "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @rhs, i64 0, i64 0, i64 0, i64 0, i64 0)",
           "index_add":
           [{"addend":"%15 = mul i64 %12, 65",
             "input":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
             "value":"%20 = add i64 %15, %17"},
            {"addend":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
             "input":"%21 = mul i64 %20, 65",
             "value":"%26 = add i64 %21, %23"},
            {"addend":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
             "input":"%27 = mul i64 %26, 5",
             "value":"%32 = add i64 %27, %29"}],
           "input_index":
           ["%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
            "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
            "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
           "offset_add":{"input":"%32 = add i64 %27, %29",
                         "value":"%32 = add i64 %27, %29"},
           "output_index":"%32 = add i64 %27, %29",
           "stride_mul":
           [{"input":"%20 = add i64 %15, %17",
             "multiplier":"i64 65",
             "value":"%21 = mul i64 %20, 65"},
            {"input":"%26 = add i64 %21, %23",
             "multiplier":"i64 5",
             "value":"%27 = mul i64 %26, 5"},
            {"input":"%32 = add i64 %27, %29",
             "value":"%32 = add i64 %27, %29"}]}}],
 "successor":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
 "write":{"address":"%33 = getelementptr double, double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0), i64 %32",
          "base_index":"%15 = mul i64 %12, 65",
          "base_pointer":"double* getelementptr inbounds ([64 x [65 x [65 x [5 x double]]]], [64 x [65 x [65 x [5 x double]]]]* @u, i64 0, i64 0, i64 0, i64 0, i64 0)",
          "index_add":
          [{"addend":"%15 = mul i64 %12, 65",
            "input":"%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
            "value":"%20 = add i64 %15, %17"},
           {"addend":"%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
            "input":"%21 = mul i64 %20, 65",
            "value":"%26 = add i64 %21, %23"},
           {"addend":"%29 = phi i64 [ %38, %31 ], [ 0, %25 ]",
            "input":"%27 = mul i64 %26, 5",
            "value":"%32 = add i64 %27, %29"}],
          "input_index":
          ["%17 = phi i64 [ %42, %41 ], [ 1, %14 ]",
           "%23 = phi i64 [ %40, %39 ], [ 1, %19 ]",
           "%29 = phi i64 [ %38, %31 ], [ 0, %25 ]"],
          "offset_add":{"input":"%32 = add i64 %27, %29",
                        "value":"%32 = add i64 %27, %29"},
          "output_index":"%32 = add i64 %27, %29",
          "store":"store double %37, double* %33, align 8, !tbaa !7",
          "stride_mul":
          [{"input":"%20 = add i64 %15, %17",
            "multiplier":"i64 65",
            "value":"%21 = mul i64 %20, 65"},
           {"input":"%26 = add i64 %21, %23",
            "multiplier":"i64 5",
            "value":"%27 = mul i64 %26, 5"},
           {"input":"%32 = add i64 %27, %29",
            "value":"%32 = add i64 %27, %29"}]}}
END stencil
END LOOP
END FUNCTION TRANSFORMATION

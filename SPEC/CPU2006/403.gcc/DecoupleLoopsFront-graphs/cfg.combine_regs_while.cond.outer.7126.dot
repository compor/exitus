digraph "CFG for 'combine_regs_while.cond.outer' function" {
	label="CFG for 'combine_regs_while.cond.outer' function";

	Node0xb464a50 [shape=record,label="{newFuncRoot}"];
	Node0xb464a50 -> Node0xb464af0;
	Node0xb464aa0 [shape=record,label="{while.end.exitStub}"];
	Node0xb464af0 [shape=record,label="{pd_while.cond.outer}"];
	Node0xb464af0 -> Node0xb464b40;
	Node0xb464b40 [shape=record,label="{it_while.cond|{<s0>T|<s1>F}}"];
	Node0xb464b40:s0 -> Node0xb464b90;
	Node0xb464b40:s1 -> Node0xb464aa0;
	Node0xb464b90 [shape=record,label="{it_while.body|{<s0>T|<s1>F}}"];
	Node0xb464b90:s0 -> Node0xb464c30;
	Node0xb464b90:s1 -> Node0xb464be0;
	Node0xb464be0 [shape=record,label="{pd_while.body.while.cond_crit_edge}"];
	Node0xb464be0 -> Node0xb464b40;
	Node0xb464c30 [shape=record,label="{pd_if.then|{<s0>T|<s1>F}}"];
	Node0xb464c30:s0 -> Node0xb464cd0;
	Node0xb464c30:s1 -> Node0xb464c80;
	Node0xb464c80 [shape=record,label="{pd_if.else}"];
	Node0xb464c80 -> Node0xb464d20;
	Node0xb464cd0 [shape=record,label="{pd_if.then.14}"];
	Node0xb464cd0 -> Node0xb464d20;
	Node0xb464d20 [shape=record,label="{pd_if.end.34}"];
	Node0xb464d20 -> Node0xb464af0;
}
